//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 18.05.2013 23:23:13
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MCDomain.Model
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "UD")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class McDataContext : Devart.Data.Linq.DataContext
    {
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(McDataContext));
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertStageresult(Stageresult instance);
        partial void UpdateStageresult(Stageresult instance);
        partial void DeleteStageresult(Stageresult instance);
        partial void InsertNtpsubview(Ntpsubview instance);
        partial void UpdateNtpsubview(Ntpsubview instance);
        partial void DeleteNtpsubview(Ntpsubview instance);
        partial void InsertNtpview(Ntpview instance);
        partial void UpdateNtpview(Ntpview instance);
        partial void DeleteNtpview(Ntpview instance);
        partial void InsertEconomefficiencytype(Economefficiencytype instance);
        partial void UpdateEconomefficiencytype(Economefficiencytype instance);
        partial void DeleteEconomefficiencytype(Economefficiencytype instance);
        partial void InsertEconomefficiencyparameter(Economefficiencyparameter instance);
        partial void UpdateEconomefficiencyparameter(Economefficiencyparameter instance);
        partial void DeleteEconomefficiencyparameter(Economefficiencyparameter instance);
        partial void InsertEfficienceparametertype(Efficienceparametertype instance);
        partial void UpdateEfficienceparametertype(Efficienceparametertype instance);
        partial void DeleteEfficienceparametertype(Efficienceparametertype instance);
        partial void InsertEfparameterstageresult(Efparameterstageresult instance);
        partial void UpdateEfparameterstageresult(Efparameterstageresult instance);
        partial void DeleteEfparameterstageresult(Efparameterstageresult instance);
        partial void InsertContractorposition(Contractorposition instance);
        partial void UpdateContractorposition(Contractorposition instance);
        partial void DeleteContractorposition(Contractorposition instance);
        partial void InsertContractorauthority(Contractorauthority instance);
        partial void UpdateContractorauthority(Contractorauthority instance);
        partial void DeleteContractorauthority(Contractorauthority instance);
        partial void InsertPosition(Position instance);
        partial void UpdatePosition(Position instance);
        partial void DeletePosition(Position instance);
        partial void InsertSubgeneralhierarchi(Subgeneralhierarchi instance);
        partial void UpdateSubgeneralhierarchi(Subgeneralhierarchi instance);
        partial void DeleteSubgeneralhierarchi(Subgeneralhierarchi instance);
        partial void InsertUdmetadata(Udmetadata instance);
        partial void UpdateUdmetadata(Udmetadata instance);
        partial void DeleteUdmetadata(Udmetadata instance);
        partial void InsertImportingscheme(Importingscheme instance);
        partial void UpdateImportingscheme(Importingscheme instance);
        partial void DeleteImportingscheme(Importingscheme instance);
        partial void InsertImportingschemeitem(Importingschemeitem instance);
        partial void UpdateImportingschemeitem(Importingschemeitem instance);
        partial void DeleteImportingschemeitem(Importingschemeitem instance);
        partial void InsertDepartment(Department instance);
        partial void UpdateDepartment(Department instance);
        partial void DeleteDepartment(Department instance);
        partial void InsertPost(Post instance);
        partial void UpdatePost(Post instance);
        partial void DeletePost(Post instance);
        partial void InsertResponsiblefororder(Responsiblefororder instance);
        partial void UpdateResponsiblefororder(Responsiblefororder instance);
        partial void DeleteResponsiblefororder(Responsiblefororder instance);
        partial void InsertLocation(Location instance);
        partial void UpdateLocation(Location instance);
        partial void DeleteLocation(Location instance);
        partial void InsertApprovalstate(Approvalstate instance);
        partial void UpdateApprovalstate(Approvalstate instance);
        partial void DeleteApprovalstate(Approvalstate instance);
        partial void InsertApprovalprocess(Approvalprocess instance);
        partial void UpdateApprovalprocess(Approvalprocess instance);
        partial void DeleteApprovalprocess(Approvalprocess instance);
        partial void InsertContractdocFundsFact(ContractdocFundsFact instance);
        partial void UpdateContractdocFundsFact(ContractdocFundsFact instance);
        partial void DeleteContractdocFundsFact(ContractdocFundsFact instance);
        partial void InsertMissivetype(Missivetype instance);
        partial void UpdateMissivetype(Missivetype instance);
        partial void DeleteMissivetype(Missivetype instance);
        partial void InsertApprovalgoal(Approvalgoal instance);
        partial void UpdateApprovalgoal(Approvalgoal instance);
        partial void DeleteApprovalgoal(Approvalgoal instance);
        partial void InsertResponsibleassignmentorder(Responsibleassignmentorder instance);
        partial void UpdateResponsibleassignmentorder(Responsibleassignmentorder instance);
        partial void DeleteResponsibleassignmentorder(Responsibleassignmentorder instance);
        partial void InsertEducation(Education instance);
        partial void UpdateEducation(Education instance);
        partial void DeleteEducation(Education instance);
        partial void InsertReportgrouping(Reportgrouping instance);
        partial void UpdateReportgrouping(Reportgrouping instance);
        partial void DeleteReportgrouping(Reportgrouping instance);
        partial void InsertReport(Report instance);
        partial void UpdateReport(Report instance);
        partial void DeleteReport(Report instance);
        partial void InsertFilterstate(Filterstate instance);
        partial void UpdateFilterstate(Filterstate instance);
        partial void DeleteFilterstate(Filterstate instance);
        partial void InsertContractpayment(Contractpayment instance);
        partial void UpdateContractpayment(Contractpayment instance);
        partial void DeleteContractpayment(Contractpayment instance);
        partial void InsertTroublesregistry(Troublesregistry instance);
        partial void UpdateTroublesregistry(Troublesregistry instance);
        partial void DeleteTroublesregistry(Troublesregistry instance);
        partial void InsertTrouble(Trouble instance);
        partial void UpdateTrouble(Trouble instance);
        partial void DeleteTrouble(Trouble instance);
        partial void InsertContracttrouble(Contracttrouble instance);
        partial void UpdateContracttrouble(Contracttrouble instance);
        partial void DeleteContracttrouble(Contracttrouble instance);
        partial void InsertProperty(Property instance);
        partial void UpdateProperty(Property instance);
        partial void DeleteProperty(Property instance);
        partial void InsertContractorpropertiy(Contractorpropertiy instance);
        partial void UpdateContractorpropertiy(Contractorpropertiy instance);
        partial void DeleteContractorpropertiy(Contractorpropertiy instance);
        partial void InsertFunctionalcustomer(Functionalcustomer instance);
        partial void UpdateFunctionalcustomer(Functionalcustomer instance);
        partial void DeleteFunctionalcustomer(Functionalcustomer instance);
        partial void InsertFunctionalcustomertype(Functionalcustomertype instance);
        partial void UpdateFunctionalcustomertype(Functionalcustomertype instance);
        partial void DeleteFunctionalcustomertype(Functionalcustomertype instance);
        partial void InsertFunctionalcustomercontract(Functionalcustomercontract instance);
        partial void UpdateFunctionalcustomercontract(Functionalcustomercontract instance);
        partial void DeleteFunctionalcustomercontract(Functionalcustomercontract instance);
        partial void InsertContractortype(Contractortype instance);
        partial void UpdateContractortype(Contractortype instance);
        partial void DeleteContractortype(Contractortype instance);
        partial void InsertEmployee(Employee instance);
        partial void UpdateEmployee(Employee instance);
        partial void DeleteEmployee(Employee instance);
        partial void InsertEnterpriseauthority(Enterpriseauthority instance);
        partial void UpdateEnterpriseauthority(Enterpriseauthority instance);
        partial void DeleteEnterpriseauthority(Enterpriseauthority instance);
        partial void InsertSchedule(Schedule instance);
        partial void UpdateSchedule(Schedule instance);
        partial void DeleteSchedule(Schedule instance);
        partial void InsertSchedulecontract(Schedulecontract instance);
        partial void UpdateSchedulecontract(Schedulecontract instance);
        partial void DeleteSchedulecontract(Schedulecontract instance);
        partial void InsertStage(Stage instance);
        partial void UpdateStage(Stage instance);
        partial void DeleteStage(Stage instance);
        partial void InsertAct(Act instance);
        partial void UpdateAct(Act instance);
        partial void DeleteAct(Act instance);
        partial void InsertClosedstagerelation(Closedstagerelation instance);
        partial void UpdateClosedstagerelation(Closedstagerelation instance);
        partial void DeleteClosedstagerelation(Closedstagerelation instance);
        partial void InsertFunccustomerperson(Funccustomerperson instance);
        partial void UpdateFunccustomerperson(Funccustomerperson instance);
        partial void DeleteFunccustomerperson(Funccustomerperson instance);
        partial void InsertSightfuncperson(Sightfuncperson instance);
        partial void UpdateSightfuncperson(Sightfuncperson instance);
        partial void DeleteSightfuncperson(Sightfuncperson instance);
        partial void InsertRegion(Region instance);
        partial void UpdateRegion(Region instance);
        partial void DeleteRegion(Region instance);
        partial void InsertActtype(Acttype instance);
        partial void UpdateActtype(Acttype instance);
        partial void DeleteActtype(Acttype instance);
        partial void InsertWorktype(Worktype instance);
        partial void UpdateWorktype(Worktype instance);
        partial void DeleteWorktype(Worktype instance);
        partial void InsertDisposal(Disposal instance);
        partial void UpdateDisposal(Disposal instance);
        partial void DeleteDisposal(Disposal instance);
        partial void InsertResponsible(Responsible instance);
        partial void UpdateResponsible(Responsible instance);
        partial void DeleteResponsible(Responsible instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertAuthority(Authority instance);
        partial void UpdateAuthority(Authority instance);
        partial void DeleteAuthority(Authority instance);
        partial void InsertSightfuncpersonscheme(Sightfuncpersonscheme instance);
        partial void UpdateSightfuncpersonscheme(Sightfuncpersonscheme instance);
        partial void DeleteSightfuncpersonscheme(Sightfuncpersonscheme instance);
        partial void InsertActpaymentdocument(Actpaymentdocument instance);
        partial void UpdateActpaymentdocument(Actpaymentdocument instance);
        partial void DeleteActpaymentdocument(Actpaymentdocument instance);
        partial void InsertTransferact(Transferact instance);
        partial void UpdateTransferact(Transferact instance);
        partial void DeleteTransferact(Transferact instance);
        partial void InsertTransferacttype(Transferacttype instance);
        partial void UpdateTransferacttype(Transferacttype instance);
        partial void DeleteTransferacttype(Transferacttype instance);
        partial void InsertDocument(Document instance);
        partial void UpdateDocument(Document instance);
        partial void DeleteDocument(Document instance);
        partial void InsertTransferacttypedocument(Transferacttypedocument instance);
        partial void UpdateTransferacttypedocument(Transferacttypedocument instance);
        partial void DeleteTransferacttypedocument(Transferacttypedocument instance);
        partial void InsertContracttranactdoc(Contracttranactdoc instance);
        partial void UpdateContracttranactdoc(Contracttranactdoc instance);
        partial void DeleteContracttranactdoc(Contracttranactdoc instance);
        partial void InsertContractdoc(Contractdoc instance);
        partial void UpdateContractdoc(Contractdoc instance);
        partial void DeleteContractdoc(Contractdoc instance);
        partial void InsertContracttype(Contracttype instance);
        partial void UpdateContracttype(Contracttype instance);
        partial void DeleteContracttype(Contracttype instance);
        partial void InsertCurrency(Currency instance);
        partial void UpdateCurrency(Currency instance);
        partial void DeleteCurrency(Currency instance);
        partial void InsertNdsalgorithm(Ndsalgorithm instance);
        partial void UpdateNdsalgorithm(Ndsalgorithm instance);
        partial void DeleteNdsalgorithm(Ndsalgorithm instance);
        partial void InsertPrepayment(Prepayment instance);
        partial void UpdatePrepayment(Prepayment instance);
        partial void DeletePrepayment(Prepayment instance);
        partial void InsertPerson(Person instance);
        partial void UpdatePerson(Person instance);
        partial void DeletePerson(Person instance);
        partial void InsertContractor(Contractor instance);
        partial void UpdateContractor(Contractor instance);
        partial void DeleteContractor(Contractor instance);
        partial void InsertDegree(Degree instance);
        partial void UpdateDegree(Degree instance);
        partial void DeleteDegree(Degree instance);
        partial void InsertNds(Nds instance);
        partial void UpdateNds(Nds instance);
        partial void DeleteNds(Nds instance);
        partial void InsertContractstate(Contractstate instance);
        partial void UpdateContractstate(Contractstate instance);
        partial void DeleteContractstate(Contractstate instance);
        partial void InsertContracthierarchy(Contracthierarchy instance);
        partial void UpdateContracthierarchy(Contracthierarchy instance);
        partial void DeleteContracthierarchy(Contracthierarchy instance);
        partial void InsertCurrencymeasure(Currencymeasure instance);
        partial void UpdateCurrencymeasure(Currencymeasure instance);
        partial void DeleteCurrencymeasure(Currencymeasure instance);
        partial void InsertPaymentdocument(Paymentdocument instance);
        partial void UpdatePaymentdocument(Paymentdocument instance);
        partial void DeletePaymentdocument(Paymentdocument instance);
        partial void InsertPrepaymentdocumenttype(Prepaymentdocumenttype instance);
        partial void UpdatePrepaymentdocumenttype(Prepaymentdocumenttype instance);
        partial void DeletePrepaymentdocumenttype(Prepaymentdocumenttype instance);
        partial void InsertContractrepositoryview(Contractrepositoryview instance);
        partial void UpdateContractrepositoryview(Contractrepositoryview instance);
        partial void DeleteContractrepositoryview(Contractrepositoryview instance);
        partial void InsertDocumentimage(Documentimage instance);
        partial void UpdateDocumentimage(Documentimage instance);
        partial void DeleteDocumentimage(Documentimage instance);
        partial void InsertContractdocdocumentimage(Contractdocdocumentimage instance);
        partial void UpdateContractdocdocumentimage(Contractdocdocumentimage instance);
        partial void DeleteContractdocdocumentimage(Contractdocdocumentimage instance);
        partial void InsertContractorcontractdoc(Contractorcontractdoc instance);
        partial void UpdateContractorcontractdoc(Contractorcontractdoc instance);
        partial void DeleteContractorcontractdoc(Contractorcontractdoc instance);
        partial void InsertYearreportcolor(Yearreportcolor instance);
        partial void UpdateYearreportcolor(Yearreportcolor instance);
        partial void DeleteYearreportcolor(Yearreportcolor instance);
        partial void InsertActrepositoryview(Actrepositoryview instance);
        partial void UpdateActrepositoryview(Actrepositoryview instance);
        partial void DeleteActrepositoryview(Actrepositoryview instance);
        partial void InsertContractpricecache(Contractpricecache instance);
        partial void UpdateContractpricecache(Contractpricecache instance);
        partial void DeleteContractpricecache(Contractpricecache instance);

        #endregion

        public McDataContext() :
        base(GetConnectionString("Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.MCDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public McDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(GetConnectionString("Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.Model.MCDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public McDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Stageresult> Stageresults
        {
            get
            {
                return this.GetTable<Stageresult>();
            }
        }

        public Devart.Data.Linq.Table<Ntpsubview> Ntpsubviews
        {
            get
            {
                return this.GetTable<Ntpsubview>();
            }
        }

        public Devart.Data.Linq.Table<Ntpview> Ntpviews
        {
            get
            {
                return this.GetTable<Ntpview>();
            }
        }

        public Devart.Data.Linq.Table<Economefficiencytype> Economefficiencytypes
        {
            get
            {
                return this.GetTable<Economefficiencytype>();
            }
        }

        public Devart.Data.Linq.Table<Economefficiencyparameter> Economefficiencyparameters
        {
            get
            {
                return this.GetTable<Economefficiencyparameter>();
            }
        }

        public Devart.Data.Linq.Table<Efficienceparametertype> Efficienceparametertypes
        {
            get
            {
                return this.GetTable<Efficienceparametertype>();
            }
        }

        public Devart.Data.Linq.Table<Efparameterstageresult> Efparameterstageresults
        {
            get
            {
                return this.GetTable<Efparameterstageresult>();
            }
        }

        public Devart.Data.Linq.Table<Contractorposition> Contractorpositions
        {
            get
            {
                return this.GetTable<Contractorposition>();
            }
        }

        public Devart.Data.Linq.Table<Contractorauthority> Contractorauthorities
        {
            get
            {
                return this.GetTable<Contractorauthority>();
            }
        }

        public Devart.Data.Linq.Table<Position> Positions
        {
            get
            {
                return this.GetTable<Position>();
            }
        }

        public Devart.Data.Linq.Table<Subgeneralhierarchi> Subgeneralhierarchis
        {
            get
            {
                return this.GetTable<Subgeneralhierarchi>();
            }
        }

        public Devart.Data.Linq.Table<Udmetadata> Udmetadatas
        {
            get
            {
                return this.GetTable<Udmetadata>();
            }
        }

        public Devart.Data.Linq.Table<Importingscheme> Importingschemes
        {
            get
            {
                return this.GetTable<Importingscheme>();
            }
        }

        public Devart.Data.Linq.Table<Importingschemeitem> Importingschemeitems
        {
            get
            {
                return this.GetTable<Importingschemeitem>();
            }
        }

        public Devart.Data.Linq.Table<Department> Departments
        {
            get
            {
                return this.GetTable<Department>();
            }
        }

        public Devart.Data.Linq.Table<Post> Posts
        {
            get
            {
                return this.GetTable<Post>();
            }
        }

        public Devart.Data.Linq.Table<Responsiblefororder> Responsiblefororders
        {
            get
            {
                return this.GetTable<Responsiblefororder>();
            }
        }

        public Devart.Data.Linq.Table<Location> Locations
        {
            get
            {
                return this.GetTable<Location>();
            }
        }

        public Devart.Data.Linq.Table<Approvalstate> Approvalstates
        {
            get
            {
                return this.GetTable<Approvalstate>();
            }
        }

        public Devart.Data.Linq.Table<Approvalprocess> Approvalprocesses
        {
            get
            {
                return this.GetTable<Approvalprocess>();
            }
        }

        public Devart.Data.Linq.Table<ContractdocFundsFact> ContractdocFundsFacts
        {
            get
            {
                return this.GetTable<ContractdocFundsFact>();
            }
        }

        public Devart.Data.Linq.Table<Missivetype> Missivetypes
        {
            get
            {
                return this.GetTable<Missivetype>();
            }
        }

        public Devart.Data.Linq.Table<Approvalgoal> Approvalgoals
        {
            get
            {
                return this.GetTable<Approvalgoal>();
            }
        }

        public Devart.Data.Linq.Table<Responsibleassignmentorder> Responsibleassignmentorders
        {
            get
            {
                return this.GetTable<Responsibleassignmentorder>();
            }
        }

        public Devart.Data.Linq.Table<Education> Educations
        {
            get
            {
                return this.GetTable<Education>();
            }
        }

        public Devart.Data.Linq.Table<Reportgrouping> Reportgroupings
        {
            get
            {
                return this.GetTable<Reportgrouping>();
            }
        }

        public Devart.Data.Linq.Table<Report> Reports
        {
            get
            {
                return this.GetTable<Report>();
            }
        }

        public Devart.Data.Linq.Table<Filterstate> Filterstates
        {
            get
            {
                return this.GetTable<Filterstate>();
            }
        }

        public Devart.Data.Linq.Table<Contractpayment> Contractpayments
        {
            get
            {
                return this.GetTable<Contractpayment>();
            }
        }

        public Devart.Data.Linq.Table<Troublesregistry> Troublesregistries
        {
            get
            {
                return this.GetTable<Troublesregistry>();
            }
        }

        public Devart.Data.Linq.Table<Trouble> Troubles
        {
            get
            {
                return this.GetTable<Trouble>();
            }
        }

        public Devart.Data.Linq.Table<Contracttrouble> Contracttroubles
        {
            get
            {
                return this.GetTable<Contracttrouble>();
            }
        }

        public Devart.Data.Linq.Table<Property> Properties
        {
            get
            {
                return this.GetTable<Property>();
            }
        }

        public Devart.Data.Linq.Table<Contractorpropertiy> Contractorpropertiys
        {
            get
            {
                return this.GetTable<Contractorpropertiy>();
            }
        }

        public Devart.Data.Linq.Table<Functionalcustomer> Functionalcustomers
        {
            get
            {
                return this.GetTable<Functionalcustomer>();
            }
        }

        public Devart.Data.Linq.Table<Functionalcustomertype> Functionalcustomertypes
        {
            get
            {
                return this.GetTable<Functionalcustomertype>();
            }
        }

        public Devart.Data.Linq.Table<Functionalcustomercontract> Functionalcustomercontracts
        {
            get
            {
                return this.GetTable<Functionalcustomercontract>();
            }
        }

        public Devart.Data.Linq.Table<Contractortype> Contractortypes
        {
            get
            {
                return this.GetTable<Contractortype>();
            }
        }

        public Devart.Data.Linq.Table<Employee> Employees
        {
            get
            {
                return this.GetTable<Employee>();
            }
        }

        public Devart.Data.Linq.Table<Enterpriseauthority> Enterpriseauthorities
        {
            get
            {
                return this.GetTable<Enterpriseauthority>();
            }
        }

        public Devart.Data.Linq.Table<Schedule> Schedules
        {
            get
            {
                return this.GetTable<Schedule>();
            }
        }

        public Devart.Data.Linq.Table<Schedulecontract> Schedulecontracts
        {
            get
            {
                return this.GetTable<Schedulecontract>();
            }
        }

        public Devart.Data.Linq.Table<Stage> Stages
        {
            get
            {
                return this.GetTable<Stage>();
            }
        }

        public Devart.Data.Linq.Table<Act> Acts
        {
            get
            {
                return this.GetTable<Act>();
            }
        }

        public Devart.Data.Linq.Table<Closedstagerelation> Closedstagerelations
        {
            get
            {
                return this.GetTable<Closedstagerelation>();
            }
        }

        public Devart.Data.Linq.Table<Funccustomerperson> Funccustomerpersons
        {
            get
            {
                return this.GetTable<Funccustomerperson>();
            }
        }

        public Devart.Data.Linq.Table<Sightfuncperson> Sightfuncpersons
        {
            get
            {
                return this.GetTable<Sightfuncperson>();
            }
        }

        public Devart.Data.Linq.Table<Region> Regions
        {
            get
            {
                return this.GetTable<Region>();
            }
        }

        public Devart.Data.Linq.Table<Acttype> Acttypes
        {
            get
            {
                return this.GetTable<Acttype>();
            }
        }

        public Devart.Data.Linq.Table<Worktype> Worktypes
        {
            get
            {
                return this.GetTable<Worktype>();
            }
        }

        public Devart.Data.Linq.Table<Disposal> Disposals
        {
            get
            {
                return this.GetTable<Disposal>();
            }
        }

        public Devart.Data.Linq.Table<Responsible> Responsibles
        {
            get
            {
                return this.GetTable<Responsible>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<Authority> Authorities
        {
            get
            {
                return this.GetTable<Authority>();
            }
        }

        public Devart.Data.Linq.Table<Sightfuncpersonscheme> Sightfuncpersonschemes
        {
            get
            {
                return this.GetTable<Sightfuncpersonscheme>();
            }
        }

        public Devart.Data.Linq.Table<Actpaymentdocument> Actpaymentdocuments
        {
            get
            {
                return this.GetTable<Actpaymentdocument>();
            }
        }

        public Devart.Data.Linq.Table<Transferact> Transferacts
        {
            get
            {
                return this.GetTable<Transferact>();
            }
        }

        public Devart.Data.Linq.Table<Transferacttype> Transferacttypes
        {
            get
            {
                return this.GetTable<Transferacttype>();
            }
        }

        public Devart.Data.Linq.Table<Document> Documents
        {
            get
            {
                return this.GetTable<Document>();
            }
        }

        public Devart.Data.Linq.Table<Transferacttypedocument> Transferacttypedocuments
        {
            get
            {
                return this.GetTable<Transferacttypedocument>();
            }
        }

        public Devart.Data.Linq.Table<Contracttranactdoc> Contracttranactdocs
        {
            get
            {
                return this.GetTable<Contracttranactdoc>();
            }
        }

        public Devart.Data.Linq.Table<Contractdoc> Contractdocs
        {
            get
            {
                return this.GetTable<Contractdoc>();
            }
        }

        public Devart.Data.Linq.Table<Contracttype> Contracttypes
        {
            get
            {
                return this.GetTable<Contracttype>();
            }
        }

        public Devart.Data.Linq.Table<Currency> Currencies
        {
            get
            {
                return this.GetTable<Currency>();
            }
        }

        public Devart.Data.Linq.Table<Ndsalgorithm> Ndsalgorithms
        {
            get
            {
                return this.GetTable<Ndsalgorithm>();
            }
        }

        public Devart.Data.Linq.Table<Prepayment> Prepayments
        {
            get
            {
                return this.GetTable<Prepayment>();
            }
        }

        public Devart.Data.Linq.Table<Person> People
        {
            get
            {
                return this.GetTable<Person>();
            }
        }

        public Devart.Data.Linq.Table<Contractor> Contractors
        {
            get
            {
                return this.GetTable<Contractor>();
            }
        }

        public Devart.Data.Linq.Table<Degree> Degrees
        {
            get
            {
                return this.GetTable<Degree>();
            }
        }

        public Devart.Data.Linq.Table<Nds> Nds
        {
            get
            {
                return this.GetTable<Nds>();
            }
        }

        public Devart.Data.Linq.Table<Contractstate> Contractstates
        {
            get
            {
                return this.GetTable<Contractstate>();
            }
        }

        public Devart.Data.Linq.Table<Contracthierarchy> Contracthierarchies
        {
            get
            {
                return this.GetTable<Contracthierarchy>();
            }
        }

        public Devart.Data.Linq.Table<Currencymeasure> Currencymeasures
        {
            get
            {
                return this.GetTable<Currencymeasure>();
            }
        }

        public Devart.Data.Linq.Table<Paymentdocument> Paymentdocuments
        {
            get
            {
                return this.GetTable<Paymentdocument>();
            }
        }

        public Devart.Data.Linq.Table<Prepaymentdocumenttype> Prepaymentdocumenttypes
        {
            get
            {
                return this.GetTable<Prepaymentdocumenttype>();
            }
        }

        public Devart.Data.Linq.Table<Contractrepositoryview> Contractrepositoryviews
        {
            get
            {
                return this.GetTable<Contractrepositoryview>();
            }
        }

        public Devart.Data.Linq.Table<Documentimage> Documentimages
        {
            get
            {
                return this.GetTable<Documentimage>();
            }
        }

        public Devart.Data.Linq.Table<Contractdocdocumentimage> Contractdocdocumentimages
        {
            get
            {
                return this.GetTable<Contractdocdocumentimage>();
            }
        }

        public Devart.Data.Linq.Table<Contractorcontractdoc> Contractorcontractdocs
        {
            get
            {
                return this.GetTable<Contractorcontractdoc>();
            }
        }

        public Devart.Data.Linq.Table<Yearreportcolor> Yearreportcolors
        {
            get
            {
                return this.GetTable<Yearreportcolor>();
            }
        }

        public Devart.Data.Linq.Table<Actrepositoryview> Actrepositoryviews
        {
            get
            {
                return this.GetTable<Actrepositoryview>();
            }
        }

        public Devart.Data.Linq.Table<Contractpricecache> Contractpricecaches
        {
            get
            {
                return this.GetTable<Contractpricecache>();
            }
        }
    }

    /// <summary>
    /// Результат этапа (сс)
    /// </summary>
    [Table(Name = @"UD.STAGERESULT")]
    public partial class Stageresult : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Economicefficiencytypeid;

        private long _Ntpsubviewid;

        private string _Name;

        private long _Stageid;

        private System.Nullable<System.DateTime> _Statedate;

        private string _Statedescription;

        private System.Nullable<System.DateTime> _Resultdate;

        private string _Description;

        private string _Actintroductionnum;

        private System.Nullable<long> _Approvalstateid;

        private System.Nullable<System.DateTime> _Actintroductiondate;

        private string _Efficiencycomment;

        private EntityRef<Stage> _Stage;

        private EntityRef<Ntpsubview> _Ntpsubview;

        private EntityRef<Economefficiencytype> _Economefficiencytype;

        private EntityRef<Approvalstate> _Approvalstate;

        private EntitySet<Efparameterstageresult> _Efparameterstageresults;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnEconomicefficiencytypeidChanging(System.Nullable<long> value);
        partial void OnEconomicefficiencytypeidChanged();
        partial void OnNtpsubviewidChanging(long value);
        partial void OnNtpsubviewidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStageidChanging(long value);
        partial void OnStageidChanged();
        partial void OnStatedateChanging(System.Nullable<System.DateTime> value);
        partial void OnStatedateChanged();
        partial void OnStatedescriptionChanging(string value);
        partial void OnStatedescriptionChanged();
        partial void OnResultdateChanging(System.Nullable<System.DateTime> value);
        partial void OnResultdateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnActintroductionnumChanging(string value);
        partial void OnActintroductionnumChanged();
        partial void OnApprovalstateidChanging(System.Nullable<long> value);
        partial void OnApprovalstateidChanged();
        partial void OnActintroductiondateChanging(System.Nullable<System.DateTime> value);
        partial void OnActintroductiondateChanged();
        partial void OnEfficiencycommentChanging(string value);
        partial void OnEfficiencycommentChanged();
        #endregion

        public Stageresult()
        {
            this._Stage  = default(EntityRef<Stage>);
            this._Ntpsubview  = default(EntityRef<Ntpsubview>);
            this._Economefficiencytype  = default(EntityRef<Economefficiencytype>);
            this._Approvalstate  = default(EntityRef<Approvalstate>);
            this._Efparameterstageresults = new EntitySet<Efparameterstageresult>(new Action<Efparameterstageresult>(this.attach_Efparameterstageresults), new Action<Efparameterstageresult>(this.detach_Efparameterstageresults));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Stageresult")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип экономической эффективности
        /// </summary>
        [Column(Name = @"ECONOMICEFFICIENCYTYPEID", Storage = "_Economicefficiencytypeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Economicefficiencytypeid
        {
            get
            {
                return this._Economicefficiencytypeid;
            }
            set
            {
                if (this._Economicefficiencytypeid != value)
                {
                    if (this._Economefficiencytype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEconomicefficiencytypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Economicefficiencytypeid = value;
                    this.SendPropertyChanged("Economicefficiencytypeid");
                    this.OnEconomicefficiencytypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на подвид НТП
        /// </summary>
        [Column(Name = @"NTPSUBVIEWID", Storage = "_Ntpsubviewid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ntpsubviewid
        {
            get
            {
                return this._Ntpsubviewid;
            }
            set
            {
                if (this._Ntpsubviewid != value)
                {
                    if (this._Ntpsubview.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNtpsubviewidChanging(value);
                    this.SendPropertyChanging();
                    this._Ntpsubviewid = value;
                    this.SendPropertyChanged("Ntpsubviewid");
                    this.OnNtpsubviewidChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование результата
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", DbType = "NVARCHAR2(2000) NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на этап
        /// </summary>
        [Column(Name = @"STAGEID", Storage = "_Stageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Stageid
        {
            get
            {
                return this._Stageid;
            }
            set
            {
                if (this._Stageid != value)
                {
                    if (this._Stage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStageidChanging(value);
                    this.SendPropertyChanging();
                    this._Stageid = value;
                    this.SendPropertyChanged("Stageid");
                    this.OnStageidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Statedate in the schema.
        /// </summary>
        [Column(Name = @"STATEDATE", Storage = "_Statedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Statedate
        {
            get
            {
                return this._Statedate;
            }
            set
            {
                if (this._Statedate != value)
                {
                    this.OnStatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Statedate = value;
                    this.SendPropertyChanged("Statedate");
                    this.OnStatedateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Statedescription in the schema.
        /// </summary>
        [Column(Name = @"STATEDESCRIPTION", Storage = "_Statedescription", DbType = "NVARCHAR2(2000) NULL")]
        public string Statedescription
        {
            get
            {
                return this._Statedescription;
            }
            set
            {
                if (this._Statedescription != value)
                {
                    this.OnStatedescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Statedescription = value;
                    this.SendPropertyChanged("Statedescription");
                    this.OnStatedescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата перехода в состояние
        /// </summary>
        [Column(Name = @"RESULTDATE", Storage = "_Resultdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Resultdate
        {
            get
            {
                return this._Resultdate;
            }
            set
            {
                if (this._Resultdate != value)
                {
                    this.OnResultdateChanging(value);
                    this.SendPropertyChanging();
                    this._Resultdate = value;
                    this.SendPropertyChanged("Resultdate");
                    this.OnResultdateChanged();
                }
            }
        }

    
        /// <summary>
        /// Описание состояния
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(2000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер акта внедрения
        /// </summary>
        [Column(Name = @"ACTINTRODUCTIONNUM", Storage = "_Actintroductionnum", DbType = "NVARCHAR2(100) NULL")]
        public string Actintroductionnum
        {
            get
            {
                return this._Actintroductionnum;
            }
            set
            {
                if (this._Actintroductionnum != value)
                {
                    this.OnActintroductionnumChanging(value);
                    this.SendPropertyChanging();
                    this._Actintroductionnum = value;
                    this.SendPropertyChanged("Actintroductionnum");
                    this.OnActintroductionnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstateid in the schema.
        /// </summary>
        [Column(Name = @"APPROVALSTATEID", Storage = "_Approvalstateid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Approvalstateid
        {
            get
            {
                return this._Approvalstateid;
            }
            set
            {
                if (this._Approvalstateid != value)
                {
                    if (this._Approvalstate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnApprovalstateidChanging(value);
                    this.SendPropertyChanging();
                    this._Approvalstateid = value;
                    this.SendPropertyChanged("Approvalstateid");
                    this.OnApprovalstateidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Actintroductiondate in the schema.
        /// </summary>
        [Column(Name = @"ACTINTRODUCTIONDATE", Storage = "_Actintroductiondate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Actintroductiondate
        {
            get
            {
                return this._Actintroductiondate;
            }
            set
            {
                if (this._Actintroductiondate != value)
                {
                    this.OnActintroductiondateChanging(value);
                    this.SendPropertyChanging();
                    this._Actintroductiondate = value;
                    this.SendPropertyChanged("Actintroductiondate");
                    this.OnActintroductiondateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Efficiencycomment in the schema.
        /// </summary>
        [Column(Name = @"EFFICIENCYCOMMENT", Storage = "_Efficiencycomment", DbType = "NVARCHAR2(2000) NULL")]
        public string Efficiencycomment
        {
            get
            {
                return this._Efficiencycomment;
            }
            set
            {
                if (this._Efficiencycomment != value)
                {
                    this.OnEfficiencycommentChanging(value);
                    this.SendPropertyChanging();
                    this._Efficiencycomment = value;
                    this.SendPropertyChanged("Efficiencycomment");
                    this.OnEfficiencycommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Stageresult", Storage="_Stage", ThisKey="Stageid", IsForeignKey=true, DeleteOnNull=true)]
        public Stage Stage
        {
            get
            {
                return this._Stage.Entity;
            }
            set
            {
                Stage previousValue = this._Stage.Entity;
                if ((previousValue != value) || (this._Stage.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage.Entity = null;
                        previousValue.Stageresults.Remove(this);
                    }
                    this._Stage.Entity = value;
                    if (value != null)
                    {
                        this._Stageid = value.Id;
                        value.Stageresults.Add(this);
                    }
                    else
                    {
                        this._Stageid = default(long);
                    }
                    this.SendPropertyChanged("Stage");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ntpsubview in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ntpsubview_Stageresult", Storage="_Ntpsubview", ThisKey="Ntpsubviewid", IsForeignKey=true)]
        public Ntpsubview Ntpsubview
        {
            get
            {
                return this._Ntpsubview.Entity;
            }
            set
            {
                Ntpsubview previousValue = this._Ntpsubview.Entity;
                if ((previousValue != value) || (this._Ntpsubview.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ntpsubview.Entity = null;
                        previousValue.Stageresults.Remove(this);
                    }
                    this._Ntpsubview.Entity = value;
                    if (value != null)
                    {
                        this._Ntpsubviewid = value.Id;
                        value.Stageresults.Add(this);
                    }
                    else
                    {
                        this._Ntpsubviewid = default(long);
                    }
                    this.SendPropertyChanged("Ntpsubview");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Economefficiencytype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencytype_Stageresult", Storage="_Economefficiencytype", ThisKey="Economicefficiencytypeid", IsForeignKey=true)]
        public Economefficiencytype Economefficiencytype
        {
            get
            {
                return this._Economefficiencytype.Entity;
            }
            set
            {
                Economefficiencytype previousValue = this._Economefficiencytype.Entity;
                if ((previousValue != value) || (this._Economefficiencytype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Economefficiencytype.Entity = null;
                        previousValue.Stageresults.Remove(this);
                    }
                    this._Economefficiencytype.Entity = value;
                    if (value != null)
                    {
                        this._Economicefficiencytypeid = value.Id;
                        value.Stageresults.Add(this);
                    }
                    else
                    {
                        this._Economicefficiencytypeid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Economefficiencytype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Stageresult", Storage="_Approvalstate", ThisKey="Approvalstateid", IsForeignKey=true)]
        public Approvalstate Approvalstate
        {
            get
            {
                return this._Approvalstate.Entity;
            }
            set
            {
                Approvalstate previousValue = this._Approvalstate.Entity;
                if ((previousValue != value) || (this._Approvalstate.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Approvalstate.Entity = null;
                        previousValue.Stageresults.Remove(this);
                    }
                    this._Approvalstate.Entity = value;
                    if (value != null)
                    {
                        this._Approvalstateid = value.Id;
                        value.Stageresults.Add(this);
                    }
                    else
                    {
                        this._Approvalstateid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Approvalstate");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Efparameterstageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stageresult_Efparameterstageresult", Storage="_Efparameterstageresults", OtherKey="Stageresultid", DeleteRule="CASCADE")]
        public EntitySet<Efparameterstageresult> Efparameterstageresults
        {
            get
            {
                return this._Efparameterstageresults;
            }
            set
            {
                this._Efparameterstageresults.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Efparameterstageresults(Efparameterstageresult entity)
        {
            this.SendPropertyChanging("Efparameterstageresults");
            entity.Stageresult = this;
        }
    
        private void detach_Efparameterstageresults(Efparameterstageresult entity)
        {
            this.SendPropertyChanging("Efparameterstageresults");
            entity.Stageresult = null;
        }
    }

    /// <summary>
    /// Подвид НТП
    /// </summary>
    [Table(Name = @"UD.NTPSUBVIEW")]
    public partial class Ntpsubview : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Ntpviewid;

        private string _Name;

        private string _Shortname;

        private EntitySet<Stageresult> _Stageresults;

        private EntityRef<Ntpview> _Ntpview;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNtpviewidChanging(long value);
        partial void OnNtpviewidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortnameChanging(string value);
        partial void OnShortnameChanged();
        #endregion

        public Ntpsubview()
        {
            this._Stageresults = new EntitySet<Stageresult>(new Action<Stageresult>(this.attach_Stageresults), new Action<Stageresult>(this.detach_Stageresults));
            this._Ntpview  = default(EntityRef<Ntpview>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Ntpsubview")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на вид НТП
        /// </summary>
        [Column(Name = @"NTPVIEWID", Storage = "_Ntpviewid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ntpviewid
        {
            get
            {
                return this._Ntpviewid;
            }
            set
            {
                if (this._Ntpviewid != value)
                {
                    if (this._Ntpview.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNtpviewidChanging(value);
                    this.SendPropertyChanging();
                    this._Ntpviewid = value;
                    this.SendPropertyChanged("Ntpviewid");
                    this.OnNtpviewidChanged();
                }
            }
        }

    
        /// <summary>
        /// Название подвида НТП
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", DbType = "NVARCHAR2(255) NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Краткое наименование НТП
        /// </summary>
        [Column(Name = @"SHORTNAME", Storage = "_Shortname", DbType = "NVARCHAR2(50) NULL")]
        public string Shortname
        {
            get
            {
                return this._Shortname;
            }
            set
            {
                if (this._Shortname != value)
                {
                    this.OnShortnameChanging(value);
                    this.SendPropertyChanging();
                    this._Shortname = value;
                    this.SendPropertyChanged("Shortname");
                    this.OnShortnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ntpsubview_Stageresult", Storage="_Stageresults", OtherKey="Ntpsubviewid", DeleteRule="CASCADE")]
        public EntitySet<Stageresult> Stageresults
        {
            get
            {
                return this._Stageresults;
            }
            set
            {
                this._Stageresults.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Ntpview in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ntpview_Ntpsubview", Storage="_Ntpview", ThisKey="Ntpviewid", IsForeignKey=true)]
        public Ntpview Ntpview
        {
            get
            {
                return this._Ntpview.Entity;
            }
            set
            {
                Ntpview previousValue = this._Ntpview.Entity;
                if ((previousValue != value) || (this._Ntpview.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ntpview.Entity = null;
                        previousValue.Ntpsubviews.Remove(this);
                    }
                    this._Ntpview.Entity = value;
                    if (value != null)
                    {
                        this._Ntpviewid = value.Id;
                        value.Ntpsubviews.Add(this);
                    }
                    else
                    {
                        this._Ntpviewid = default(long);
                    }
                    this.SendPropertyChanged("Ntpview");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Ntpsubview = this;
        }
    
        private void detach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Ntpsubview = null;
        }
    }

    /// <summary>
    /// Вид НТП (сп)
    /// </summary>
    [Table(Name = @"UD.NTPVIEW")]
    public partial class Ntpview : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Ntpsubview> _Ntpsubviews;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Ntpview()
        {
            this._Ntpsubviews = new EntitySet<Ntpsubview>(new Action<Ntpsubview>(this.attach_Ntpsubviews), new Action<Ntpsubview>(this.detach_Ntpsubviews));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Ntpview")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. Концепция или Нормативно-методическая документация)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ntpsubviews in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ntpview_Ntpsubview", Storage="_Ntpsubviews", OtherKey="Ntpviewid", DeleteRule="CASCADE")]
        public EntitySet<Ntpsubview> Ntpsubviews
        {
            get
            {
                return this._Ntpsubviews;
            }
            set
            {
                this._Ntpsubviews.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Ntpsubviews(Ntpsubview entity)
        {
            this.SendPropertyChanging("Ntpsubviews");
            entity.Ntpview = this;
        }
    
        private void detach_Ntpsubviews(Ntpsubview entity)
        {
            this.SendPropertyChanging("Ntpsubviews");
            entity.Ntpview = null;
        }
    }

    /// <summary>
    /// Тип экономической эффективности (сп)
    /// </summary>
    [Table(Name = @"UD.ECONOMEFFICIENCYTYPE")]
    public partial class Economefficiencytype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Stageresult> _Stageresults;

        private EntitySet<Efficienceparametertype> _Efficienceparametertypes;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Economefficiencytype()
        {
            this._Stageresults = new EntitySet<Stageresult>(new Action<Stageresult>(this.attach_Stageresults), new Action<Stageresult>(this.detach_Stageresults));
            this._Efficienceparametertypes = new EntitySet<Efficienceparametertype>(new Action<Efficienceparametertype>(this.attach_Efficienceparametertypes), new Action<Efficienceparametertype>(this.detach_Efficienceparametertypes));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Economefficiencytype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencytype_Stageresult", Storage="_Stageresults", OtherKey="Economicefficiencytypeid", DeleteRule="CASCADE")]
        public EntitySet<Stageresult> Stageresults
        {
            get
            {
                return this._Stageresults;
            }
            set
            {
                this._Stageresults.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Efficienceparametertypes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencytype_Efficienceparametertype", Storage="_Efficienceparametertypes", OtherKey="Economefficiencytypeid", DeleteRule="CASCADE")]
        public EntitySet<Efficienceparametertype> Efficienceparametertypes
        {
            get
            {
                return this._Efficienceparametertypes;
            }
            set
            {
                this._Efficienceparametertypes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Economefficiencytype = this;
        }
    
        private void detach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Economefficiencytype = null;
        }

        private void attach_Efficienceparametertypes(Efficienceparametertype entity)
        {
            this.SendPropertyChanging("Efficienceparametertypes");
            entity.Economefficiencytype = this;
        }
    
        private void detach_Efficienceparametertypes(Efficienceparametertype entity)
        {
            this.SendPropertyChanging("Efficienceparametertypes");
            entity.Economefficiencytype = null;
        }
    }

    /// <summary>
    /// Параметр экономической эффективности (сп)
    /// </summary>
    [Table(Name = @"UD.ECONOMEFFICIENCYPARAMETER")]
    public partial class Economefficiencyparameter : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Efficienceparametertype> _Efficienceparametertypes;

        private EntitySet<Efparameterstageresult> _Efparameterstageresults;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Economefficiencyparameter()
        {
            this._Efficienceparametertypes = new EntitySet<Efficienceparametertype>(new Action<Efficienceparametertype>(this.attach_Efficienceparametertypes), new Action<Efficienceparametertype>(this.detach_Efficienceparametertypes));
            this._Efparameterstageresults = new EntitySet<Efparameterstageresult>(new Action<Efparameterstageresult>(this.attach_Efparameterstageresults), new Action<Efparameterstageresult>(this.detach_Efparameterstageresults));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Economefficiencyparameter")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название параметра
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Efficienceparametertypes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencyparameter_Efficienceparametertype", Storage="_Efficienceparametertypes", OtherKey="Economefficiencyparameterid", DeleteRule="CASCADE")]
        public EntitySet<Efficienceparametertype> Efficienceparametertypes
        {
            get
            {
                return this._Efficienceparametertypes;
            }
            set
            {
                this._Efficienceparametertypes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Efparameterstageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencyparameter_Efparameterstageresult", Storage="_Efparameterstageresults", OtherKey="Economefficiencyparameterid", DeleteRule="CASCADE")]
        public EntitySet<Efparameterstageresult> Efparameterstageresults
        {
            get
            {
                return this._Efparameterstageresults;
            }
            set
            {
                this._Efparameterstageresults.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Efficienceparametertypes(Efficienceparametertype entity)
        {
            this.SendPropertyChanging("Efficienceparametertypes");
            entity.Economefficiencyparameter = this;
        }
    
        private void detach_Efficienceparametertypes(Efficienceparametertype entity)
        {
            this.SendPropertyChanging("Efficienceparametertypes");
            entity.Economefficiencyparameter = null;
        }

        private void attach_Efparameterstageresults(Efparameterstageresult entity)
        {
            this.SendPropertyChanging("Efparameterstageresults");
            entity.Economefficiencyparameter = this;
        }
    
        private void detach_Efparameterstageresults(Efparameterstageresult entity)
        {
            this.SendPropertyChanging("Efparameterstageresults");
            entity.Economefficiencyparameter = null;
        }
    }

    /// <summary>
    /// Парметры типа экономической эффективности (сс)
    /// </summary>
    [Table(Name = @"UD.EFFICIENCEPARAMETERTYPE")]
    public partial class Efficienceparametertype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Economefficiencyparameterid;

        private long _Economefficiencytypeid;

        private EntityRef<Economefficiencytype> _Economefficiencytype;

        private EntityRef<Economefficiencyparameter> _Economefficiencyparameter;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnEconomefficiencyparameteridChanging(long value);
        partial void OnEconomefficiencyparameteridChanged();
        partial void OnEconomefficiencytypeidChanging(long value);
        partial void OnEconomefficiencytypeidChanged();
        #endregion

        public Efficienceparametertype()
        {
            this._Economefficiencytype  = default(EntityRef<Economefficiencytype>);
            this._Economefficiencyparameter  = default(EntityRef<Economefficiencyparameter>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Efficienceparametertype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на параметр экономической эффективности
        /// </summary>
        [Column(Name = @"ECONOMEFFICIENCYPARAMETERID", Storage = "_Economefficiencyparameterid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Economefficiencyparameterid
        {
            get
            {
                return this._Economefficiencyparameterid;
            }
            set
            {
                if (this._Economefficiencyparameterid != value)
                {
                    if (this._Economefficiencyparameter.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEconomefficiencyparameteridChanging(value);
                    this.SendPropertyChanging();
                    this._Economefficiencyparameterid = value;
                    this.SendPropertyChanged("Economefficiencyparameterid");
                    this.OnEconomefficiencyparameteridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип экономической эффективности
        /// </summary>
        [Column(Name = @"ECONOMEFFICIENCYTYPEID", Storage = "_Economefficiencytypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Economefficiencytypeid
        {
            get
            {
                return this._Economefficiencytypeid;
            }
            set
            {
                if (this._Economefficiencytypeid != value)
                {
                    if (this._Economefficiencytype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEconomefficiencytypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Economefficiencytypeid = value;
                    this.SendPropertyChanged("Economefficiencytypeid");
                    this.OnEconomefficiencytypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Economefficiencytype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencytype_Efficienceparametertype", Storage="_Economefficiencytype", ThisKey="Economefficiencytypeid", IsForeignKey=true)]
        public Economefficiencytype Economefficiencytype
        {
            get
            {
                return this._Economefficiencytype.Entity;
            }
            set
            {
                Economefficiencytype previousValue = this._Economefficiencytype.Entity;
                if ((previousValue != value) || (this._Economefficiencytype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Economefficiencytype.Entity = null;
                        previousValue.Efficienceparametertypes.Remove(this);
                    }
                    this._Economefficiencytype.Entity = value;
                    if (value != null)
                    {
                        this._Economefficiencytypeid = value.Id;
                        value.Efficienceparametertypes.Add(this);
                    }
                    else
                    {
                        this._Economefficiencytypeid = default(long);
                    }
                    this.SendPropertyChanged("Economefficiencytype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Economefficiencyparameter in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencyparameter_Efficienceparametertype", Storage="_Economefficiencyparameter", ThisKey="Economefficiencyparameterid", IsForeignKey=true)]
        public Economefficiencyparameter Economefficiencyparameter
        {
            get
            {
                return this._Economefficiencyparameter.Entity;
            }
            set
            {
                Economefficiencyparameter previousValue = this._Economefficiencyparameter.Entity;
                if ((previousValue != value) || (this._Economefficiencyparameter.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Economefficiencyparameter.Entity = null;
                        previousValue.Efficienceparametertypes.Remove(this);
                    }
                    this._Economefficiencyparameter.Entity = value;
                    if (value != null)
                    {
                        this._Economefficiencyparameterid = value.Id;
                        value.Efficienceparametertypes.Add(this);
                    }
                    else
                    {
                        this._Economefficiencyparameterid = default(long);
                    }
                    this.SendPropertyChanged("Economefficiencyparameter");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Значения параметров экономической эффективности результата этапа (сс)
    /// </summary>
    [Table(Name = @"UD.EFPARAMETERSTAGERESULT")]
    public partial class Efparameterstageresult : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Economefficiencyparameterid;

        private long _Stageresultid;

        private System.Nullable<decimal> _Value;

        private EntityRef<Stageresult> _Stageresult;

        private EntityRef<Economefficiencyparameter> _Economefficiencyparameter;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnEconomefficiencyparameteridChanging(long value);
        partial void OnEconomefficiencyparameteridChanged();
        partial void OnStageresultidChanging(long value);
        partial void OnStageresultidChanged();
        partial void OnValueChanging(System.Nullable<decimal> value);
        partial void OnValueChanged();
        #endregion

        public Efparameterstageresult()
        {
            this._Stageresult  = default(EntityRef<Stageresult>);
            this._Economefficiencyparameter  = default(EntityRef<Economefficiencyparameter>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Efparameterstageresult")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на параметр экономической эфффективности
        /// </summary>
        [Column(Name = @"ECONOMEFFICIENCYPARAMETERID", Storage = "_Economefficiencyparameterid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Economefficiencyparameterid
        {
            get
            {
                return this._Economefficiencyparameterid;
            }
            set
            {
                if (this._Economefficiencyparameterid != value)
                {
                    if (this._Economefficiencyparameter.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEconomefficiencyparameteridChanging(value);
                    this.SendPropertyChanging();
                    this._Economefficiencyparameterid = value;
                    this.SendPropertyChanged("Economefficiencyparameterid");
                    this.OnEconomefficiencyparameteridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на результат этапа
        /// </summary>
        [Column(Name = @"STAGERESULTID", Storage = "_Stageresultid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Stageresultid
        {
            get
            {
                return this._Stageresultid;
            }
            set
            {
                if (this._Stageresultid != value)
                {
                    if (this._Stageresult.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStageresultidChanging(value);
                    this.SendPropertyChanging();
                    this._Stageresultid = value;
                    this.SendPropertyChanged("Stageresultid");
                    this.OnStageresultidChanged();
                }
            }
        }

    
        /// <summary>
        /// Значение параметра
        /// </summary>
        [Column(Name = @"VALUE", Storage = "_Value", DbType = "NUMBER(19,6) NULL")]
        public System.Nullable<decimal> Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageresult in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stageresult_Efparameterstageresult", Storage="_Stageresult", ThisKey="Stageresultid", IsForeignKey=true, DeleteOnNull=true)]
        public Stageresult Stageresult
        {
            get
            {
                return this._Stageresult.Entity;
            }
            set
            {
                Stageresult previousValue = this._Stageresult.Entity;
                if ((previousValue != value) || (this._Stageresult.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stageresult.Entity = null;
                        previousValue.Efparameterstageresults.Remove(this);
                    }
                    this._Stageresult.Entity = value;
                    if (value != null)
                    {
                        this._Stageresultid = value.Id;
                        value.Efparameterstageresults.Add(this);
                    }
                    else
                    {
                        this._Stageresultid = default(long);
                    }
                    this.SendPropertyChanged("Stageresult");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Economefficiencyparameter in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Economefficiencyparameter_Efparameterstageresult", Storage="_Economefficiencyparameter", ThisKey="Economefficiencyparameterid", IsForeignKey=true)]
        public Economefficiencyparameter Economefficiencyparameter
        {
            get
            {
                return this._Economefficiencyparameter.Entity;
            }
            set
            {
                Economefficiencyparameter previousValue = this._Economefficiencyparameter.Entity;
                if ((previousValue != value) || (this._Economefficiencyparameter.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Economefficiencyparameter.Entity = null;
                        previousValue.Efparameterstageresults.Remove(this);
                    }
                    this._Economefficiencyparameter.Entity = value;
                    if (value != null)
                    {
                        this._Economefficiencyparameterid = value.Id;
                        value.Efparameterstageresults.Add(this);
                    }
                    else
                    {
                        this._Economefficiencyparameterid = default(long);
                    }
                    this.SendPropertyChanged("Economefficiencyparameter");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Люди и их должности в организациях (Газпроме, дочерних организациях, сторонних организациях, кроме Промгаза) (сс)
    /// </summary>
    [Table(Name = @"UD.CONTRACTORPOSITION")]
    public partial class Contractorposition : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractorid;

        private long _Positionid;

        private EntityRef<Contractor> _Contractor;

        private EntityRef<Position> _Position;

        private EntitySet<Person> _People;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        partial void OnPositionidChanging(long value);
        partial void OnPositionidChanged();
        #endregion

        public Contractorposition()
        {
            this._Contractor  = default(EntityRef<Contractor>);
            this._Position  = default(EntityRef<Position>);
            this._People = new EntitySet<Person>(new Action<Person>(this.attach_People), new Action<Person>(this.detach_People));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractorposition")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на контрагента (организацию)
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// Должность
        /// </summary>
        [Column(Name = @"POSITIONID", Storage = "_Positionid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Positionid
        {
            get
            {
                return this._Positionid;
            }
            set
            {
                if (this._Positionid != value)
                {
                    if (this._Position.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPositionidChanging(value);
                    this.SendPropertyChanging();
                    this._Positionid = value;
                    this.SendPropertyChanged("Positionid");
                    this.OnPositionidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorposition", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Contractorpositions.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Contractorpositions.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Position_Contractorposition", Storage="_Position", ThisKey="Positionid", IsForeignKey=true)]
        public Position Position
        {
            get
            {
                return this._Position.Entity;
            }
            set
            {
                Position previousValue = this._Position.Entity;
                if ((previousValue != value) || (this._Position.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Position.Entity = null;
                        previousValue.Contractorpositions.Remove(this);
                    }
                    this._Position.Entity = value;
                    if (value != null)
                    {
                        this._Positionid = value.Id;
                        value.Contractorpositions.Add(this);
                    }
                    else
                    {
                        this._Positionid = default(long);
                    }
                    this.SendPropertyChanged("Position");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for People in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractorposition_Person", Storage="_People", OtherKey="Contractorpositionid", DeleteRule="CASCADE")]
        public EntitySet<Person> People
        {
            get
            {
                return this._People;
            }
            set
            {
                this._People.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_People(Person entity)
        {
            this.SendPropertyChanging("People");
            entity.Contractorposition = this;
        }
    
        private void detach_People(Person entity)
        {
            this.SendPropertyChanging("People");
            entity.Contractorposition = null;
        }
    }

    /// <summary>
    /// Основание для предсприятия-исполнителя
    /// </summary>
    [Table(Name = @"UD.CONTRACTORAUTHORITY")]
    public partial class Contractorauthority : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Authorityid;

        private string _Numdocument;

        private System.Nullable<System.DateTime> _Validfrom;

        private System.Nullable<System.DateTime> _Validto;

        private System.Nullable<bool> _Isvalid;

        private long _Contractorid;

        private EntityRef<Contractor> _Contractor;

        private EntityRef<Authority> _Authority;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnAuthorityidChanging(long value);
        partial void OnAuthorityidChanged();
        partial void OnNumdocumentChanging(string value);
        partial void OnNumdocumentChanged();
        partial void OnValidfromChanging(System.Nullable<System.DateTime> value);
        partial void OnValidfromChanged();
        partial void OnValidtoChanging(System.Nullable<System.DateTime> value);
        partial void OnValidtoChanged();
        partial void OnIsvalidChanging(System.Nullable<bool> value);
        partial void OnIsvalidChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        #endregion

        public Contractorauthority()
        {
            this._Contractor  = default(EntityRef<Contractor>);
            this._Authority  = default(EntityRef<Authority>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractorauthority")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на основание
        /// </summary>
        [Column(Name = @"AUTHORITYID", Storage = "_Authorityid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Authorityid
        {
            get
            {
                return this._Authorityid;
            }
            set
            {
                if (this._Authorityid != value)
                {
                    if (this._Authority.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAuthorityidChanging(value);
                    this.SendPropertyChanging();
                    this._Authorityid = value;
                    this.SendPropertyChanged("Authorityid");
                    this.OnAuthorityidChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер документа
        /// </summary>
        [Column(Name = @"NUMDOCUMENT", Storage = "_Numdocument", DbType = "NVARCHAR2(255) NULL")]
        public string Numdocument
        {
            get
            {
                return this._Numdocument;
            }
            set
            {
                if (this._Numdocument != value)
                {
                    this.OnNumdocumentChanging(value);
                    this.SendPropertyChanging();
                    this._Numdocument = value;
                    this.SendPropertyChanged("Numdocument");
                    this.OnNumdocumentChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата начала действия
        /// </summary>
        [Column(Name = @"VALIDFROM", Storage = "_Validfrom", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validfrom
        {
            get
            {
                return this._Validfrom;
            }
            set
            {
                if (this._Validfrom != value)
                {
                    this.OnValidfromChanging(value);
                    this.SendPropertyChanging();
                    this._Validfrom = value;
                    this.SendPropertyChanged("Validfrom");
                    this.OnValidfromChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата окончания действия
        /// </summary>
        [Column(Name = @"VALIDTO", Storage = "_Validto", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validto
        {
            get
            {
                return this._Validto;
            }
            set
            {
                if (this._Validto != value)
                {
                    this.OnValidtoChanging(value);
                    this.SendPropertyChanging();
                    this._Validto = value;
                    this.SendPropertyChanged("Validto");
                    this.OnValidtoChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак активности
        /// </summary>
        [Column(Name = @"ISVALID", Storage = "_Isvalid", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isvalid
        {
            get
            {
                return this._Isvalid;
            }
            set
            {
                if (this._Isvalid != value)
                {
                    this.OnIsvalidChanging(value);
                    this.SendPropertyChanging();
                    this._Isvalid = value;
                    this.SendPropertyChanged("Isvalid");
                    this.OnIsvalidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ответсвенного со стороны исполнителя
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorauthority", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Contractorauthorities.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Contractorauthorities.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Authority in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Authority_Contractorauthority", Storage="_Authority", ThisKey="Authorityid", IsForeignKey=true, DeleteOnNull=true)]
        public Authority Authority
        {
            get
            {
                return this._Authority.Entity;
            }
            set
            {
                Authority previousValue = this._Authority.Entity;
                if ((previousValue != value) || (this._Authority.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Authority.Entity = null;
                        previousValue.Contractorauthorities.Remove(this);
                    }
                    this._Authority.Entity = value;
                    if (value != null)
                    {
                        this._Authorityid = value.Id;
                        value.Contractorauthorities.Add(this);
                    }
                    else
                    {
                        this._Authorityid = default(long);
                    }
                    this.SendPropertyChanged("Authority");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Должность (сп)
    /// </summary>
    [Table(Name = @"UD.POSITION")]
    public partial class Position : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Contractorposition> _Contractorpositions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Position()
        {
            this._Contractorpositions = new EntitySet<Contractorposition>(new Action<Contractorposition>(this.attach_Contractorpositions), new Action<Contractorposition>(this.detach_Contractorpositions));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Position")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorpositions in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Position_Contractorposition", Storage="_Contractorpositions", OtherKey="Positionid")]
        public EntitySet<Contractorposition> Contractorpositions
        {
            get
            {
                return this._Contractorpositions;
            }
            set
            {
                this._Contractorpositions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractorpositions(Contractorposition entity)
        {
            this.SendPropertyChanging("Contractorpositions");
            entity.Position = this;
        }
    
        private void detach_Contractorpositions(Contractorposition entity)
        {
            this.SendPropertyChanging("Contractorpositions");
            entity.Position = null;
        }
    }

    /// <summary>
    /// Связь этапов генерального договора с субподрядными договорами (сс)
    /// </summary>
    [Table(Name = @"UD.SUBGENERALHIERARCHI")]
    public partial class Subgeneralhierarchi : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Generalcontractdocstageid;

        private long _Subcontractdocstageid;

        private EntityRef<Stage> _Stage_Generalcontractdocstageid;

        private EntityRef<Stage> _Stage_Subcontractdocstageid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGeneralcontractdocstageidChanging(long value);
        partial void OnGeneralcontractdocstageidChanged();
        partial void OnSubcontractdocstageidChanging(long value);
        partial void OnSubcontractdocstageidChanged();
        #endregion

        public Subgeneralhierarchi()
        {
            this._Stage_Generalcontractdocstageid  = default(EntityRef<Stage>);
            this._Stage_Subcontractdocstageid  = default(EntityRef<Stage>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Subgeneralhierarchi")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на этап генерального договора
        /// </summary>
        [Column(Name = @"GENERALCONTRACTDOCSTAGEID", Storage = "_Generalcontractdocstageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Generalcontractdocstageid
        {
            get
            {
                return this._Generalcontractdocstageid;
            }
            set
            {
                if (this._Generalcontractdocstageid != value)
                {
                    if (this._Stage_Generalcontractdocstageid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGeneralcontractdocstageidChanging(value);
                    this.SendPropertyChanging();
                    this._Generalcontractdocstageid = value;
                    this.SendPropertyChanged("Generalcontractdocstageid");
                    this.OnGeneralcontractdocstageidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на этап субподрядного договора
        /// </summary>
        [Column(Name = @"SUBCONTRACTDOCSTAGEID", Storage = "_Subcontractdocstageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Subcontractdocstageid
        {
            get
            {
                return this._Subcontractdocstageid;
            }
            set
            {
                if (this._Subcontractdocstageid != value)
                {
                    if (this._Stage_Subcontractdocstageid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSubcontractdocstageidChanging(value);
                    this.SendPropertyChanging();
                    this._Subcontractdocstageid = value;
                    this.SendPropertyChanged("Subcontractdocstageid");
                    this.OnSubcontractdocstageidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage_Generalcontractdocstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Subgeneralhierarchi_Generalcontractdocstageid", Storage="_Stage_Generalcontractdocstageid", ThisKey="Generalcontractdocstageid", IsForeignKey=true, DeleteOnNull=true)]
        public Stage Stage_Generalcontractdocstageid
        {
            get
            {
                return this._Stage_Generalcontractdocstageid.Entity;
            }
            set
            {
                Stage previousValue = this._Stage_Generalcontractdocstageid.Entity;
                if ((previousValue != value) || (this._Stage_Generalcontractdocstageid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage_Generalcontractdocstageid.Entity = null;
                        previousValue.Subgeneralhierarchis_Generalcontractdocstageid.Remove(this);
                    }
                    this._Stage_Generalcontractdocstageid.Entity = value;
                    if (value != null)
                    {
                        this._Generalcontractdocstageid = value.Id;
                        value.Subgeneralhierarchis_Generalcontractdocstageid.Add(this);
                    }
                    else
                    {
                        this._Generalcontractdocstageid = default(long);
                    }
                    this.SendPropertyChanged("Stage_Generalcontractdocstageid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage_Subcontractdocstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Subgeneralhierarchi_Subcontractdocstageid", Storage="_Stage_Subcontractdocstageid", ThisKey="Subcontractdocstageid", IsForeignKey=true, DeleteOnNull=true)]
        public Stage Stage_Subcontractdocstageid
        {
            get
            {
                return this._Stage_Subcontractdocstageid.Entity;
            }
            set
            {
                Stage previousValue = this._Stage_Subcontractdocstageid.Entity;
                if ((previousValue != value) || (this._Stage_Subcontractdocstageid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage_Subcontractdocstageid.Entity = null;
                        previousValue.Subgeneralhierarchis_Subcontractdocstageid.Remove(this);
                    }
                    this._Stage_Subcontractdocstageid.Entity = value;
                    if (value != null)
                    {
                        this._Subcontractdocstageid = value.Id;
                        value.Subgeneralhierarchis_Subcontractdocstageid.Add(this);
                    }
                    else
                    {
                        this._Subcontractdocstageid = default(long);
                    }
                    this.SendPropertyChanged("Stage_Subcontractdocstageid");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Udmetadata in the schema.
    /// </summary>
    [Table(Name = @"UD.UDMETADATA")]
    public partial class Udmetadata : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Schemerelease;

        private long _Schemebuild;

        private System.DateTime _Schemetimestamp;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSchemereleaseChanging(long value);
        partial void OnSchemereleaseChanged();
        partial void OnSchemebuildChanging(long value);
        partial void OnSchemebuildChanged();
        partial void OnSchemetimestampChanging(System.DateTime value);
        partial void OnSchemetimestampChanged();
        #endregion

        public Udmetadata()
        {
            OnCreated();
        }

    
        /// <summary>
        /// Старшая цифра версии схемы
        /// </summary>
        [Column(Name = @"SCHEMERELEASE", Storage = "_Schemerelease", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Schemerelease
        {
            get
            {
                return this._Schemerelease;
            }
            set
            {
                if (this._Schemerelease != value)
                {
                    this.OnSchemereleaseChanging(value);
                    this.SendPropertyChanging();
                    this._Schemerelease = value;
                    this.SendPropertyChanged("Schemerelease");
                    this.OnSchemereleaseChanged();
                }
            }
        }

    
        /// <summary>
        /// Младшая цифра версии схемы
        /// </summary>
        [Column(Name = @"SCHEMEBUILD", Storage = "_Schemebuild", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Schemebuild
        {
            get
            {
                return this._Schemebuild;
            }
            set
            {
                if (this._Schemebuild != value)
                {
                    this.OnSchemebuildChanging(value);
                    this.SendPropertyChanging();
                    this._Schemebuild = value;
                    this.SendPropertyChanged("Schemebuild");
                    this.OnSchemebuildChanged();
                }
            }
        }

    
        /// <summary>
        /// Временная отметка создания схемы
        /// </summary>
        [Column(Name = @"SCHEMETIMESTAMP", Storage = "_Schemetimestamp", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Schemetimestamp
        {
            get
            {
                return this._Schemetimestamp;
            }
            set
            {
                if (this._Schemetimestamp != value)
                {
                    this.OnSchemetimestampChanging(value);
                    this.SendPropertyChanging();
                    this._Schemetimestamp = value;
                    this.SendPropertyChanged("Schemetimestamp");
                    this.OnSchemetimestampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Схема импорта
    /// </summary>
    [Table(Name = @"UD.IMPORTINGSCHEME")]
    public partial class Importingscheme : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Schemename;

        private EntitySet<Importingschemeitem> _Importingschemeitems;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnSchemenameChanging(string value);
        partial void OnSchemenameChanged();
        #endregion

        public Importingscheme()
        {
            this._Importingschemeitems = new EntitySet<Importingschemeitem>(new Action<Importingschemeitem>(this.attach_Importingschemeitems), new Action<Importingschemeitem>(this.detach_Importingschemeitems));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор схемы импорта
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Importingscheme")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя схемы импорта
        /// </summary>
        [Column(Name = @"SCHEMENAME", Storage = "_Schemename", CanBeNull = false, DbType = "NVARCHAR2(500) NOT NULL")]
        public string Schemename
        {
            get
            {
                return this._Schemename;
            }
            set
            {
                if (this._Schemename != value)
                {
                    this.OnSchemenameChanging(value);
                    this.SendPropertyChanging();
                    this._Schemename = value;
                    this.SendPropertyChanged("Schemename");
                    this.OnSchemenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Importingschemeitems in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Importingscheme_Importingschemeitem", Storage="_Importingschemeitems", OtherKey="Schemeid")]
        public EntitySet<Importingschemeitem> Importingschemeitems
        {
            get
            {
                return this._Importingschemeitems;
            }
            set
            {
                this._Importingschemeitems.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Importingschemeitems(Importingschemeitem entity)
        {
            this.SendPropertyChanging("Importingschemeitems");
            entity.Importingscheme = this;
        }
    
        private void detach_Importingschemeitems(Importingschemeitem entity)
        {
            this.SendPropertyChanging("Importingschemeitems");
            entity.Importingscheme = null;
        }
    }

    /// <summary>
    /// Элемент схемы импорта
    /// </summary>
    [Table(Name = @"UD.IMPORTINGSCHEMEITEM")]
    public partial class Importingschemeitem : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Columnname;

        private string _Columnsign;

        private long _Columnindex;

        private bool _Isrequired;

        private long _Schemeid;

        private EntityRef<Importingscheme> _Importingscheme;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnColumnnameChanging(string value);
        partial void OnColumnnameChanged();
        partial void OnColumnsignChanging(string value);
        partial void OnColumnsignChanged();
        partial void OnColumnindexChanging(long value);
        partial void OnColumnindexChanged();
        partial void OnIsrequiredChanging(bool value);
        partial void OnIsrequiredChanged();
        partial void OnSchemeidChanging(long value);
        partial void OnSchemeidChanged();
        #endregion

        public Importingschemeitem()
        {
            this._Importingscheme  = default(EntityRef<Importingscheme>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор элемента схемы импорта
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Importingschemeitem")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя столбца
        /// </summary>
        [Column(Name = @"COLUMNNAME", Storage = "_Columnname", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Columnname
        {
            get
            {
                return this._Columnname;
            }
            set
            {
                if (this._Columnname != value)
                {
                    this.OnColumnnameChanging(value);
                    this.SendPropertyChanging();
                    this._Columnname = value;
                    this.SendPropertyChanged("Columnname");
                    this.OnColumnnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Знак
        /// </summary>
        [Column(Name = @"COLUMNSIGN", Storage = "_Columnsign", CanBeNull = false, DbType = "NVARCHAR2(20) NOT NULL")]
        public string Columnsign
        {
            get
            {
                return this._Columnsign;
            }
            set
            {
                if (this._Columnsign != value)
                {
                    this.OnColumnsignChanging(value);
                    this.SendPropertyChanging();
                    this._Columnsign = value;
                    this.SendPropertyChanged("Columnsign");
                    this.OnColumnsignChanged();
                }
            }
        }

    
        /// <summary>
        /// Индекс столбца
        /// </summary>
        [Column(Name = @"COLUMNINDEX", Storage = "_Columnindex", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Columnindex
        {
            get
            {
                return this._Columnindex;
            }
            set
            {
                if (this._Columnindex != value)
                {
                    this.OnColumnindexChanging(value);
                    this.SendPropertyChanging();
                    this._Columnindex = value;
                    this.SendPropertyChanged("Columnindex");
                    this.OnColumnindexChanged();
                }
            }
        }

    
        /// <summary>
        /// Является ли столбец обязательным
        /// </summary>
        [Column(Name = @"ISREQUIRED", Storage = "_Isrequired", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool Isrequired
        {
            get
            {
                return this._Isrequired;
            }
            set
            {
                if (this._Isrequired != value)
                {
                    this.OnIsrequiredChanging(value);
                    this.SendPropertyChanging();
                    this._Isrequired = value;
                    this.SendPropertyChanged("Isrequired");
                    this.OnIsrequiredChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на схему импорта
        /// </summary>
        [Column(Name = @"SCHEMEID", Storage = "_Schemeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Schemeid
        {
            get
            {
                return this._Schemeid;
            }
            set
            {
                if (this._Schemeid != value)
                {
                    if (this._Importingscheme.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSchemeidChanging(value);
                    this.SendPropertyChanging();
                    this._Schemeid = value;
                    this.SendPropertyChanged("Schemeid");
                    this.OnSchemeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Importingscheme in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Importingscheme_Importingschemeitem", Storage="_Importingscheme", ThisKey="Schemeid", IsForeignKey=true, DeleteOnNull=true)]
        public Importingscheme Importingscheme
        {
            get
            {
                return this._Importingscheme.Entity;
            }
            set
            {
                Importingscheme previousValue = this._Importingscheme.Entity;
                if ((previousValue != value) || (this._Importingscheme.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Importingscheme.Entity = null;
                        previousValue.Importingschemeitems.Remove(this);
                    }
                    this._Importingscheme.Entity = value;
                    if (value != null)
                    {
                        this._Schemeid = value.Id;
                        value.Importingschemeitems.Add(this);
                    }
                    else
                    {
                        this._Schemeid = default(long);
                    }
                    this.SendPropertyChanged("Importingscheme");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Department in the schema.
    /// </summary>
    [Table(Name = @"UD.DEPARTMENT")]
    public partial class Department : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Parentid;

        private long _Managerid;

        private long _Directedbyid;

        private string _Name;

        private EntitySet<Department> _Departments_Parentid;

        private EntityRef<Department> _Department_Parentid;

        private EntityRef<Employee> _Employee_Managerid;

        private EntityRef<Employee> _Employee_Directedbyid;

        private EntitySet<Responsiblefororder> _Responsiblefororders;

        private EntitySet<Employee> _Employees_Departmentid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnParentidChanging(System.Nullable<long> value);
        partial void OnParentidChanged();
        partial void OnManageridChanging(long value);
        partial void OnManageridChanged();
        partial void OnDirectedbyidChanging(long value);
        partial void OnDirectedbyidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Department()
        {
            this._Departments_Parentid = new EntitySet<Department>(new Action<Department>(this.attach_Departments_Parentid), new Action<Department>(this.detach_Departments_Parentid));
            this._Department_Parentid  = default(EntityRef<Department>);
            this._Employee_Managerid  = default(EntityRef<Employee>);
            this._Employee_Directedbyid  = default(EntityRef<Employee>);
            this._Responsiblefororders = new EntitySet<Responsiblefororder>(new Action<Responsiblefororder>(this.attach_Responsiblefororders), new Action<Responsiblefororder>(this.detach_Responsiblefororders));
            this._Employees_Departmentid = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees_Departmentid), new Action<Employee>(this.detach_Employees_Departmentid));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Department")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Parentid in the schema.
        /// </summary>
        [Column(Name = @"PARENTID", Storage = "_Parentid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    if (this._Department_Parentid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

    
        /// <summary>
        /// Руководитель отдела
        /// </summary>
        [Column(Name = @"MANAGERID", Storage = "_Managerid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Managerid
        {
            get
            {
                return this._Managerid;
            }
            set
            {
                if (this._Managerid != value)
                {
                    if (this._Employee_Managerid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnManageridChanging(value);
                    this.SendPropertyChanging();
                    this._Managerid = value;
                    this.SendPropertyChanged("Managerid");
                    this.OnManageridChanged();
                }
            }
        }

    
        /// <summary>
        /// Замдир для отдела
        /// </summary>
        [Column(Name = @"DIRECTEDBYID", Storage = "_Directedbyid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Directedbyid
        {
            get
            {
                return this._Directedbyid;
            }
            set
            {
                if (this._Directedbyid != value)
                {
                    if (this._Employee_Directedbyid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDirectedbyidChanging(value);
                    this.SendPropertyChanging();
                    this._Directedbyid = value;
                    this.SendPropertyChanged("Directedbyid");
                    this.OnDirectedbyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departments_Parentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Department", Storage="_Departments_Parentid", OtherKey="Parentid")]
        public EntitySet<Department> Departments_Parentid
        {
            get
            {
                return this._Departments_Parentid;
            }
            set
            {
                this._Departments_Parentid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Department_Parentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Department", Storage="_Department_Parentid", ThisKey="Parentid", IsForeignKey=true)]
        public Department Department_Parentid
        {
            get
            {
                return this._Department_Parentid.Entity;
            }
            set
            {
                Department previousValue = this._Department_Parentid.Entity;
                if ((previousValue != value) || (this._Department_Parentid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Department_Parentid.Entity = null;
                        previousValue.Departments_Parentid.Remove(this);
                    }
                    this._Department_Parentid.Entity = value;
                    if (value != null)
                    {
                        this._Parentid = value.Id;
                        value.Departments_Parentid.Add(this);
                    }
                    else
                    {
                        this._Parentid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Department_Parentid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee_Managerid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Id_Department_Managerid", Storage="_Employee_Managerid", ThisKey="Managerid", IsForeignKey=true)]
        public Employee Employee_Managerid
        {
            get
            {
                return this._Employee_Managerid.Entity;
            }
            set
            {
                Employee previousValue = this._Employee_Managerid.Entity;
                if ((previousValue != value) || (this._Employee_Managerid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Employee_Managerid.Entity = null;
                        previousValue.Departments_Managerid.Remove(this);
                    }
                    this._Employee_Managerid.Entity = value;
                    if (value != null)
                    {
                        this._Managerid = value.Id;
                        value.Departments_Managerid.Add(this);
                    }
                    else
                    {
                        this._Managerid = default(long);
                    }
                    this.SendPropertyChanged("Employee_Managerid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee_Directedbyid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Id_Department_Directedbyid", Storage="_Employee_Directedbyid", ThisKey="Directedbyid", IsForeignKey=true)]
        public Employee Employee_Directedbyid
        {
            get
            {
                return this._Employee_Directedbyid.Entity;
            }
            set
            {
                Employee previousValue = this._Employee_Directedbyid.Entity;
                if ((previousValue != value) || (this._Employee_Directedbyid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Employee_Directedbyid.Entity = null;
                        previousValue.Departments_Directedbyid.Remove(this);
                    }
                    this._Employee_Directedbyid.Entity = value;
                    if (value != null)
                    {
                        this._Directedbyid = value.Id;
                        value.Departments_Directedbyid.Add(this);
                    }
                    else
                    {
                        this._Directedbyid = default(long);
                    }
                    this.SendPropertyChanged("Employee_Directedbyid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsiblefororders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Responsiblefororder", Storage="_Responsiblefororders", OtherKey="Departmentid")]
        public EntitySet<Responsiblefororder> Responsiblefororders
        {
            get
            {
                return this._Responsiblefororders;
            }
            set
            {
                this._Responsiblefororders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Employees_Departmentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Employee", Storage="_Employees_Departmentid", OtherKey="Departmentid")]
        public EntitySet<Employee> Employees_Departmentid
        {
            get
            {
                return this._Employees_Departmentid;
            }
            set
            {
                this._Employees_Departmentid.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Departments_Parentid(Department entity)
        {
            this.SendPropertyChanging("Departments_Parentid");
            entity.Department_Parentid = this;
        }
    
        private void detach_Departments_Parentid(Department entity)
        {
            this.SendPropertyChanging("Departments_Parentid");
            entity.Department_Parentid = null;
        }

        private void attach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Department = this;
        }
    
        private void detach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Department = null;
        }

        private void attach_Employees_Departmentid(Employee entity)
        {
            this.SendPropertyChanging("Employees_Departmentid");
            entity.Department_Departmentid = this;
        }
    
        private void detach_Employees_Departmentid(Employee entity)
        {
            this.SendPropertyChanging("Employees_Departmentid");
            entity.Department_Departmentid = null;
        }
    }

    /// <summary>
    /// Должность
    /// </summary>
    [Table(Name = @"UD.POST")]
    public partial class Post : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Employee> _Employees;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Post()
        {
            this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Post")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Post_Employee", Storage="_Employees", OtherKey="Postid")]
        public EntitySet<Employee> Employees
        {
            get
            {
                return this._Employees;
            }
            set
            {
                this._Employees.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.Post = this;
        }
    
        private void detach_Employees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.Post = null;
        }
    }

    /// <summary>
    /// Ответственный по приказу
    /// </summary>
    [Table(Name = @"UD.RESPONSIBLEFORORDER")]
    public partial class Responsiblefororder : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Departmentid;

        private long _Employeeid;

        private long _Responsibleassignmentorderid;

        private System.Nullable<long> _Contracttypeid;

        private EntityRef<Department> _Department;

        private EntityRef<Employee> _Employee;

        private EntityRef<Responsibleassignmentorder> _Responsibleassignmentorder;

        private EntityRef<Contracttype> _Contracttype;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDepartmentidChanging(long value);
        partial void OnDepartmentidChanged();
        partial void OnEmployeeidChanging(long value);
        partial void OnEmployeeidChanged();
        partial void OnResponsibleassignmentorderidChanging(long value);
        partial void OnResponsibleassignmentorderidChanged();
        partial void OnContracttypeidChanging(System.Nullable<long> value);
        partial void OnContracttypeidChanged();
        #endregion

        public Responsiblefororder()
        {
            this._Department  = default(EntityRef<Department>);
            this._Employee  = default(EntityRef<Employee>);
            this._Responsibleassignmentorder  = default(EntityRef<Responsibleassignmentorder>);
            this._Contracttype  = default(EntityRef<Contracttype>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Responsiblefororder")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departmentid in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENTID", Storage = "_Departmentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Departmentid
        {
            get
            {
                return this._Departmentid;
            }
            set
            {
                if (this._Departmentid != value)
                {
                    if (this._Department.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Departmentid = value;
                    this.SendPropertyChanged("Departmentid");
                    this.OnDepartmentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employeeid in the schema.
        /// </summary>
        [Column(Name = @"EMPLOYEEID", Storage = "_Employeeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Employeeid
        {
            get
            {
                return this._Employeeid;
            }
            set
            {
                if (this._Employeeid != value)
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeidChanging(value);
                    this.SendPropertyChanging();
                    this._Employeeid = value;
                    this.SendPropertyChanged("Employeeid");
                    this.OnEmployeeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibleassignmentorderid in the schema.
        /// </summary>
        [Column(Name = @"RESPONSIBLEASSIGNMENTORDERID", Storage = "_Responsibleassignmentorderid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Responsibleassignmentorderid
        {
            get
            {
                return this._Responsibleassignmentorderid;
            }
            set
            {
                if (this._Responsibleassignmentorderid != value)
                {
                    if (this._Responsibleassignmentorder.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnResponsibleassignmentorderidChanging(value);
                    this.SendPropertyChanging();
                    this._Responsibleassignmentorderid = value;
                    this.SendPropertyChanged("Responsibleassignmentorderid");
                    this.OnResponsibleassignmentorderidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttypeid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTTYPEID", Storage = "_Contracttypeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contracttypeid
        {
            get
            {
                return this._Contracttypeid;
            }
            set
            {
                if (this._Contracttypeid != value)
                {
                    if (this._Contracttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContracttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contracttypeid = value;
                    this.SendPropertyChanged("Contracttypeid");
                    this.OnContracttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Department in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Responsiblefororder", Storage="_Department", ThisKey="Departmentid", IsForeignKey=true)]
        public Department Department
        {
            get
            {
                return this._Department.Entity;
            }
            set
            {
                Department previousValue = this._Department.Entity;
                if ((previousValue != value) || (this._Department.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Department.Entity = null;
                        previousValue.Responsiblefororders.Remove(this);
                    }
                    this._Department.Entity = value;
                    if (value != null)
                    {
                        this._Departmentid = value.Id;
                        value.Responsiblefororders.Add(this);
                    }
                    else
                    {
                        this._Departmentid = default(long);
                    }
                    this.SendPropertyChanged("Department");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Responsiblefororder", Storage="_Employee", ThisKey="Employeeid", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if ((previousValue != value) || (this._Employee.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Employee.Entity = null;
                        previousValue.Responsiblefororders.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if (value != null)
                    {
                        this._Employeeid = value.Id;
                        value.Responsiblefororders.Add(this);
                    }
                    else
                    {
                        this._Employeeid = default(long);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibleassignmentorder in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Responsibleassignmentorder_Responsiblefororder", Storage="_Responsibleassignmentorder", ThisKey="Responsibleassignmentorderid", IsForeignKey=true, DeleteOnNull=true)]
        public Responsibleassignmentorder Responsibleassignmentorder
        {
            get
            {
                return this._Responsibleassignmentorder.Entity;
            }
            set
            {
                Responsibleassignmentorder previousValue = this._Responsibleassignmentorder.Entity;
                if ((previousValue != value) || (this._Responsibleassignmentorder.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Responsibleassignmentorder.Entity = null;
                        previousValue.Responsiblefororders.Remove(this);
                    }
                    this._Responsibleassignmentorder.Entity = value;
                    if (value != null)
                    {
                        this._Responsibleassignmentorderid = value.Id;
                        value.Responsiblefororders.Add(this);
                    }
                    else
                    {
                        this._Responsibleassignmentorderid = default(long);
                    }
                    this.SendPropertyChanged("Responsibleassignmentorder");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Responsiblefororder", Storage="_Contracttype", ThisKey="Contracttypeid", IsForeignKey=true)]
        public Contracttype Contracttype
        {
            get
            {
                return this._Contracttype.Entity;
            }
            set
            {
                Contracttype previousValue = this._Contracttype.Entity;
                if ((previousValue != value) || (this._Contracttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contracttype.Entity = null;
                        previousValue.Responsiblefororders.Remove(this);
                    }
                    this._Contracttype.Entity = value;
                    if (value != null)
                    {
                        this._Contracttypeid = value.Id;
                        value.Responsiblefororders.Add(this);
                    }
                    else
                    {
                        this._Contracttypeid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contracttype");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Место нахождения
    /// </summary>
    [Table(Name = @"UD.LOCATION")]
    public partial class Location : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Approvalprocess> _Approvalprocesses_Tolocationid;

        private EntitySet<Approvalprocess> _Approvalprocesses_Fromlocationid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Location()
        {
            this._Approvalprocesses_Tolocationid = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses_Tolocationid), new Action<Approvalprocess>(this.detach_Approvalprocesses_Tolocationid));
            this._Approvalprocesses_Fromlocationid = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses_Fromlocationid), new Action<Approvalprocess>(this.detach_Approvalprocesses_Fromlocationid));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Location")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название места нахождения
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses_Tolocationid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Location_Id_Approvalprocess_Tolocationid", Storage="_Approvalprocesses_Tolocationid", OtherKey="Tolocationid")]
        public EntitySet<Approvalprocess> Approvalprocesses_Tolocationid
        {
            get
            {
                return this._Approvalprocesses_Tolocationid;
            }
            set
            {
                this._Approvalprocesses_Tolocationid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses_Fromlocationid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Location_Id_Approvalprocess_Fromlocationid", Storage="_Approvalprocesses_Fromlocationid", OtherKey="Fromlocationid")]
        public EntitySet<Approvalprocess> Approvalprocesses_Fromlocationid
        {
            get
            {
                return this._Approvalprocesses_Fromlocationid;
            }
            set
            {
                this._Approvalprocesses_Fromlocationid.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Approvalprocesses_Tolocationid(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses_Tolocationid");
            entity.Location_Tolocationid = this;
        }
    
        private void detach_Approvalprocesses_Tolocationid(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses_Tolocationid");
            entity.Location_Tolocationid = null;
        }

        private void attach_Approvalprocesses_Fromlocationid(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses_Fromlocationid");
            entity.Location_Fromlocationid = this;
        }
    
        private void detach_Approvalprocesses_Fromlocationid(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses_Fromlocationid");
            entity.Location_Fromlocationid = null;
        }
    }

    /// <summary>
    /// Состояние согласования документа
    /// </summary>
    [Table(Name = @"UD.APPROVALSTATE")]
    public partial class Approvalstate : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private System.Nullable<long> _Color;

        private System.Nullable<int> _Statedomain;

        private EntitySet<Stageresult> _Stageresults;

        private EntitySet<Approvalprocess> _Approvalprocesses;

        private EntitySet<Stage> _Stages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnColorChanging(System.Nullable<long> value);
        partial void OnColorChanged();
        partial void OnStatedomainChanging(System.Nullable<int> value);
        partial void OnStatedomainChanged();
        #endregion

        public Approvalstate()
        {
            this._Stageresults = new EntitySet<Stageresult>(new Action<Stageresult>(this.attach_Stageresults), new Action<Stageresult>(this.detach_Stageresults));
            this._Approvalprocesses = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses), new Action<Approvalprocess>(this.detach_Approvalprocesses));
            this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Approvalstate")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название состояния согласования
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Цвет представления состояния
        /// </summary>
        [Column(Name = @"COLOR", Storage = "_Color", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

    
        /// <summary>
        /// NULL или 00000000  - ограничения на использование не заданы
        /// 000000000
        ///         ^ - действие для договора
        /// 000000000
        ///        ^ - действие для этапа
        /// 000000000
        ///       ^  - действие для результата
        /// </summary>
        [Column(Name = @"STATEDOMAIN", Storage = "_Statedomain", DbType = "NUMBER(3) NULL")]
        public System.Nullable<int> Statedomain
        {
            get
            {
                return this._Statedomain;
            }
            set
            {
                if (this._Statedomain != value)
                {
                    this.OnStatedomainChanging(value);
                    this.SendPropertyChanging();
                    this._Statedomain = value;
                    this.SendPropertyChanged("Statedomain");
                    this.OnStatedomainChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Stageresult", Storage="_Stageresults", OtherKey="Approvalstateid")]
        public EntitySet<Stageresult> Stageresults
        {
            get
            {
                return this._Stageresults;
            }
            set
            {
                this._Stageresults.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Approvalprocess", Storage="_Approvalprocesses", OtherKey="Approvalstateid", DeleteRule="CASCADE")]
        public EntitySet<Approvalprocess> Approvalprocesses
        {
            get
            {
                return this._Approvalprocesses;
            }
            set
            {
                this._Approvalprocesses.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Stages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Stage", Storage="_Stages", OtherKey="Approvalstateid", DeleteRule="CASCADE")]
        public EntitySet<Stage> Stages
        {
            get
            {
                return this._Stages;
            }
            set
            {
                this._Stages.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Approvalstate = this;
        }
    
        private void detach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Approvalstate = null;
        }

        private void attach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Approvalstate = this;
        }
    
        private void detach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Approvalstate = null;
        }

        private void attach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Approvalstate = this;
        }
    
        private void detach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Approvalstate = null;
        }
    }

    /// <summary>
    /// Журнал согласования договора
    /// </summary>
    [Table(Name = @"UD.APPROVALPROCESS")]
    public partial class Approvalprocess : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractdocid;

        private long _Tolocationid;

        private long _Fromlocationid;

        private long _Approvalstateid;

        private long _Approvalgoalid;

        private System.DateTime _Transferstateat;

        private System.DateTime _Enterstateat;

        private string _Missiveid;

        private System.Nullable<System.DateTime> _Missivedate;

        private long _Missivetypeid;

        private string _Description;

        private System.DateTime _Enteringdate;

        private EntityRef<Location> _Location_Tolocationid;

        private EntityRef<Location> _Location_Fromlocationid;

        private EntityRef<Approvalstate> _Approvalstate;

        private EntityRef<Contractdoc> _Contractdoc;

        private EntityRef<Missivetype> _Missivetype;

        private EntityRef<Approvalgoal> _Approvalgoal;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        partial void OnTolocationidChanging(long value);
        partial void OnTolocationidChanged();
        partial void OnFromlocationidChanging(long value);
        partial void OnFromlocationidChanged();
        partial void OnApprovalstateidChanging(long value);
        partial void OnApprovalstateidChanged();
        partial void OnApprovalgoalidChanging(long value);
        partial void OnApprovalgoalidChanged();
        partial void OnTransferstateatChanging(System.DateTime value);
        partial void OnTransferstateatChanged();
        partial void OnEnterstateatChanging(System.DateTime value);
        partial void OnEnterstateatChanged();
        partial void OnMissiveidChanging(string value);
        partial void OnMissiveidChanged();
        partial void OnMissivedateChanging(System.Nullable<System.DateTime> value);
        partial void OnMissivedateChanged();
        partial void OnMissivetypeidChanging(long value);
        partial void OnMissivetypeidChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEnteringdateChanging(System.DateTime value);
        partial void OnEnteringdateChanged();
        #endregion

        public Approvalprocess()
        {
            this._Location_Tolocationid  = default(EntityRef<Location>);
            this._Location_Fromlocationid  = default(EntityRef<Location>);
            this._Approvalstate  = default(EntityRef<Approvalstate>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            this._Missivetype  = default(EntityRef<Missivetype>);
            this._Approvalgoal  = default(EntityRef<Approvalgoal>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Approvalprocess")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// Кому передано
        /// </summary>
        [Column(Name = @"TOLOCATIONID", Storage = "_Tolocationid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Tolocationid
        {
            get
            {
                return this._Tolocationid;
            }
            set
            {
                if (this._Tolocationid != value)
                {
                    if (this._Location_Tolocationid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTolocationidChanging(value);
                    this.SendPropertyChanging();
                    this._Tolocationid = value;
                    this.SendPropertyChanged("Tolocationid");
                    this.OnTolocationidChanged();
                }
            }
        }

    
        /// <summary>
        /// Кто передал
        /// </summary>
        [Column(Name = @"FROMLOCATIONID", Storage = "_Fromlocationid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Fromlocationid
        {
            get
            {
                return this._Fromlocationid;
            }
            set
            {
                if (this._Fromlocationid != value)
                {
                    if (this._Location_Fromlocationid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFromlocationidChanging(value);
                    this.SendPropertyChanging();
                    this._Fromlocationid = value;
                    this.SendPropertyChanged("Fromlocationid");
                    this.OnFromlocationidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstateid in the schema.
        /// </summary>
        [Column(Name = @"APPROVALSTATEID", Storage = "_Approvalstateid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Approvalstateid
        {
            get
            {
                return this._Approvalstateid;
            }
            set
            {
                if (this._Approvalstateid != value)
                {
                    if (this._Approvalstate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnApprovalstateidChanging(value);
                    this.SendPropertyChanging();
                    this._Approvalstateid = value;
                    this.SendPropertyChanged("Approvalstateid");
                    this.OnApprovalstateidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalgoalid in the schema.
        /// </summary>
        [Column(Name = @"APPROVALGOALID", Storage = "_Approvalgoalid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Approvalgoalid
        {
            get
            {
                return this._Approvalgoalid;
            }
            set
            {
                if (this._Approvalgoalid != value)
                {
                    if (this._Approvalgoal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnApprovalgoalidChanging(value);
                    this.SendPropertyChanging();
                    this._Approvalgoalid = value;
                    this.SendPropertyChanged("Approvalgoalid");
                    this.OnApprovalgoalidChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата передачи документа в состояние
        /// </summary>
        [Column(Name = @"TRANSFERSTATEAT", Storage = "_Transferstateat", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Transferstateat
        {
            get
            {
                return this._Transferstateat;
            }
            set
            {
                if (this._Transferstateat != value)
                {
                    this.OnTransferstateatChanging(value);
                    this.SendPropertyChanging();
                    this._Transferstateat = value;
                    this.SendPropertyChanged("Transferstateat");
                    this.OnTransferstateatChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата поступления документа в состояние
        /// </summary>
        [Column(Name = @"ENTERSTATEAT", Storage = "_Enterstateat", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Enterstateat
        {
            get
            {
                return this._Enterstateat;
            }
            set
            {
                if (this._Enterstateat != value)
                {
                    this.OnEnterstateatChanging(value);
                    this.SendPropertyChanging();
                    this._Enterstateat = value;
                    this.SendPropertyChanged("Enterstateat");
                    this.OnEnterstateatChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер письма
        /// </summary>
        [Column(Name = @"MISSIVEID", Storage = "_Missiveid", DbType = "NVARCHAR2(20) NULL")]
        public string Missiveid
        {
            get
            {
                return this._Missiveid;
            }
            set
            {
                if (this._Missiveid != value)
                {
                    this.OnMissiveidChanging(value);
                    this.SendPropertyChanging();
                    this._Missiveid = value;
                    this.SendPropertyChanged("Missiveid");
                    this.OnMissiveidChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата письма
        /// </summary>
        [Column(Name = @"MISSIVEDATE", Storage = "_Missivedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Missivedate
        {
            get
            {
                return this._Missivedate;
            }
            set
            {
                if (this._Missivedate != value)
                {
                    this.OnMissivedateChanging(value);
                    this.SendPropertyChanging();
                    this._Missivedate = value;
                    this.SendPropertyChanged("Missivedate");
                    this.OnMissivedateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Missivetypeid in the schema.
        /// </summary>
        [Column(Name = @"MISSIVETYPEID", Storage = "_Missivetypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Missivetypeid
        {
            get
            {
                return this._Missivetypeid;
            }
            set
            {
                if (this._Missivetypeid != value)
                {
                    if (this._Missivetype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMissivetypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Missivetypeid = value;
                    this.SendPropertyChanged("Missivetypeid");
                    this.OnMissivetypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Примечание
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(1000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Enteringdate in the schema.
        /// </summary>
        [Column(Name = @"ENTERINGDATE", Storage = "_Enteringdate", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Enteringdate
        {
            get
            {
                return this._Enteringdate;
            }
            set
            {
                if (this._Enteringdate != value)
                {
                    this.OnEnteringdateChanging(value);
                    this.SendPropertyChanging();
                    this._Enteringdate = value;
                    this.SendPropertyChanged("Enteringdate");
                    this.OnEnteringdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location_Tolocationid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Location_Id_Approvalprocess_Tolocationid", Storage="_Location_Tolocationid", ThisKey="Tolocationid", IsForeignKey=true)]
        public Location Location_Tolocationid
        {
            get
            {
                return this._Location_Tolocationid.Entity;
            }
            set
            {
                Location previousValue = this._Location_Tolocationid.Entity;
                if ((previousValue != value) || (this._Location_Tolocationid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Location_Tolocationid.Entity = null;
                        previousValue.Approvalprocesses_Tolocationid.Remove(this);
                    }
                    this._Location_Tolocationid.Entity = value;
                    if (value != null)
                    {
                        this._Tolocationid = value.Id;
                        value.Approvalprocesses_Tolocationid.Add(this);
                    }
                    else
                    {
                        this._Tolocationid = default(long);
                    }
                    this.SendPropertyChanged("Location_Tolocationid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location_Fromlocationid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Location_Id_Approvalprocess_Fromlocationid", Storage="_Location_Fromlocationid", ThisKey="Fromlocationid", IsForeignKey=true)]
        public Location Location_Fromlocationid
        {
            get
            {
                return this._Location_Fromlocationid.Entity;
            }
            set
            {
                Location previousValue = this._Location_Fromlocationid.Entity;
                if ((previousValue != value) || (this._Location_Fromlocationid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Location_Fromlocationid.Entity = null;
                        previousValue.Approvalprocesses_Fromlocationid.Remove(this);
                    }
                    this._Location_Fromlocationid.Entity = value;
                    if (value != null)
                    {
                        this._Fromlocationid = value.Id;
                        value.Approvalprocesses_Fromlocationid.Add(this);
                    }
                    else
                    {
                        this._Fromlocationid = default(long);
                    }
                    this.SendPropertyChanged("Location_Fromlocationid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Approvalprocess", Storage="_Approvalstate", ThisKey="Approvalstateid", IsForeignKey=true)]
        public Approvalstate Approvalstate
        {
            get
            {
                return this._Approvalstate.Entity;
            }
            set
            {
                Approvalstate previousValue = this._Approvalstate.Entity;
                if ((previousValue != value) || (this._Approvalstate.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Approvalstate.Entity = null;
                        previousValue.Approvalprocesses.Remove(this);
                    }
                    this._Approvalstate.Entity = value;
                    if (value != null)
                    {
                        this._Approvalstateid = value.Id;
                        value.Approvalprocesses.Add(this);
                    }
                    else
                    {
                        this._Approvalstateid = default(long);
                    }
                    this.SendPropertyChanged("Approvalstate");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Approvalprocess", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Approvalprocesses.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Approvalprocesses.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Missivetype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Missivetype_Approvalprocess", Storage="_Missivetype", ThisKey="Missivetypeid", IsForeignKey=true)]
        public Missivetype Missivetype
        {
            get
            {
                return this._Missivetype.Entity;
            }
            set
            {
                Missivetype previousValue = this._Missivetype.Entity;
                if ((previousValue != value) || (this._Missivetype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Missivetype.Entity = null;
                        previousValue.Approvalprocesses.Remove(this);
                    }
                    this._Missivetype.Entity = value;
                    if (value != null)
                    {
                        this._Missivetypeid = value.Id;
                        value.Approvalprocesses.Add(this);
                    }
                    else
                    {
                        this._Missivetypeid = default(long);
                    }
                    this.SendPropertyChanged("Missivetype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalgoal in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalgoal_Approvalprocess", Storage="_Approvalgoal", ThisKey="Approvalgoalid", IsForeignKey=true)]
        public Approvalgoal Approvalgoal
        {
            get
            {
                return this._Approvalgoal.Entity;
            }
            set
            {
                Approvalgoal previousValue = this._Approvalgoal.Entity;
                if ((previousValue != value) || (this._Approvalgoal.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Approvalgoal.Entity = null;
                        previousValue.Approvalprocesses.Remove(this);
                    }
                    this._Approvalgoal.Entity = value;
                    if (value != null)
                    {
                        this._Approvalgoalid = value.Id;
                        value.Approvalprocesses.Add(this);
                    }
                    else
                    {
                        this._Approvalgoalid = default(long);
                    }
                    this.SendPropertyChanged("Approvalgoal");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ContractdocFundsFact in the schema.
    /// </summary>
    [Table(Name = @"UD.CONTRACTDOC_FUNDS_FACT")]
    public partial class ContractdocFundsFact : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Contractdocid;

        private long _TimeDimid;

        private decimal _Fundsdisbursed;

        private decimal _Fundsleft;

        private decimal _Fundstotal;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        partial void OnTimeDimidChanging(long value);
        partial void OnTimeDimidChanged();
        partial void OnFundsdisbursedChanging(decimal value);
        partial void OnFundsdisbursedChanged();
        partial void OnFundsleftChanging(decimal value);
        partial void OnFundsleftChanged();
        partial void OnFundstotalChanging(decimal value);
        partial void OnFundstotalChanged();
        #endregion

        public ContractdocFundsFact()
        {
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeDimid in the schema.
        /// </summary>
        [Column(Name = @"TIME_DIMID", Storage = "_TimeDimid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long TimeDimid
        {
            get
            {
                return this._TimeDimid;
            }
            set
            {
                if (this._TimeDimid != value)
                {
                    this.OnTimeDimidChanging(value);
                    this.SendPropertyChanging();
                    this._TimeDimid = value;
                    this.SendPropertyChanged("TimeDimid");
                    this.OnTimeDimidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fundsdisbursed in the schema.
        /// </summary>
        [Column(Name = @"FUNDSDISBURSED", Storage = "_Fundsdisbursed", CanBeNull = false, DbType = "NUMBER(18,2) NOT NULL")]
        public decimal Fundsdisbursed
        {
            get
            {
                return this._Fundsdisbursed;
            }
            set
            {
                if (this._Fundsdisbursed != value)
                {
                    this.OnFundsdisbursedChanging(value);
                    this.SendPropertyChanging();
                    this._Fundsdisbursed = value;
                    this.SendPropertyChanged("Fundsdisbursed");
                    this.OnFundsdisbursedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fundsleft in the schema.
        /// </summary>
        [Column(Name = @"FUNDSLEFT", Storage = "_Fundsleft", CanBeNull = false, DbType = "NUMBER(18,2) NOT NULL")]
        public decimal Fundsleft
        {
            get
            {
                return this._Fundsleft;
            }
            set
            {
                if (this._Fundsleft != value)
                {
                    this.OnFundsleftChanging(value);
                    this.SendPropertyChanging();
                    this._Fundsleft = value;
                    this.SendPropertyChanged("Fundsleft");
                    this.OnFundsleftChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fundstotal in the schema.
        /// </summary>
        [Column(Name = @"FUNDSTOTAL", Storage = "_Fundstotal", CanBeNull = false, DbType = "NUMBER(18,2) NOT NULL")]
        public decimal Fundstotal
        {
            get
            {
                return this._Fundstotal;
            }
            set
            {
                if (this._Fundstotal != value)
                {
                    this.OnFundstotalChanging(value);
                    this.SendPropertyChanging();
                    this._Fundstotal = value;
                    this.SendPropertyChanged("Fundstotal");
                    this.OnFundstotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_ContractdocFundsFact", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.ContractdocFundsFacts.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.ContractdocFundsFacts.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Тип письма
    /// </summary>
    [Table(Name = @"UD.MISSIVETYPE")]
    public partial class Missivetype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Approvalprocess> _Approvalprocesses;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Missivetype()
        {
            this._Approvalprocesses = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses), new Action<Approvalprocess>(this.detach_Approvalprocesses));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Missivetype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(20) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Missivetype_Approvalprocess", Storage="_Approvalprocesses", OtherKey="Missivetypeid")]
        public EntitySet<Approvalprocess> Approvalprocesses
        {
            get
            {
                return this._Approvalprocesses;
            }
            set
            {
                this._Approvalprocesses.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Missivetype = this;
        }
    
        private void detach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Missivetype = null;
        }
    }

    /// <summary>
    /// Цель направления на согласование
    /// </summary>
    [Table(Name = @"UD.APPROVALGOAL")]
    public partial class Approvalgoal : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Approvalprocess> _Approvalprocesses;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Approvalgoal()
        {
            this._Approvalprocesses = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses), new Action<Approvalprocess>(this.detach_Approvalprocesses));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Approvalgoal")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalgoal_Approvalprocess", Storage="_Approvalprocesses", OtherKey="Approvalgoalid")]
        public EntitySet<Approvalprocess> Approvalprocesses
        {
            get
            {
                return this._Approvalprocesses;
            }
            set
            {
                this._Approvalprocesses.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Approvalgoal = this;
        }
    
        private void detach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Approvalgoal = null;
        }
    }

    /// <summary>
    /// There are no comments for Responsibleassignmentorder in the schema.
    /// </summary>
    [Table(Name = @"UD.RESPONSIBLEASSIGNMENTORDER")]
    public partial class Responsibleassignmentorder : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Ordernum;

        private System.Nullable<System.DateTime> _Orderdate;

        private EntitySet<Responsiblefororder> _Responsiblefororders;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnOrdernumChanging(string value);
        partial void OnOrdernumChanged();
        partial void OnOrderdateChanging(System.Nullable<System.DateTime> value);
        partial void OnOrderdateChanged();
        #endregion

        public Responsibleassignmentorder()
        {
            this._Responsiblefororders = new EntitySet<Responsiblefororder>(new Action<Responsiblefororder>(this.attach_Responsiblefororders), new Action<Responsiblefororder>(this.detach_Responsiblefororders));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Responsibleassignmentorder")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ordernum in the schema.
        /// </summary>
        [Column(Name = @"ORDERNUM", Storage = "_Ordernum", DbType = "NVARCHAR2(20) NULL")]
        public string Ordernum
        {
            get
            {
                return this._Ordernum;
            }
            set
            {
                if (this._Ordernum != value)
                {
                    this.OnOrdernumChanging(value);
                    this.SendPropertyChanging();
                    this._Ordernum = value;
                    this.SendPropertyChanged("Ordernum");
                    this.OnOrdernumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdate in the schema.
        /// </summary>
        [Column(Name = @"ORDERDATE", Storage = "_Orderdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Orderdate
        {
            get
            {
                return this._Orderdate;
            }
            set
            {
                if (this._Orderdate != value)
                {
                    this.OnOrderdateChanging(value);
                    this.SendPropertyChanging();
                    this._Orderdate = value;
                    this.SendPropertyChanged("Orderdate");
                    this.OnOrderdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsiblefororders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Responsibleassignmentorder_Responsiblefororder", Storage="_Responsiblefororders", OtherKey="Responsibleassignmentorderid", DeleteRule="CASCADE")]
        public EntitySet<Responsiblefororder> Responsiblefororders
        {
            get
            {
                return this._Responsiblefororders;
            }
            set
            {
                this._Responsiblefororders.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Responsibleassignmentorder = this;
        }
    
        private void detach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Responsibleassignmentorder = null;
        }
    }

    /// <summary>
    /// Образование
    /// </summary>
    [Table(Name = @"UD.EDUCATION")]
    public partial class Education : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Contractor> _Contractors;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Education()
        {
            this._Contractors = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractors), new Action<Contractor>(this.detach_Contractors));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Education")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Education_Contractor", Storage="_Contractors", OtherKey="Educationid")]
        public EntitySet<Contractor> Contractors
        {
            get
            {
                return this._Contractors;
            }
            set
            {
                this._Contractors.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractors(Contractor entity)
        {
            this.SendPropertyChanging("Contractors");
            entity.Education = this;
        }
    
        private void detach_Contractors(Contractor entity)
        {
            this.SendPropertyChanging("Contractors");
            entity.Education = null;
        }
    }

    /// <summary>
    /// There are no comments for Reportgrouping in the schema.
    /// </summary>
    [Table(Name = @"UD.REPORTGROUPING")]
    public partial class Reportgrouping : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Contracttypeid;

        private long _Contracttypesubgroupid;

        private System.Nullable<long> _Contractorid;

        private EntityRef<Contracttype> _Contracttype_Contracttypeid;

        private EntityRef<Contracttype> _Contracttype_Contracttypesubgroupid;

        private EntityRef<Contractor> _Contractor;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContracttypeidChanging(long value);
        partial void OnContracttypeidChanged();
        partial void OnContracttypesubgroupidChanging(long value);
        partial void OnContracttypesubgroupidChanged();
        partial void OnContractoridChanging(System.Nullable<long> value);
        partial void OnContractoridChanged();
        #endregion

        public Reportgrouping()
        {
            this._Contracttype_Contracttypeid  = default(EntityRef<Contracttype>);
            this._Contracttype_Contracttypesubgroupid  = default(EntityRef<Contracttype>);
            this._Contractor  = default(EntityRef<Contractor>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Contracttypeid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTTYPEID", Storage = "_Contracttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Contracttypeid
        {
            get
            {
                return this._Contracttypeid;
            }
            set
            {
                if (this._Contracttypeid != value)
                {
                    if (this._Contracttype_Contracttypeid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContracttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contracttypeid = value;
                    this.SendPropertyChanged("Contracttypeid");
                    this.OnContracttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttypesubgroupid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTTYPESUBGROUPID", Storage = "_Contracttypesubgroupid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Contracttypesubgroupid
        {
            get
            {
                return this._Contracttypesubgroupid;
            }
            set
            {
                if (this._Contracttypesubgroupid != value)
                {
                    if (this._Contracttype_Contracttypesubgroupid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContracttypesubgroupidChanging(value);
                    this.SendPropertyChanging();
                    this._Contracttypesubgroupid = value;
                    this.SendPropertyChanged("Contracttypesubgroupid");
                    this.OnContracttypesubgroupidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttype_Contracttypeid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Id_Reportgrouping_Contracttypeid", Storage="_Contracttype_Contracttypeid", ThisKey="Contracttypeid", IsForeignKey=true)]
        public Contracttype Contracttype_Contracttypeid
        {
            get
            {
                return this._Contracttype_Contracttypeid.Entity;
            }
            set
            {
                Contracttype previousValue = this._Contracttype_Contracttypeid.Entity;
                if ((previousValue != value) || (this._Contracttype_Contracttypeid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contracttype_Contracttypeid.Entity = null;
                        previousValue.Reportgroupings_Contracttypeid.Remove(this);
                    }
                    this._Contracttype_Contracttypeid.Entity = value;
                    if (value != null)
                    {
                        this._Contracttypeid = value.Id;
                        value.Reportgroupings_Contracttypeid.Add(this);
                    }
                    else
                    {
                        this._Contracttypeid = default(long);
                    }
                    this.SendPropertyChanged("Contracttype_Contracttypeid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttype_Contracttypesubgroupid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Id_Reportgrouping_Contracttypesubgroupid", Storage="_Contracttype_Contracttypesubgroupid", ThisKey="Contracttypesubgroupid", IsForeignKey=true)]
        public Contracttype Contracttype_Contracttypesubgroupid
        {
            get
            {
                return this._Contracttype_Contracttypesubgroupid.Entity;
            }
            set
            {
                Contracttype previousValue = this._Contracttype_Contracttypesubgroupid.Entity;
                if ((previousValue != value) || (this._Contracttype_Contracttypesubgroupid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contracttype_Contracttypesubgroupid.Entity = null;
                        previousValue.Reportgroupings_Contracttypesubgroupid.Remove(this);
                    }
                    this._Contracttype_Contracttypesubgroupid.Entity = value;
                    if (value != null)
                    {
                        this._Contracttypesubgroupid = value.Id;
                        value.Reportgroupings_Contracttypesubgroupid.Add(this);
                    }
                    else
                    {
                        this._Contracttypesubgroupid = default(long);
                    }
                    this.SendPropertyChanged("Contracttype_Contracttypesubgroupid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Reportgrouping", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Reportgroupings.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Reportgroupings.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Отчёт
    /// </summary>
    [Table(Name = @"UD.REPORT")]
    public partial class Report : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Description;

        private string _Template;

        private EntitySet<Filterstate> _Filterstates;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTemplateChanging(string value);
        partial void OnTemplateChanged();
        #endregion

        public Report()
        {
            this._Filterstates = new EntitySet<Filterstate>(new Action<Filterstate>(this.attach_Filterstates), new Action<Filterstate>(this.detach_Filterstates));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор отчёта
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Report")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название отчёта
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Описание отчёта
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(2000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя шаблонв отчёта
        /// </summary>
        [Column(Name = @"TEMPLATE", Storage = "_Template", DbType = "NVARCHAR2(255) NULL")]
        public string Template
        {
            get
            {
                return this._Template;
            }
            set
            {
                if (this._Template != value)
                {
                    this.OnTemplateChanging(value);
                    this.SendPropertyChanging();
                    this._Template = value;
                    this.SendPropertyChanged("Template");
                    this.OnTemplateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filterstates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Report_Filterstate", Storage="_Filterstates", OtherKey="Id", LinkTableName=@"UD.REPORT_FILTERSTATE", LinkThisKey=@"REPORTID", LinkOtherKey=@"FILTERSTATEID")]
        public EntitySet<Filterstate> Filterstates
        {
            get
            {
                return this._Filterstates;
            }
            set
            {
                this._Filterstates.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Filterstates(Filterstate entity)
        {
            this.SendPropertyChanging("Filterstates");
            entity.Reports.Add(this);
        }
    
        private void detach_Filterstates(Filterstate entity)
        {
            this.SendPropertyChanging("Filterstates");
            entity.Reports.Remove(this);
        }
    }

    /// <summary>
    /// Пользовательские фильтры
    /// </summary>
    [Table(Name = @"UD.FILTERSTATE")]
    public partial class Filterstate : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Description;

        private byte[] _Filterdata;

        private long _Owner;

        private System.Nullable<long> _Basedonfilterid;

        private EntitySet<Report> _Reports;

        private EntitySet<Filterstate> _Filterstates_Basedonfilterid;

        private EntityRef<Filterstate> _Filterstate_Basedonfilterid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnFilterdataChanging(byte[] value);
        partial void OnFilterdataChanged();
        partial void OnOwnerChanging(long value);
        partial void OnOwnerChanged();
        partial void OnBasedonfilteridChanging(System.Nullable<long> value);
        partial void OnBasedonfilteridChanged();
        #endregion

        public Filterstate()
        {
            this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
            this._Filterstates_Basedonfilterid = new EntitySet<Filterstate>(new Action<Filterstate>(this.attach_Filterstates_Basedonfilterid), new Action<Filterstate>(this.detach_Filterstates_Basedonfilterid));
            this._Filterstate_Basedonfilterid  = default(EntityRef<Filterstate>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор фильтра
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Filterstate")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование фильтра
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Описание фильтра
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(2000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Данные фильтра
        /// </summary>
        [Column(Name = @"FILTERDATA", Storage = "_Filterdata", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Filterdata
        {
            get
            {
                return this._Filterdata;
            }
            set
            {
                if (this._Filterdata != value)
                {
                    this.OnFilterdataChanging(value);
                    this.SendPropertyChanging();
                    this._Filterdata = value;
                    this.SendPropertyChanged("Filterdata");
                    this.OnFilterdataChanged();
                }
            }
        }

    
        /// <summary>
        /// Владелец фильтра:
        /// 0 - система
        /// -1 - публичный
        /// </summary>
        [Column(Name = @"OWNER", Storage = "_Owner", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Owner
        {
            get
            {
                return this._Owner;
            }
            set
            {
                if (this._Owner != value)
                {
                    this.OnOwnerChanging(value);
                    this.SendPropertyChanging();
                    this._Owner = value;
                    this.SendPropertyChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }

    
        /// <summary>
        /// Определяет на каком системном фильтре основан пользовательский
        /// </summary>
        [Column(Name = @"BASEDONFILTERID", Storage = "_Basedonfilterid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Basedonfilterid
        {
            get
            {
                return this._Basedonfilterid;
            }
            set
            {
                if (this._Basedonfilterid != value)
                {
                    if (this._Filterstate_Basedonfilterid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBasedonfilteridChanging(value);
                    this.SendPropertyChanging();
                    this._Basedonfilterid = value;
                    this.SendPropertyChanged("Basedonfilterid");
                    this.OnBasedonfilteridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reports in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Report_Filterstate", Storage="_Reports", OtherKey="Id", LinkTableName=@"UD.REPORT_FILTERSTATE", LinkThisKey=@"FILTERSTATEID", LinkOtherKey=@"REPORTID")]
        public EntitySet<Report> Reports
        {
            get
            {
                return this._Reports;
            }
            set
            {
                this._Reports.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Filterstates_Basedonfilterid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filterstate_Filterstate", Storage="_Filterstates_Basedonfilterid", OtherKey="Basedonfilterid")]
        public EntitySet<Filterstate> Filterstates_Basedonfilterid
        {
            get
            {
                return this._Filterstates_Basedonfilterid;
            }
            set
            {
                this._Filterstates_Basedonfilterid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Filterstate_Basedonfilterid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filterstate_Filterstate", Storage="_Filterstate_Basedonfilterid", ThisKey="Basedonfilterid", IsForeignKey=true)]
        public Filterstate Filterstate_Basedonfilterid
        {
            get
            {
                return this._Filterstate_Basedonfilterid.Entity;
            }
            set
            {
                Filterstate previousValue = this._Filterstate_Basedonfilterid.Entity;
                if ((previousValue != value) || (this._Filterstate_Basedonfilterid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Filterstate_Basedonfilterid.Entity = null;
                        previousValue.Filterstates_Basedonfilterid.Remove(this);
                    }
                    this._Filterstate_Basedonfilterid.Entity = value;
                    if (value != null)
                    {
                        this._Basedonfilterid = value.Id;
                        value.Filterstates_Basedonfilterid.Add(this);
                    }
                    else
                    {
                        this._Basedonfilterid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Filterstate_Basedonfilterid");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.Filterstates.Add(this);
        }
    
        private void detach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.Filterstates.Remove(this);
        }

        private void attach_Filterstates_Basedonfilterid(Filterstate entity)
        {
            this.SendPropertyChanging("Filterstates_Basedonfilterid");
            entity.Filterstate_Basedonfilterid = this;
        }
    
        private void detach_Filterstates_Basedonfilterid(Filterstate entity)
        {
            this.SendPropertyChanging("Filterstates_Basedonfilterid");
            entity.Filterstate_Basedonfilterid = null;
        }
    }

    /// <summary>
    /// There are no comments for Contractpayment in the schema.
    /// </summary>
    [Table(Name = @"UD.CONTRACTPAYMENT")]
    public partial class Contractpayment : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Paymentdocumentid;

        private long _Contractdocid;

        private EntityRef<Paymentdocument> _Paymentdocument;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPaymentdocumentidChanging(long value);
        partial void OnPaymentdocumentidChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        #endregion

        public Contractpayment()
        {
            this._Paymentdocument  = default(EntityRef<Paymentdocument>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractpayment")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdocumentid in the schema.
        /// </summary>
        [Column(Name = @"PAYMENTDOCUMENTID", Storage = "_Paymentdocumentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Paymentdocumentid
        {
            get
            {
                return this._Paymentdocumentid;
            }
            set
            {
                if (this._Paymentdocumentid != value)
                {
                    if (this._Paymentdocument.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPaymentdocumentidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentdocumentid = value;
                    this.SendPropertyChanged("Paymentdocumentid");
                    this.OnPaymentdocumentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdocument in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Paymentdocument_Contractpayment", Storage="_Paymentdocument", ThisKey="Paymentdocumentid", IsForeignKey=true, DeleteOnNull=true)]
        public Paymentdocument Paymentdocument
        {
            get
            {
                return this._Paymentdocument.Entity;
            }
            set
            {
                Paymentdocument previousValue = this._Paymentdocument.Entity;
                if ((previousValue != value) || (this._Paymentdocument.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Paymentdocument.Entity = null;
                        previousValue.Contractpayments.Remove(this);
                    }
                    this._Paymentdocument.Entity = value;
                    if (value != null)
                    {
                        this._Paymentdocumentid = value.Id;
                        value.Contractpayments.Add(this);
                    }
                    else
                    {
                        this._Paymentdocumentid = default(long);
                    }
                    this.SendPropertyChanged("Paymentdocument");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractpayment", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contractpayments.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Contractpayments.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Перечень проблем (сп)
    /// </summary>
    [Table(Name = @"UD.TROUBLESREGISTRY")]
    public partial class Troublesregistry : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Shortname;

        private System.Nullable<System.DateTime> _Approvedat;

        private string _Ordernum;

        private System.Nullable<System.DateTime> _Validfrom;

        private System.Nullable<System.DateTime> _Validto;

        private EntitySet<Trouble> _Troubles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortnameChanging(string value);
        partial void OnShortnameChanged();
        partial void OnApprovedatChanging(System.Nullable<System.DateTime> value);
        partial void OnApprovedatChanged();
        partial void OnOrdernumChanging(string value);
        partial void OnOrdernumChanged();
        partial void OnValidfromChanging(System.Nullable<System.DateTime> value);
        partial void OnValidfromChanged();
        partial void OnValidtoChanging(System.Nullable<System.DateTime> value);
        partial void OnValidtoChanged();
        #endregion

        public Troublesregistry()
        {
            this._Troubles = new EntitySet<Trouble>(new Action<Trouble>(this.attach_Troubles), new Action<Trouble>(this.detach_Troubles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Troublesregistry")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование перечня проблемы (напр. Перечень проблем 2006-2010 г.)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Краткое наименование перечня проблем
        /// </summary>
        [Column(Name = @"SHORTNAME", Storage = "_Shortname", DbType = "NVARCHAR2(200) NULL")]
        public string Shortname
        {
            get
            {
                return this._Shortname;
            }
            set
            {
                if (this._Shortname != value)
                {
                    this.OnShortnameChanging(value);
                    this.SendPropertyChanging();
                    this._Shortname = value;
                    this.SendPropertyChanged("Shortname");
                    this.OnShortnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата утверждения
        /// </summary>
        [Column(Name = @"APPROVEDAT", Storage = "_Approvedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Approvedat
        {
            get
            {
                return this._Approvedat;
            }
            set
            {
                if (this._Approvedat != value)
                {
                    this.OnApprovedatChanging(value);
                    this.SendPropertyChanging();
                    this._Approvedat = value;
                    this.SendPropertyChanged("Approvedat");
                    this.OnApprovedatChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер приказа (напр. 101-202)
        /// </summary>
        [Column(Name = @"ORDERNUM", Storage = "_Ordernum", DbType = "NVARCHAR2(20) NULL")]
        public string Ordernum
        {
            get
            {
                return this._Ordernum;
            }
            set
            {
                if (this._Ordernum != value)
                {
                    this.OnOrdernumChanging(value);
                    this.SendPropertyChanging();
                    this._Ordernum = value;
                    this.SendPropertyChanged("Ordernum");
                    this.OnOrdernumChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата начала действия
        /// </summary>
        [Column(Name = @"VALIDFROM", Storage = "_Validfrom", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validfrom
        {
            get
            {
                return this._Validfrom;
            }
            set
            {
                if (this._Validfrom != value)
                {
                    this.OnValidfromChanging(value);
                    this.SendPropertyChanging();
                    this._Validfrom = value;
                    this.SendPropertyChanged("Validfrom");
                    this.OnValidfromChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата окончания дейтсвия
        /// </summary>
        [Column(Name = @"VALIDTO", Storage = "_Validto", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validto
        {
            get
            {
                return this._Validto;
            }
            set
            {
                if (this._Validto != value)
                {
                    this.OnValidtoChanging(value);
                    this.SendPropertyChanging();
                    this._Validto = value;
                    this.SendPropertyChanged("Validto");
                    this.OnValidtoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Troubles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Troublesregistry_Trouble", Storage="_Troubles", OtherKey="Troubleregistryid")]
        public EntitySet<Trouble> Troubles
        {
            get
            {
                return this._Troubles;
            }
            set
            {
                this._Troubles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Troubles(Trouble entity)
        {
            this.SendPropertyChanging("Troubles");
            entity.Troublesregistry = this;
        }
    
        private void detach_Troubles(Trouble entity)
        {
            this.SendPropertyChanging("Troubles");
            entity.Troublesregistry = null;
        }
    }

    /// <summary>
    /// Проблема (сп)
    /// </summary>
    [Table(Name = @"UD.TROUBLE")]
    public partial class Trouble : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Num;

        private System.Nullable<long> _Toptroubleid;

        private System.Nullable<long> _Troubleregistryid;

        private EntityRef<Troublesregistry> _Troublesregistry;

        private EntitySet<Trouble> _Troubles_Toptroubleid;

        private EntityRef<Trouble> _Trouble_Toptroubleid;

        private EntitySet<Contracttrouble> _Contracttroubles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnToptroubleidChanging(System.Nullable<long> value);
        partial void OnToptroubleidChanged();
        partial void OnTroubleregistryidChanging(System.Nullable<long> value);
        partial void OnTroubleregistryidChanged();
        #endregion

        public Trouble()
        {
            this._Troublesregistry  = default(EntityRef<Troublesregistry>);
            this._Troubles_Toptroubleid = new EntitySet<Trouble>(new Action<Trouble>(this.attach_Troubles_Toptroubleid), new Action<Trouble>(this.detach_Troubles_Toptroubleid));
            this._Trouble_Toptroubleid  = default(EntityRef<Trouble>);
            this._Contracttroubles = new EntitySet<Contracttrouble>(new Action<Contracttrouble>(this.attach_Contracttroubles), new Action<Contracttrouble>(this.detach_Contracttroubles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Trouble")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование проблемы
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(500) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер (напр. 1.2)
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(10) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// ссылка на родительскую проблему (высота дерева 2)
        /// </summary>
        [Column(Name = @"TOPTROUBLEID", Storage = "_Toptroubleid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Toptroubleid
        {
            get
            {
                return this._Toptroubleid;
            }
            set
            {
                if (this._Toptroubleid != value)
                {
                    if (this._Trouble_Toptroubleid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToptroubleidChanging(value);
                    this.SendPropertyChanging();
                    this._Toptroubleid = value;
                    this.SendPropertyChanged("Toptroubleid");
                    this.OnToptroubleidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на перечень проблем
        /// </summary>
        [Column(Name = @"TROUBLEREGISTRYID", Storage = "_Troubleregistryid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Troubleregistryid
        {
            get
            {
                return this._Troubleregistryid;
            }
            set
            {
                if (this._Troubleregistryid != value)
                {
                    if (this._Troublesregistry.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTroubleregistryidChanging(value);
                    this.SendPropertyChanging();
                    this._Troubleregistryid = value;
                    this.SendPropertyChanged("Troubleregistryid");
                    this.OnTroubleregistryidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Troublesregistry in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Troublesregistry_Trouble", Storage="_Troublesregistry", ThisKey="Troubleregistryid", IsForeignKey=true)]
        public Troublesregistry Troublesregistry
        {
            get
            {
                return this._Troublesregistry.Entity;
            }
            set
            {
                Troublesregistry previousValue = this._Troublesregistry.Entity;
                if ((previousValue != value) || (this._Troublesregistry.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Troublesregistry.Entity = null;
                        previousValue.Troubles.Remove(this);
                    }
                    this._Troublesregistry.Entity = value;
                    if (value != null)
                    {
                        this._Troubleregistryid = value.Id;
                        value.Troubles.Add(this);
                    }
                    else
                    {
                        this._Troubleregistryid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Troublesregistry");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Troubles_Toptroubleid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trouble_Trouble", Storage="_Troubles_Toptroubleid", OtherKey="Toptroubleid")]
        public EntitySet<Trouble> Troubles_Toptroubleid
        {
            get
            {
                return this._Troubles_Toptroubleid;
            }
            set
            {
                this._Troubles_Toptroubleid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Trouble_Toptroubleid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trouble_Trouble", Storage="_Trouble_Toptroubleid", ThisKey="Toptroubleid", IsForeignKey=true)]
        public Trouble Trouble_Toptroubleid
        {
            get
            {
                return this._Trouble_Toptroubleid.Entity;
            }
            set
            {
                Trouble previousValue = this._Trouble_Toptroubleid.Entity;
                if ((previousValue != value) || (this._Trouble_Toptroubleid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Trouble_Toptroubleid.Entity = null;
                        previousValue.Troubles_Toptroubleid.Remove(this);
                    }
                    this._Trouble_Toptroubleid.Entity = value;
                    if (value != null)
                    {
                        this._Toptroubleid = value.Id;
                        value.Troubles_Toptroubleid.Add(this);
                    }
                    else
                    {
                        this._Toptroubleid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Trouble_Toptroubleid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttroubles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trouble_Contracttrouble", Storage="_Contracttroubles", OtherKey="Troubleid", DeleteRule="CASCADE")]
        public EntitySet<Contracttrouble> Contracttroubles
        {
            get
            {
                return this._Contracttroubles;
            }
            set
            {
                this._Contracttroubles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Troubles_Toptroubleid(Trouble entity)
        {
            this.SendPropertyChanging("Troubles_Toptroubleid");
            entity.Trouble_Toptroubleid = this;
        }
    
        private void detach_Troubles_Toptroubleid(Trouble entity)
        {
            this.SendPropertyChanging("Troubles_Toptroubleid");
            entity.Trouble_Toptroubleid = null;
        }

        private void attach_Contracttroubles(Contracttrouble entity)
        {
            this.SendPropertyChanging("Contracttroubles");
            entity.Trouble = this;
        }
    
        private void detach_Contracttroubles(Contracttrouble entity)
        {
            this.SendPropertyChanging("Contracttroubles");
            entity.Trouble = null;
        }
    }

    /// <summary>
    /// Проблемы, к которым относен договор (сс)
    /// </summary>
    [Table(Name = @"UD.CONTRACTTROUBLE")]
    public partial class Contracttrouble : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Troubleid;

        private long _Contractdocid;

        private EntityRef<Trouble> _Trouble;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnTroubleidChanging(long value);
        partial void OnTroubleidChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        #endregion

        public Contracttrouble()
        {
            this._Trouble  = default(EntityRef<Trouble>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contracttrouble")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на проблемы
        /// </summary>
        [Column(Name = @"TROUBLEID", Storage = "_Troubleid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Troubleid
        {
            get
            {
                return this._Troubleid;
            }
            set
            {
                if (this._Troubleid != value)
                {
                    if (this._Trouble.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTroubleidChanging(value);
                    this.SendPropertyChanging();
                    this._Troubleid = value;
                    this.SendPropertyChanged("Troubleid");
                    this.OnTroubleidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на договор
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Trouble in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trouble_Contracttrouble", Storage="_Trouble", ThisKey="Troubleid", IsForeignKey=true, DeleteOnNull=true)]
        public Trouble Trouble
        {
            get
            {
                return this._Trouble.Entity;
            }
            set
            {
                Trouble previousValue = this._Trouble.Entity;
                if ((previousValue != value) || (this._Trouble.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Trouble.Entity = null;
                        previousValue.Contracttroubles.Remove(this);
                    }
                    this._Trouble.Entity = value;
                    if (value != null)
                    {
                        this._Troubleid = value.Id;
                        value.Contracttroubles.Add(this);
                    }
                    else
                    {
                        this._Troubleid = default(long);
                    }
                    this.SendPropertyChanged("Trouble");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contracttrouble", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contracttroubles.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Contracttroubles.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Дополнительные свойства (для контрагентов)(сп)
    /// </summary>
    [Table(Name = @"UD.PROPERTY")]
    public partial class Property : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Contractorpropertiy> _Contractorpropertiys;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Property()
        {
            this._Contractorpropertiys = new EntitySet<Contractorpropertiy>(new Action<Contractorpropertiy>(this.attach_Contractorpropertiys), new Action<Contractorpropertiy>(this.detach_Contractorpropertiys));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Property")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorpropertiys in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Property_Contractorpropertiy", Storage="_Contractorpropertiys", OtherKey="Propertyid", DeleteRule="CASCADE")]
        public EntitySet<Contractorpropertiy> Contractorpropertiys
        {
            get
            {
                return this._Contractorpropertiys;
            }
            set
            {
                this._Contractorpropertiys.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractorpropertiys(Contractorpropertiy entity)
        {
            this.SendPropertyChanging("Contractorpropertiys");
            entity.Property = this;
        }
    
        private void detach_Contractorpropertiys(Contractorpropertiy entity)
        {
            this.SendPropertyChanging("Contractorpropertiys");
            entity.Property = null;
        }
    }

    /// <summary>
    /// Значения дополнительных атрибутов для контрагента (сс)
    /// </summary>
    [Table(Name = @"UD.CONTRACTORPROPERTIY")]
    public partial class Contractorpropertiy : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Propertyid;

        private long _Contractorid;

        private string _Value;

        private EntityRef<Property> _Property;

        private EntityRef<Contractor> _Contractor;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPropertyidChanging(long value);
        partial void OnPropertyidChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Contractorpropertiy()
        {
            this._Property  = default(EntityRef<Property>);
            this._Contractor  = default(EntityRef<Contractor>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractorpropertiy")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на атрибут
        /// </summary>
        [Column(Name = @"PROPERTYID", Storage = "_Propertyid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Propertyid
        {
            get
            {
                return this._Propertyid;
            }
            set
            {
                if (this._Propertyid != value)
                {
                    if (this._Property.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPropertyidChanging(value);
                    this.SendPropertyChanging();
                    this._Propertyid = value;
                    this.SendPropertyChanged("Propertyid");
                    this.OnPropertyidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на контрагента
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// Значение атрибута
        /// </summary>
        [Column(Name = @"VALUE", Storage = "_Value", CanBeNull = false, DbType = "NVARCHAR2(1000) NOT NULL")]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Property in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Property_Contractorpropertiy", Storage="_Property", ThisKey="Propertyid", IsForeignKey=true, DeleteOnNull=true)]
        public Property Property
        {
            get
            {
                return this._Property.Entity;
            }
            set
            {
                Property previousValue = this._Property.Entity;
                if ((previousValue != value) || (this._Property.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Property.Entity = null;
                        previousValue.Contractorpropertiys.Remove(this);
                    }
                    this._Property.Entity = value;
                    if (value != null)
                    {
                        this._Propertyid = value.Id;
                        value.Contractorpropertiys.Add(this);
                    }
                    else
                    {
                        this._Propertyid = default(long);
                    }
                    this.SendPropertyChanged("Property");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorpropertiy", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Contractorpropertiys.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Contractorpropertiys.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Функциональный заказчик
    /// </summary>
    [Table(Name = @"UD.FUNCTIONALCUSTOMER")]
    public partial class Functionalcustomer : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private long _Contractorid;

        private System.Nullable<long> _Parentfunctionalcustomerid;

        private long _Functionalcustomertypeid;

        private EntityRef<Contractor> _Contractor;

        private EntitySet<Functionalcustomer> _Functionalcustomers_Parentfunctionalcustomerid;

        private EntityRef<Functionalcustomer> _Functionalcustomer_Parentfunctionalcustomerid;

        private EntityRef<Functionalcustomertype> _Functionalcustomertype;

        private EntitySet<Functionalcustomercontract> _Functionalcustomercontracts;

        private EntitySet<Funccustomerperson> _Funccustomerpersons;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        partial void OnParentfunctionalcustomeridChanging(System.Nullable<long> value);
        partial void OnParentfunctionalcustomeridChanged();
        partial void OnFunctionalcustomertypeidChanging(long value);
        partial void OnFunctionalcustomertypeidChanged();
        #endregion

        public Functionalcustomer()
        {
            this._Contractor  = default(EntityRef<Contractor>);
            this._Functionalcustomers_Parentfunctionalcustomerid = new EntitySet<Functionalcustomer>(new Action<Functionalcustomer>(this.attach_Functionalcustomers_Parentfunctionalcustomerid), new Action<Functionalcustomer>(this.detach_Functionalcustomers_Parentfunctionalcustomerid));
            this._Functionalcustomer_Parentfunctionalcustomerid  = default(EntityRef<Functionalcustomer>);
            this._Functionalcustomertype  = default(EntityRef<Functionalcustomertype>);
            this._Functionalcustomercontracts = new EntitySet<Functionalcustomercontract>(new Action<Functionalcustomercontract>(this.attach_Functionalcustomercontracts), new Action<Functionalcustomercontract>(this.detach_Functionalcustomercontracts));
            this._Funccustomerpersons = new EntitySet<Funccustomerperson>(new Action<Funccustomerperson>(this.attach_Funccustomerpersons), new Action<Funccustomerperson>(this.detach_Funccustomerpersons));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Functionalcustomer")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. управление инновационного развития)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(1000) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на организацию функционального заказчика
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на функционального заказчика - предка (связь отдел-подотдел)
        /// </summary>
        [Column(Name = @"PARENTFUNCTIONALCUSTOMERID", Storage = "_Parentfunctionalcustomerid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Parentfunctionalcustomerid
        {
            get
            {
                return this._Parentfunctionalcustomerid;
            }
            set
            {
                if (this._Parentfunctionalcustomerid != value)
                {
                    if (this._Functionalcustomer_Parentfunctionalcustomerid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentfunctionalcustomeridChanging(value);
                    this.SendPropertyChanging();
                    this._Parentfunctionalcustomerid = value;
                    this.SendPropertyChanged("Parentfunctionalcustomerid");
                    this.OnParentfunctionalcustomeridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип функционального заказчика
        /// </summary>
        [Column(Name = @"FUNCTIONALCUSTOMERTYPEID", Storage = "_Functionalcustomertypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Functionalcustomertypeid
        {
            get
            {
                return this._Functionalcustomertypeid;
            }
            set
            {
                if (this._Functionalcustomertypeid != value)
                {
                    if (this._Functionalcustomertype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFunctionalcustomertypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Functionalcustomertypeid = value;
                    this.SendPropertyChanged("Functionalcustomertypeid");
                    this.OnFunctionalcustomertypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Functionalcustomer", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Functionalcustomers.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Functionalcustomers.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomers_Parentfunctionalcustomerid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Functionalcustomer", Storage="_Functionalcustomers_Parentfunctionalcustomerid", OtherKey="Parentfunctionalcustomerid", DeleteRule="CASCADE")]
        public EntitySet<Functionalcustomer> Functionalcustomers_Parentfunctionalcustomerid
        {
            get
            {
                return this._Functionalcustomers_Parentfunctionalcustomerid;
            }
            set
            {
                this._Functionalcustomers_Parentfunctionalcustomerid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomer_Parentfunctionalcustomerid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Functionalcustomer", Storage="_Functionalcustomer_Parentfunctionalcustomerid", ThisKey="Parentfunctionalcustomerid", IsForeignKey=true)]
        public Functionalcustomer Functionalcustomer_Parentfunctionalcustomerid
        {
            get
            {
                return this._Functionalcustomer_Parentfunctionalcustomerid.Entity;
            }
            set
            {
                Functionalcustomer previousValue = this._Functionalcustomer_Parentfunctionalcustomerid.Entity;
                if ((previousValue != value) || (this._Functionalcustomer_Parentfunctionalcustomerid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Functionalcustomer_Parentfunctionalcustomerid.Entity = null;
                        previousValue.Functionalcustomers_Parentfunctionalcustomerid.Remove(this);
                    }
                    this._Functionalcustomer_Parentfunctionalcustomerid.Entity = value;
                    if (value != null)
                    {
                        this._Parentfunctionalcustomerid = value.Id;
                        value.Functionalcustomers_Parentfunctionalcustomerid.Add(this);
                    }
                    else
                    {
                        this._Parentfunctionalcustomerid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Functionalcustomer_Parentfunctionalcustomerid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomertype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomertype_Functionalcustomer", Storage="_Functionalcustomertype", ThisKey="Functionalcustomertypeid", IsForeignKey=true)]
        public Functionalcustomertype Functionalcustomertype
        {
            get
            {
                return this._Functionalcustomertype.Entity;
            }
            set
            {
                Functionalcustomertype previousValue = this._Functionalcustomertype.Entity;
                if ((previousValue != value) || (this._Functionalcustomertype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Functionalcustomertype.Entity = null;
                        previousValue.Functionalcustomers.Remove(this);
                    }
                    this._Functionalcustomertype.Entity = value;
                    if (value != null)
                    {
                        this._Functionalcustomertypeid = value.Id;
                        value.Functionalcustomers.Add(this);
                    }
                    else
                    {
                        this._Functionalcustomertypeid = default(long);
                    }
                    this.SendPropertyChanged("Functionalcustomertype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomercontracts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Functionalcustomercontract", Storage="_Functionalcustomercontracts", OtherKey="Functionalcustomerid", DeleteRule="CASCADE")]
        public EntitySet<Functionalcustomercontract> Functionalcustomercontracts
        {
            get
            {
                return this._Functionalcustomercontracts;
            }
            set
            {
                this._Functionalcustomercontracts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Funccustomerpersons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Funccustomerperson", Storage="_Funccustomerpersons", OtherKey="Funccustomerid", DeleteRule="CASCADE")]
        public EntitySet<Funccustomerperson> Funccustomerpersons
        {
            get
            {
                return this._Funccustomerpersons;
            }
            set
            {
                this._Funccustomerpersons.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Functionalcustomers_Parentfunctionalcustomerid(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers_Parentfunctionalcustomerid");
            entity.Functionalcustomer_Parentfunctionalcustomerid = this;
        }
    
        private void detach_Functionalcustomers_Parentfunctionalcustomerid(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers_Parentfunctionalcustomerid");
            entity.Functionalcustomer_Parentfunctionalcustomerid = null;
        }

        private void attach_Functionalcustomercontracts(Functionalcustomercontract entity)
        {
            this.SendPropertyChanging("Functionalcustomercontracts");
            entity.Functionalcustomer = this;
        }
    
        private void detach_Functionalcustomercontracts(Functionalcustomercontract entity)
        {
            this.SendPropertyChanging("Functionalcustomercontracts");
            entity.Functionalcustomer = null;
        }

        private void attach_Funccustomerpersons(Funccustomerperson entity)
        {
            this.SendPropertyChanging("Funccustomerpersons");
            entity.Functionalcustomer = this;
        }
    
        private void detach_Funccustomerpersons(Funccustomerperson entity)
        {
            this.SendPropertyChanging("Funccustomerpersons");
            entity.Functionalcustomer = null;
        }
    }

    /// <summary>
    /// Тип функционального заказчика (сп)
    /// </summary>
    [Table(Name = @"UD.FUNCTIONALCUSTOMERTYPE")]
    public partial class Functionalcustomertype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Functionalcustomer> _Functionalcustomers;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Functionalcustomertype()
        {
            this._Functionalcustomers = new EntitySet<Functionalcustomer>(new Action<Functionalcustomer>(this.attach_Functionalcustomers), new Action<Functionalcustomer>(this.detach_Functionalcustomers));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Functionalcustomertype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр ?)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomertype_Functionalcustomer", Storage="_Functionalcustomers", OtherKey="Functionalcustomertypeid", DeleteRule="CASCADE")]
        public EntitySet<Functionalcustomer> Functionalcustomers
        {
            get
            {
                return this._Functionalcustomers;
            }
            set
            {
                this._Functionalcustomers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Functionalcustomers(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers");
            entity.Functionalcustomertype = this;
        }
    
        private void detach_Functionalcustomers(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers");
            entity.Functionalcustomertype = null;
        }
    }

    /// <summary>
    /// Функциональный заказчик договора (сс)
    /// </summary>
    [Table(Name = @"UD.FUNCTIONALCUSTOMERCONTRACT")]
    public partial class Functionalcustomercontract : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Functionalcustomerid;

        private long _Contractdocid;

        private EntityRef<Functionalcustomer> _Functionalcustomer;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFunctionalcustomeridChanging(long value);
        partial void OnFunctionalcustomeridChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        #endregion

        public Functionalcustomercontract()
        {
            this._Functionalcustomer  = default(EntityRef<Functionalcustomer>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Functionalcustomercontract")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на функционального заказчика
        /// </summary>
        [Column(Name = @"FUNCTIONALCUSTOMERID", Storage = "_Functionalcustomerid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Functionalcustomerid
        {
            get
            {
                return this._Functionalcustomerid;
            }
            set
            {
                if (this._Functionalcustomerid != value)
                {
                    if (this._Functionalcustomer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFunctionalcustomeridChanging(value);
                    this.SendPropertyChanging();
                    this._Functionalcustomerid = value;
                    this.SendPropertyChanged("Functionalcustomerid");
                    this.OnFunctionalcustomeridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на договор
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Functionalcustomercontract", Storage="_Functionalcustomer", ThisKey="Functionalcustomerid", IsForeignKey=true, DeleteOnNull=true)]
        public Functionalcustomer Functionalcustomer
        {
            get
            {
                return this._Functionalcustomer.Entity;
            }
            set
            {
                Functionalcustomer previousValue = this._Functionalcustomer.Entity;
                if ((previousValue != value) || (this._Functionalcustomer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Functionalcustomer.Entity = null;
                        previousValue.Functionalcustomercontracts.Remove(this);
                    }
                    this._Functionalcustomer.Entity = value;
                    if (value != null)
                    {
                        this._Functionalcustomerid = value.Id;
                        value.Functionalcustomercontracts.Add(this);
                    }
                    else
                    {
                        this._Functionalcustomerid = default(long);
                    }
                    this.SendPropertyChanged("Functionalcustomer");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Functionalcustomercontract", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Functionalcustomercontracts.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Functionalcustomercontracts.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Тип контрагента (сп)
    /// </summary>
    [Table(Name = @"UD.CONTRACTORTYPE")]
    public partial class Contractortype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private System.Nullable<int> _Reportorder;

        private EntitySet<Contractor> _Contractors;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnReportorderChanging(System.Nullable<int> value);
        partial void OnReportorderChanged();
        #endregion

        public Contractortype()
        {
            this._Contractors = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractors), new Action<Contractor>(this.detach_Contractors));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractortype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название типа (например. Дочерние организации)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Определяет порядок следования группы в отчётах
        /// </summary>
        [Column(Name = @"REPORTORDER", Storage = "_Reportorder", DbType = "NUMBER(3) NULL")]
        public System.Nullable<int> Reportorder
        {
            get
            {
                return this._Reportorder;
            }
            set
            {
                if (this._Reportorder != value)
                {
                    this.OnReportorderChanging(value);
                    this.SendPropertyChanging();
                    this._Reportorder = value;
                    this.SendPropertyChanged("Reportorder");
                    this.OnReportorderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractortype_Contractor", Storage="_Contractors", OtherKey="Contractortypeid", DeleteRule="CASCADE")]
        public EntitySet<Contractor> Contractors
        {
            get
            {
                return this._Contractors;
            }
            set
            {
                this._Contractors.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractors(Contractor entity)
        {
            this.SendPropertyChanging("Contractors");
            entity.Contractortype = this;
        }
    
        private void detach_Contractors(Contractor entity)
        {
            this.SendPropertyChanging("Contractors");
            entity.Contractortype = null;
        }
    }

    /// <summary>
    /// Сотрудник Промгаза
    /// </summary>
    [Table(Name = @"UD.EMPLOYEE")]
    public partial class Employee : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Familyname;

        private string _Firstname;

        private string _Middlename;

        private System.Nullable<bool> _Sex;

        private long _Postid = -1;

        private long _Departmentid = -1;

        private EntitySet<Department> _Departments_Managerid;

        private EntitySet<Department> _Departments_Directedbyid;

        private EntityRef<Department> _Department_Departmentid;

        private EntityRef<Post> _Post;

        private EntitySet<Responsiblefororder> _Responsiblefororders;

        private EntitySet<Enterpriseauthority> _Enterpriseauthorities;

        private EntitySet<Responsible> _Responsibles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFamilynameChanging(string value);
        partial void OnFamilynameChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnMiddlenameChanging(string value);
        partial void OnMiddlenameChanged();
        partial void OnSexChanging(System.Nullable<bool> value);
        partial void OnSexChanged();
        partial void OnPostidChanging(long value);
        partial void OnPostidChanged();
        partial void OnDepartmentidChanging(long value);
        partial void OnDepartmentidChanged();
        #endregion

        public Employee()
        {
            this._Departments_Managerid = new EntitySet<Department>(new Action<Department>(this.attach_Departments_Managerid), new Action<Department>(this.detach_Departments_Managerid));
            this._Departments_Directedbyid = new EntitySet<Department>(new Action<Department>(this.attach_Departments_Directedbyid), new Action<Department>(this.detach_Departments_Directedbyid));
            this._Department_Departmentid  = default(EntityRef<Department>);
            this._Post  = default(EntityRef<Post>);
            this._Responsiblefororders = new EntitySet<Responsiblefororder>(new Action<Responsiblefororder>(this.attach_Responsiblefororders), new Action<Responsiblefororder>(this.detach_Responsiblefororders));
            this._Enterpriseauthorities = new EntitySet<Enterpriseauthority>(new Action<Enterpriseauthority>(this.attach_Enterpriseauthorities), new Action<Enterpriseauthority>(this.detach_Enterpriseauthorities));
            this._Responsibles = new EntitySet<Responsible>(new Action<Responsible>(this.attach_Responsibles), new Action<Responsible>(this.detach_Responsibles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Employee")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Фамилия
        /// </summary>
        [Column(Name = @"FAMILYNAME", Storage = "_Familyname", DbType = "NVARCHAR2(40) NULL")]
        public string Familyname
        {
            get
            {
                return this._Familyname;
            }
            set
            {
                if (this._Familyname != value)
                {
                    this.OnFamilynameChanging(value);
                    this.SendPropertyChanging();
                    this._Familyname = value;
                    this.SendPropertyChanged("Familyname");
                    this.OnFamilynameChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя
        /// </summary>
        [Column(Name = @"FIRSTNAME", Storage = "_Firstname", DbType = "NVARCHAR2(40) NULL")]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Отчество
        /// </summary>
        [Column(Name = @"MIDDLENAME", Storage = "_Middlename", DbType = "NVARCHAR2(40) NULL")]
        public string Middlename
        {
            get
            {
                return this._Middlename;
            }
            set
            {
                if (this._Middlename != value)
                {
                    this.OnMiddlenameChanging(value);
                    this.SendPropertyChanging();
                    this._Middlename = value;
                    this.SendPropertyChanged("Middlename");
                    this.OnMiddlenameChanged();
                }
            }
        }

    
        /// <summary>
        /// Пол (1-муж, 0-жен.)
        /// </summary>
        [Column(Name = @"SEX", Storage = "_Sex", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging();
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postid in the schema.
        /// </summary>
        [Column(Name = @"POSTID", Storage = "_Postid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Postid
        {
            get
            {
                return this._Postid;
            }
            set
            {
                if (this._Postid != value)
                {
                    if (this._Post.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPostidChanging(value);
                    this.SendPropertyChanging();
                    this._Postid = value;
                    this.SendPropertyChanged("Postid");
                    this.OnPostidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departmentid in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENTID", Storage = "_Departmentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Departmentid
        {
            get
            {
                return this._Departmentid;
            }
            set
            {
                if (this._Departmentid != value)
                {
                    if (this._Department_Departmentid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDepartmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Departmentid = value;
                    this.SendPropertyChanged("Departmentid");
                    this.OnDepartmentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departments_Managerid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Id_Department_Managerid", Storage="_Departments_Managerid", OtherKey="Managerid")]
        public EntitySet<Department> Departments_Managerid
        {
            get
            {
                return this._Departments_Managerid;
            }
            set
            {
                this._Departments_Managerid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Departments_Directedbyid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Id_Department_Directedbyid", Storage="_Departments_Directedbyid", OtherKey="Directedbyid")]
        public EntitySet<Department> Departments_Directedbyid
        {
            get
            {
                return this._Departments_Directedbyid;
            }
            set
            {
                this._Departments_Directedbyid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Department_Departmentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Department_Employee", Storage="_Department_Departmentid", ThisKey="Departmentid", IsForeignKey=true)]
        public Department Department_Departmentid
        {
            get
            {
                return this._Department_Departmentid.Entity;
            }
            set
            {
                Department previousValue = this._Department_Departmentid.Entity;
                if ((previousValue != value) || (this._Department_Departmentid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Department_Departmentid.Entity = null;
                        previousValue.Employees_Departmentid.Remove(this);
                    }
                    this._Department_Departmentid.Entity = value;
                    if (value != null)
                    {
                        this._Departmentid = value.Id;
                        value.Employees_Departmentid.Add(this);
                    }
                    else
                    {
                        this._Departmentid = default(long);
                    }
                    this.SendPropertyChanged("Department_Departmentid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Post in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Post_Employee", Storage="_Post", ThisKey="Postid", IsForeignKey=true)]
        public Post Post
        {
            get
            {
                return this._Post.Entity;
            }
            set
            {
                Post previousValue = this._Post.Entity;
                if ((previousValue != value) || (this._Post.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Post.Entity = null;
                        previousValue.Employees.Remove(this);
                    }
                    this._Post.Entity = value;
                    if (value != null)
                    {
                        this._Postid = value.Id;
                        value.Employees.Add(this);
                    }
                    else
                    {
                        this._Postid = default(long);
                    }
                    this.SendPropertyChanged("Post");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsiblefororders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Responsiblefororder", Storage="_Responsiblefororders", OtherKey="Employeeid")]
        public EntitySet<Responsiblefororder> Responsiblefororders
        {
            get
            {
                return this._Responsiblefororders;
            }
            set
            {
                this._Responsiblefororders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Enterpriseauthorities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Enterpriseauthority", Storage="_Enterpriseauthorities", OtherKey="Employeeid")]
        public EntitySet<Enterpriseauthority> Enterpriseauthorities
        {
            get
            {
                return this._Enterpriseauthorities;
            }
            set
            {
                this._Enterpriseauthorities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Responsible", Storage="_Responsibles", OtherKey="Employeeid")]
        public EntitySet<Responsible> Responsibles
        {
            get
            {
                return this._Responsibles;
            }
            set
            {
                this._Responsibles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Departments_Managerid(Department entity)
        {
            this.SendPropertyChanging("Departments_Managerid");
            entity.Employee_Managerid = this;
        }
    
        private void detach_Departments_Managerid(Department entity)
        {
            this.SendPropertyChanging("Departments_Managerid");
            entity.Employee_Managerid = null;
        }

        private void attach_Departments_Directedbyid(Department entity)
        {
            this.SendPropertyChanging("Departments_Directedbyid");
            entity.Employee_Directedbyid = this;
        }
    
        private void detach_Departments_Directedbyid(Department entity)
        {
            this.SendPropertyChanging("Departments_Directedbyid");
            entity.Employee_Directedbyid = null;
        }

        private void attach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Employee = this;
        }
    
        private void detach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Employee = null;
        }

        private void attach_Enterpriseauthorities(Enterpriseauthority entity)
        {
            this.SendPropertyChanging("Enterpriseauthorities");
            entity.Employee = this;
        }
    
        private void detach_Enterpriseauthorities(Enterpriseauthority entity)
        {
            this.SendPropertyChanging("Enterpriseauthorities");
            entity.Employee = null;
        }

        private void attach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Employee = this;
        }
    
        private void detach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Employee = null;
        }
    }

    /// <summary>
    /// Основание для Промгаза
    /// </summary>
    [Table(Name = @"UD.ENTERPRISEAUTHORITY")]
    public partial class Enterpriseauthority : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Num;

        private System.Nullable<System.DateTime> _Validfrom;

        private System.Nullable<System.DateTime> _Validto;

        private System.Nullable<bool> _Isvalid;

        private long _Employeeid;

        private long _Authorityid;

        private EntityRef<Employee> _Employee;

        private EntityRef<Authority> _Authority;

        private EntitySet<Act> _Acts;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnValidfromChanging(System.Nullable<System.DateTime> value);
        partial void OnValidfromChanged();
        partial void OnValidtoChanging(System.Nullable<System.DateTime> value);
        partial void OnValidtoChanged();
        partial void OnIsvalidChanging(System.Nullable<bool> value);
        partial void OnIsvalidChanged();
        partial void OnEmployeeidChanging(long value);
        partial void OnEmployeeidChanged();
        partial void OnAuthorityidChanging(long value);
        partial void OnAuthorityidChanged();
        #endregion

        public Enterpriseauthority()
        {
            this._Employee  = default(EntityRef<Employee>);
            this._Authority  = default(EntityRef<Authority>);
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Enterpriseauthority")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер основания
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(255) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата начала действия
        /// </summary>
        [Column(Name = @"VALIDFROM", Storage = "_Validfrom", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validfrom
        {
            get
            {
                return this._Validfrom;
            }
            set
            {
                if (this._Validfrom != value)
                {
                    this.OnValidfromChanging(value);
                    this.SendPropertyChanging();
                    this._Validfrom = value;
                    this.SendPropertyChanged("Validfrom");
                    this.OnValidfromChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата окончания действия
        /// </summary>
        [Column(Name = @"VALIDTO", Storage = "_Validto", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Validto
        {
            get
            {
                return this._Validto;
            }
            set
            {
                if (this._Validto != value)
                {
                    this.OnValidtoChanging(value);
                    this.SendPropertyChanging();
                    this._Validto = value;
                    this.SendPropertyChanged("Validto");
                    this.OnValidtoChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак активности
        /// </summary>
        [Column(Name = @"ISVALID", Storage = "_Isvalid", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isvalid
        {
            get
            {
                return this._Isvalid;
            }
            set
            {
                if (this._Isvalid != value)
                {
                    this.OnIsvalidChanging(value);
                    this.SendPropertyChanging();
                    this._Isvalid = value;
                    this.SendPropertyChanged("Isvalid");
                    this.OnIsvalidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ответсвенное лицо (со стороны заказчика)
        /// </summary>
        [Column(Name = @"EMPLOYEEID", Storage = "_Employeeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Employeeid
        {
            get
            {
                return this._Employeeid;
            }
            set
            {
                if (this._Employeeid != value)
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeidChanging(value);
                    this.SendPropertyChanging();
                    this._Employeeid = value;
                    this.SendPropertyChanged("Employeeid");
                    this.OnEmployeeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на основание
        /// </summary>
        [Column(Name = @"AUTHORITYID", Storage = "_Authorityid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Authorityid
        {
            get
            {
                return this._Authorityid;
            }
            set
            {
                if (this._Authorityid != value)
                {
                    if (this._Authority.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAuthorityidChanging(value);
                    this.SendPropertyChanging();
                    this._Authorityid = value;
                    this.SendPropertyChanged("Authorityid");
                    this.OnAuthorityidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Enterpriseauthority", Storage="_Employee", ThisKey="Employeeid", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if ((previousValue != value) || (this._Employee.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Employee.Entity = null;
                        previousValue.Enterpriseauthorities.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if (value != null)
                    {
                        this._Employeeid = value.Id;
                        value.Enterpriseauthorities.Add(this);
                    }
                    else
                    {
                        this._Employeeid = default(long);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Authority in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Authority_Enterpriseauthority", Storage="_Authority", ThisKey="Authorityid", IsForeignKey=true, DeleteOnNull=true)]
        public Authority Authority
        {
            get
            {
                return this._Authority.Entity;
            }
            set
            {
                Authority previousValue = this._Authority.Entity;
                if ((previousValue != value) || (this._Authority.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Authority.Entity = null;
                        previousValue.Enterpriseauthorities.Remove(this);
                    }
                    this._Authority.Entity = value;
                    if (value != null)
                    {
                        this._Authorityid = value.Id;
                        value.Enterpriseauthorities.Add(this);
                    }
                    else
                    {
                        this._Authorityid = default(long);
                    }
                    this.SendPropertyChanged("Authority");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Enterpriseauthority_Act", Storage="_Acts", OtherKey="Enterpriceauthorityid", DeleteRule="CASCADE")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Enterpriseauthority_Contractdoc", Storage="_Contractdocs", OtherKey="Authorityid")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Enterpriseauthority = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Enterpriseauthority = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Enterpriseauthority = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Enterpriseauthority = null;
        }
    }

    /// <summary>
    /// Календарный план
    /// </summary>
    [Table(Name = @"UD.SCHEDULE")]
    public partial class Schedule : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Currencymeasureid;

        private long _Worktypeid;

        private EntityRef<Worktype> _Worktype;

        private EntityRef<Currencymeasure> _Currencymeasure;

        private EntitySet<Schedulecontract> _Schedulecontracts;

        private EntitySet<Stage> _Stages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCurrencymeasureidChanging(long value);
        partial void OnCurrencymeasureidChanged();
        partial void OnWorktypeidChanging(long value);
        partial void OnWorktypeidChanged();
        #endregion

        public Schedule()
        {
            this._Worktype  = default(EntityRef<Worktype>);
            this._Currencymeasure  = default(EntityRef<Currencymeasure>);
            this._Schedulecontracts = new EntitySet<Schedulecontract>(new Action<Schedulecontract>(this.attach_Schedulecontracts), new Action<Schedulecontract>(this.detach_Schedulecontracts));
            this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Schedule")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на единицу измерения денег (напр. тыс.)
        /// </summary>
        [Column(Name = @"CURRENCYMEASUREID", Storage = "_Currencymeasureid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    if (this._Currencymeasure.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип работ
        /// </summary>
        [Column(Name = @"WORKTYPEID", Storage = "_Worktypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Worktypeid
        {
            get
            {
                return this._Worktypeid;
            }
            set
            {
                if (this._Worktypeid != value)
                {
                    if (this._Worktype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWorktypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Worktypeid = value;
                    this.SendPropertyChanged("Worktypeid");
                    this.OnWorktypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Worktype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Worktype_Schedule", Storage="_Worktype", ThisKey="Worktypeid", IsForeignKey=true)]
        public Worktype Worktype
        {
            get
            {
                return this._Worktype.Entity;
            }
            set
            {
                Worktype previousValue = this._Worktype.Entity;
                if ((previousValue != value) || (this._Worktype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Worktype.Entity = null;
                        previousValue.Schedules.Remove(this);
                    }
                    this._Worktype.Entity = value;
                    if (value != null)
                    {
                        this._Worktypeid = value.Id;
                        value.Schedules.Add(this);
                    }
                    else
                    {
                        this._Worktypeid = default(long);
                    }
                    this.SendPropertyChanged("Worktype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Schedule", Storage="_Currencymeasure", ThisKey="Currencymeasureid", IsForeignKey=true)]
        public Currencymeasure Currencymeasure
        {
            get
            {
                return this._Currencymeasure.Entity;
            }
            set
            {
                Currencymeasure previousValue = this._Currencymeasure.Entity;
                if ((previousValue != value) || (this._Currencymeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currencymeasure.Entity = null;
                        previousValue.Schedules.Remove(this);
                    }
                    this._Currencymeasure.Entity = value;
                    if (value != null)
                    {
                        this._Currencymeasureid = value.Id;
                        value.Schedules.Add(this);
                    }
                    else
                    {
                        this._Currencymeasureid = default(long);
                    }
                    this.SendPropertyChanged("Currencymeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedulecontracts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Schedule_Schedulecontract", Storage="_Schedulecontracts", OtherKey="Scheduleid", DeleteRule="CASCADE")]
        public EntitySet<Schedulecontract> Schedulecontracts
        {
            get
            {
                return this._Schedulecontracts;
            }
            set
            {
                this._Schedulecontracts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Stages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Schedule_Stage", Storage="_Stages", OtherKey="Scheduleid", DeleteRule="CASCADE")]
        public EntitySet<Stage> Stages
        {
            get
            {
                return this._Stages;
            }
            set
            {
                this._Stages.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Schedulecontracts(Schedulecontract entity)
        {
            this.SendPropertyChanging("Schedulecontracts");
            entity.Schedule = this;
        }
    
        private void detach_Schedulecontracts(Schedulecontract entity)
        {
            this.SendPropertyChanging("Schedulecontracts");
            entity.Schedule = null;
        }

        private void attach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Schedule = this;
        }
    
        private void detach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Schedule = null;
        }
    }

    /// <summary>
    /// Календарный план договора (сс)
    /// </summary>
    [Table(Name = @"UD.SCHEDULECONTRACT")]
    public partial class Schedulecontract : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractdocid;

        private System.Nullable<int> _Appnum;

        private long _Scheduleid;

        private EntityRef<Schedule> _Schedule;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        partial void OnAppnumChanging(System.Nullable<int> value);
        partial void OnAppnumChanged();
        partial void OnScheduleidChanging(long value);
        partial void OnScheduleidChanged();
        #endregion

        public Schedulecontract()
        {
            this._Schedule  = default(EntityRef<Schedule>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Schedulecontract")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на договор
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// № приложения договора
        /// </summary>
        [Column(Name = @"APPNUM", Storage = "_Appnum", DbType = "NUMBER(3) NULL")]
        public System.Nullable<int> Appnum
        {
            get
            {
                return this._Appnum;
            }
            set
            {
                if (this._Appnum != value)
                {
                    this.OnAppnumChanging(value);
                    this.SendPropertyChanging();
                    this._Appnum = value;
                    this.SendPropertyChanged("Appnum");
                    this.OnAppnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Scheduleid in the schema.
        /// </summary>
        [Column(Name = @"SCHEDULEID", Storage = "_Scheduleid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Scheduleid
        {
            get
            {
                return this._Scheduleid;
            }
            set
            {
                if (this._Scheduleid != value)
                {
                    if (this._Schedule.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnScheduleidChanging(value);
                    this.SendPropertyChanging();
                    this._Scheduleid = value;
                    this.SendPropertyChanged("Scheduleid");
                    this.OnScheduleidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedule in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Schedule_Schedulecontract", Storage="_Schedule", ThisKey="Scheduleid", IsForeignKey=true)]
        public Schedule Schedule
        {
            get
            {
                return this._Schedule.Entity;
            }
            set
            {
                Schedule previousValue = this._Schedule.Entity;
                if ((previousValue != value) || (this._Schedule.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Schedule.Entity = null;
                        previousValue.Schedulecontracts.Remove(this);
                    }
                    this._Schedule.Entity = value;
                    if (value != null)
                    {
                        this._Scheduleid = value.Id;
                        value.Schedulecontracts.Add(this);
                    }
                    else
                    {
                        this._Scheduleid = default(long);
                    }
                    this.SendPropertyChanged("Schedule");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Schedulecontract", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Schedulecontracts.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Schedulecontracts.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Этап
    /// </summary>
    [Table(Name = @"UD.STAGE")]
    public partial class Stage : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Ndsalgorithmid;

        private System.Nullable<long> _Parentid;

        private System.Nullable<long> _Actid;

        private long _Scheduleid;

        private long _Ndsid;

        private string _Num;

        private string _Subject;

        private System.Nullable<System.DateTime> _Startsat;

        private System.Nullable<System.DateTime> _Endsat;

        private System.Nullable<decimal> _Price;

        private string _Code;

        private System.Nullable<int> _Delta;

        private System.Nullable<long> _Approvalstateid;

        private System.Nullable<System.DateTime> _Statedate;

        private string _Statedescription;

        private string _Deltacomment;

        private EntitySet<Stageresult> _Stageresults;

        private EntitySet<Subgeneralhierarchi> _Subgeneralhierarchis_Generalcontractdocstageid;

        private EntitySet<Subgeneralhierarchi> _Subgeneralhierarchis_Subcontractdocstageid;

        private EntityRef<Approvalstate> _Approvalstate;

        private EntityRef<Schedule> _Schedule;

        private EntityRef<Ndsalgorithm> _Ndsalgorithm;

        private EntitySet<Stage> _Stages_Parentid;

        private EntityRef<Stage> _Stage_Parentid;

        private EntityRef<Act> _Act;

        private EntityRef<Nds> _Nds;

        private EntitySet<Closedstagerelation> _Closedstagerelations_Stageid;

        private EntitySet<Closedstagerelation> _Closedstagerelations_Closedstageid;

        private EntitySet<Responsible> _Responsibles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNdsalgorithmidChanging(long value);
        partial void OnNdsalgorithmidChanged();
        partial void OnParentidChanging(System.Nullable<long> value);
        partial void OnParentidChanged();
        partial void OnActidChanging(System.Nullable<long> value);
        partial void OnActidChanged();
        partial void OnScheduleidChanging(long value);
        partial void OnScheduleidChanged();
        partial void OnNdsidChanging(long value);
        partial void OnNdsidChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnStartsatChanging(System.Nullable<System.DateTime> value);
        partial void OnStartsatChanged();
        partial void OnEndsatChanging(System.Nullable<System.DateTime> value);
        partial void OnEndsatChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDeltaChanging(System.Nullable<int> value);
        partial void OnDeltaChanged();
        partial void OnApprovalstateidChanging(System.Nullable<long> value);
        partial void OnApprovalstateidChanged();
        partial void OnStatedateChanging(System.Nullable<System.DateTime> value);
        partial void OnStatedateChanged();
        partial void OnStatedescriptionChanging(string value);
        partial void OnStatedescriptionChanged();
        partial void OnDeltacommentChanging(string value);
        partial void OnDeltacommentChanged();
        #endregion

        public Stage()
        {
            this._Stageresults = new EntitySet<Stageresult>(new Action<Stageresult>(this.attach_Stageresults), new Action<Stageresult>(this.detach_Stageresults));
            this._Subgeneralhierarchis_Generalcontractdocstageid = new EntitySet<Subgeneralhierarchi>(new Action<Subgeneralhierarchi>(this.attach_Subgeneralhierarchis_Generalcontractdocstageid), new Action<Subgeneralhierarchi>(this.detach_Subgeneralhierarchis_Generalcontractdocstageid));
            this._Subgeneralhierarchis_Subcontractdocstageid = new EntitySet<Subgeneralhierarchi>(new Action<Subgeneralhierarchi>(this.attach_Subgeneralhierarchis_Subcontractdocstageid), new Action<Subgeneralhierarchi>(this.detach_Subgeneralhierarchis_Subcontractdocstageid));
            this._Approvalstate  = default(EntityRef<Approvalstate>);
            this._Schedule  = default(EntityRef<Schedule>);
            this._Ndsalgorithm  = default(EntityRef<Ndsalgorithm>);
            this._Stages_Parentid = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages_Parentid), new Action<Stage>(this.detach_Stages_Parentid));
            this._Stage_Parentid  = default(EntityRef<Stage>);
            this._Act  = default(EntityRef<Act>);
            this._Nds  = default(EntityRef<Nds>);
            this._Closedstagerelations_Stageid = new EntitySet<Closedstagerelation>(new Action<Closedstagerelation>(this.attach_Closedstagerelations_Stageid), new Action<Closedstagerelation>(this.detach_Closedstagerelations_Stageid));
            this._Closedstagerelations_Closedstageid = new EntitySet<Closedstagerelation>(new Action<Closedstagerelation>(this.attach_Closedstagerelations_Closedstageid), new Action<Closedstagerelation>(this.detach_Closedstagerelations_Closedstageid));
            this._Responsibles = new EntitySet<Responsible>(new Action<Responsible>(this.attach_Responsibles), new Action<Responsible>(this.detach_Responsibles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Stage")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на алгоритм расчета НДС
        /// </summary>
        [Column(Name = @"NDSALGORITHMID", Storage = "_Ndsalgorithmid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithmid;
            }
            set
            {
                if (this._Ndsalgorithmid != value)
                {
                    if (this._Ndsalgorithm.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmid = value;
                    this.SendPropertyChanged("Ndsalgorithmid");
                    this.OnNdsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на родительский этап (организует иерархию этапов: этап-подэтап)
        /// </summary>
        [Column(Name = @"PARENTID", Storage = "_Parentid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Parentid
        {
            get
            {
                return this._Parentid;
            }
            set
            {
                if (this._Parentid != value)
                {
                    if (this._Stage_Parentid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentidChanging(value);
                    this.SendPropertyChanging();
                    this._Parentid = value;
                    this.SendPropertyChanged("Parentid");
                    this.OnParentidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на акт сдачи-приемки (если этап закрыт - он не Null)
        /// </summary>
        [Column(Name = @"ACTID", Storage = "_Actid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Actid
        {
            get
            {
                return this._Actid;
            }
            set
            {
                if (this._Actid != value)
                {
                    if (this._Act.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActidChanging(value);
                    this.SendPropertyChanging();
                    this._Actid = value;
                    this.SendPropertyChanged("Actid");
                    this.OnActidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Scheduleid in the schema.
        /// </summary>
        [Column(Name = @"SCHEDULEID", Storage = "_Scheduleid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Scheduleid
        {
            get
            {
                return this._Scheduleid;
            }
            set
            {
                if (this._Scheduleid != value)
                {
                    if (this._Schedule.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnScheduleidChanging(value);
                    this.SendPropertyChanging();
                    this._Scheduleid = value;
                    this.SendPropertyChanged("Scheduleid");
                    this.OnScheduleidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ставку НДС
        /// </summary>
        [Column(Name = @"NDSID", Storage = "_Ndsid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsid
        {
            get
            {
                return this._Ndsid;
            }
            set
            {
                if (this._Ndsid != value)
                {
                    if (this._Nds.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsid = value;
                    this.SendPropertyChanged("Ndsid");
                    this.OnNdsidChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер этапа
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(25) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Название
        /// </summary>
        [Column(Name = @"SUBJECT", Storage = "_Subject", DbType = "NVARCHAR2(2000) NULL")]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата начала
        /// </summary>
        [Column(Name = @"STARTSAT", Storage = "_Startsat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Startsat
        {
            get
            {
                return this._Startsat;
            }
            set
            {
                if (this._Startsat != value)
                {
                    this.OnStartsatChanging(value);
                    this.SendPropertyChanging();
                    this._Startsat = value;
                    this.SendPropertyChanged("Startsat");
                    this.OnStartsatChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата окончания
        /// </summary>
        [Column(Name = @"ENDSAT", Storage = "_Endsat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Endsat
        {
            get
            {
                return this._Endsat;
            }
            set
            {
                if (this._Endsat != value)
                {
                    this.OnEndsatChanging(value);
                    this.SendPropertyChanging();
                    this._Endsat = value;
                    this.SendPropertyChanged("Endsat");
                    this.OnEndsatChanged();
                }
            }
        }

    
        /// <summary>
        /// Цена этапа
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// Код стройки
        /// </summary>
        [Column(Name = @"CODE", Storage = "_Code", DbType = "NVARCHAR2(100) NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// Если дата окончания этапа задана открытой, то Delta хранит смещение относительно StartAt
        /// </summary>
        [Column(Name = @"DELTA", Storage = "_Delta", DbType = "NUMBER(8) NULL")]
        public System.Nullable<int> Delta
        {
            get
            {
                return this._Delta;
            }
            set
            {
                if (this._Delta != value)
                {
                    this.OnDeltaChanging(value);
                    this.SendPropertyChanging();
                    this._Delta = value;
                    this.SendPropertyChanged("Delta");
                    this.OnDeltaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstateid in the schema.
        /// </summary>
        [Column(Name = @"APPROVALSTATEID", Storage = "_Approvalstateid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Approvalstateid
        {
            get
            {
                return this._Approvalstateid;
            }
            set
            {
                if (this._Approvalstateid != value)
                {
                    if (this._Approvalstate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnApprovalstateidChanging(value);
                    this.SendPropertyChanging();
                    this._Approvalstateid = value;
                    this.SendPropertyChanged("Approvalstateid");
                    this.OnApprovalstateidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Statedate in the schema.
        /// </summary>
        [Column(Name = @"STATEDATE", Storage = "_Statedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Statedate
        {
            get
            {
                return this._Statedate;
            }
            set
            {
                if (this._Statedate != value)
                {
                    this.OnStatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Statedate = value;
                    this.SendPropertyChanged("Statedate");
                    this.OnStatedateChanged();
                }
            }
        }

    
        /// <summary>
        /// Описание состояния
        /// </summary>
        [Column(Name = @"STATEDESCRIPTION", Storage = "_Statedescription", DbType = "NVARCHAR2(2000) NULL")]
        public string Statedescription
        {
            get
            {
                return this._Statedescription;
            }
            set
            {
                if (this._Statedescription != value)
                {
                    this.OnStatedescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Statedescription = value;
                    this.SendPropertyChanged("Statedescription");
                    this.OnStatedescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Примечание к этапу с открытой датой
        /// </summary>
        [Column(Name = @"DELTACOMMENT", Storage = "_Deltacomment", DbType = "NVARCHAR2(2000) NULL")]
        public string Deltacomment
        {
            get
            {
                return this._Deltacomment;
            }
            set
            {
                if (this._Deltacomment != value)
                {
                    this.OnDeltacommentChanging(value);
                    this.SendPropertyChanging();
                    this._Deltacomment = value;
                    this.SendPropertyChanged("Deltacomment");
                    this.OnDeltacommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageresults in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Stageresult", Storage="_Stageresults", OtherKey="Stageid", DeleteRule="CASCADE")]
        public EntitySet<Stageresult> Stageresults
        {
            get
            {
                return this._Stageresults;
            }
            set
            {
                this._Stageresults.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Subgeneralhierarchis_Generalcontractdocstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Subgeneralhierarchi_Generalcontractdocstageid", Storage="_Subgeneralhierarchis_Generalcontractdocstageid", OtherKey="Generalcontractdocstageid", DeleteRule="CASCADE")]
        public EntitySet<Subgeneralhierarchi> Subgeneralhierarchis_Generalcontractdocstageid
        {
            get
            {
                return this._Subgeneralhierarchis_Generalcontractdocstageid;
            }
            set
            {
                this._Subgeneralhierarchis_Generalcontractdocstageid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Subgeneralhierarchis_Subcontractdocstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Subgeneralhierarchi_Subcontractdocstageid", Storage="_Subgeneralhierarchis_Subcontractdocstageid", OtherKey="Subcontractdocstageid", DeleteRule="CASCADE")]
        public EntitySet<Subgeneralhierarchi> Subgeneralhierarchis_Subcontractdocstageid
        {
            get
            {
                return this._Subgeneralhierarchis_Subcontractdocstageid;
            }
            set
            {
                this._Subgeneralhierarchis_Subcontractdocstageid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalstate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Approvalstate_Stage", Storage="_Approvalstate", ThisKey="Approvalstateid", IsForeignKey=true)]
        public Approvalstate Approvalstate
        {
            get
            {
                return this._Approvalstate.Entity;
            }
            set
            {
                Approvalstate previousValue = this._Approvalstate.Entity;
                if ((previousValue != value) || (this._Approvalstate.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Approvalstate.Entity = null;
                        previousValue.Stages.Remove(this);
                    }
                    this._Approvalstate.Entity = value;
                    if (value != null)
                    {
                        this._Approvalstateid = value.Id;
                        value.Stages.Add(this);
                    }
                    else
                    {
                        this._Approvalstateid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Approvalstate");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedule in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Schedule_Stage", Storage="_Schedule", ThisKey="Scheduleid", IsForeignKey=true, DeleteOnNull=true)]
        public Schedule Schedule
        {
            get
            {
                return this._Schedule.Entity;
            }
            set
            {
                Schedule previousValue = this._Schedule.Entity;
                if ((previousValue != value) || (this._Schedule.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Schedule.Entity = null;
                        previousValue.Stages.Remove(this);
                    }
                    this._Schedule.Entity = value;
                    if (value != null)
                    {
                        this._Scheduleid = value.Id;
                        value.Stages.Add(this);
                    }
                    else
                    {
                        this._Scheduleid = default(long);
                    }
                    this.SendPropertyChanged("Schedule");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithm in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Stage", Storage="_Ndsalgorithm", ThisKey="Ndsalgorithmid", IsForeignKey=true)]
        public Ndsalgorithm Ndsalgorithm
        {
            get
            {
                return this._Ndsalgorithm.Entity;
            }
            set
            {
                Ndsalgorithm previousValue = this._Ndsalgorithm.Entity;
                if ((previousValue != value) || (this._Ndsalgorithm.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ndsalgorithm.Entity = null;
                        previousValue.Stages.Remove(this);
                    }
                    this._Ndsalgorithm.Entity = value;
                    if (value != null)
                    {
                        this._Ndsalgorithmid = value.Id;
                        value.Stages.Add(this);
                    }
                    else
                    {
                        this._Ndsalgorithmid = default(long);
                    }
                    this.SendPropertyChanged("Ndsalgorithm");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stages_Parentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Stage", Storage="_Stages_Parentid", OtherKey="Parentid", DeleteRule="CASCADE")]
        public EntitySet<Stage> Stages_Parentid
        {
            get
            {
                return this._Stages_Parentid;
            }
            set
            {
                this._Stages_Parentid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Stage_Parentid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Stage", Storage="_Stage_Parentid", ThisKey="Parentid", IsForeignKey=true)]
        public Stage Stage_Parentid
        {
            get
            {
                return this._Stage_Parentid.Entity;
            }
            set
            {
                Stage previousValue = this._Stage_Parentid.Entity;
                if ((previousValue != value) || (this._Stage_Parentid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage_Parentid.Entity = null;
                        previousValue.Stages_Parentid.Remove(this);
                    }
                    this._Stage_Parentid.Entity = value;
                    if (value != null)
                    {
                        this._Parentid = value.Id;
                        value.Stages_Parentid.Add(this);
                    }
                    else
                    {
                        this._Parentid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Stage_Parentid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Act in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Stage", Storage="_Act", ThisKey="Actid", IsForeignKey=true)]
        public Act Act
        {
            get
            {
                return this._Act.Entity;
            }
            set
            {
                Act previousValue = this._Act.Entity;
                if ((previousValue != value) || (this._Act.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Act.Entity = null;
                        previousValue.Stages.Remove(this);
                    }
                    this._Act.Entity = value;
                    if (value != null)
                    {
                        this._Actid = value.Id;
                        value.Stages.Add(this);
                    }
                    else
                    {
                        this._Actid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Act");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Stage", Storage="_Nds", ThisKey="Ndsid", IsForeignKey=true)]
        public Nds Nds
        {
            get
            {
                return this._Nds.Entity;
            }
            set
            {
                Nds previousValue = this._Nds.Entity;
                if ((previousValue != value) || (this._Nds.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Nds.Entity = null;
                        previousValue.Stages.Remove(this);
                    }
                    this._Nds.Entity = value;
                    if (value != null)
                    {
                        this._Ndsid = value.Id;
                        value.Stages.Add(this);
                    }
                    else
                    {
                        this._Ndsid = default(long);
                    }
                    this.SendPropertyChanged("Nds");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Closedstagerelations_Stageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Closedstagerelation_Stageid", Storage="_Closedstagerelations_Stageid", OtherKey="Stageid", DeleteRule="CASCADE")]
        public EntitySet<Closedstagerelation> Closedstagerelations_Stageid
        {
            get
            {
                return this._Closedstagerelations_Stageid;
            }
            set
            {
                this._Closedstagerelations_Stageid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Closedstagerelations_Closedstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Closedstagerelation_Closedstageid", Storage="_Closedstagerelations_Closedstageid", OtherKey="Closedstageid", DeleteRule="CASCADE")]
        public EntitySet<Closedstagerelation> Closedstagerelations_Closedstageid
        {
            get
            {
                return this._Closedstagerelations_Closedstageid;
            }
            set
            {
                this._Closedstagerelations_Closedstageid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Responsible", Storage="_Responsibles", OtherKey="Stageid")]
        public EntitySet<Responsible> Responsibles
        {
            get
            {
                return this._Responsibles;
            }
            set
            {
                this._Responsibles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Stage = this;
        }
    
        private void detach_Stageresults(Stageresult entity)
        {
            this.SendPropertyChanging("Stageresults");
            entity.Stage = null;
        }

        private void attach_Subgeneralhierarchis_Generalcontractdocstageid(Subgeneralhierarchi entity)
        {
            this.SendPropertyChanging("Subgeneralhierarchis_Generalcontractdocstageid");
            entity.Stage_Generalcontractdocstageid = this;
        }
    
        private void detach_Subgeneralhierarchis_Generalcontractdocstageid(Subgeneralhierarchi entity)
        {
            this.SendPropertyChanging("Subgeneralhierarchis_Generalcontractdocstageid");
            entity.Stage_Generalcontractdocstageid = null;
        }

        private void attach_Subgeneralhierarchis_Subcontractdocstageid(Subgeneralhierarchi entity)
        {
            this.SendPropertyChanging("Subgeneralhierarchis_Subcontractdocstageid");
            entity.Stage_Subcontractdocstageid = this;
        }
    
        private void detach_Subgeneralhierarchis_Subcontractdocstageid(Subgeneralhierarchi entity)
        {
            this.SendPropertyChanging("Subgeneralhierarchis_Subcontractdocstageid");
            entity.Stage_Subcontractdocstageid = null;
        }

        private void attach_Stages_Parentid(Stage entity)
        {
            this.SendPropertyChanging("Stages_Parentid");
            entity.Stage_Parentid = this;
        }
    
        private void detach_Stages_Parentid(Stage entity)
        {
            this.SendPropertyChanging("Stages_Parentid");
            entity.Stage_Parentid = null;
        }

        private void attach_Closedstagerelations_Stageid(Closedstagerelation entity)
        {
            this.SendPropertyChanging("Closedstagerelations_Stageid");
            entity.Stage_Stageid = this;
        }
    
        private void detach_Closedstagerelations_Stageid(Closedstagerelation entity)
        {
            this.SendPropertyChanging("Closedstagerelations_Stageid");
            entity.Stage_Stageid = null;
        }

        private void attach_Closedstagerelations_Closedstageid(Closedstagerelation entity)
        {
            this.SendPropertyChanging("Closedstagerelations_Closedstageid");
            entity.Stage_Closedstageid = this;
        }
    
        private void detach_Closedstagerelations_Closedstageid(Closedstagerelation entity)
        {
            this.SendPropertyChanging("Closedstagerelations_Closedstageid");
            entity.Stage_Closedstageid = null;
        }

        private void attach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Stage = this;
        }
    
        private void detach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Stage = null;
        }
    }

    /// <summary>
    /// Акт сдачи-приёмки
    /// </summary>
    [Table(Name = @"UD.ACT")]
    public partial class Act : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Acttypeid;

        private long _Enterpriceauthorityid;

        private long _Ndsalgorithmid;

        private long _Currencyid;

        private long _Currencymeasureid;

        private string _Num;

        private System.Nullable<System.DateTime> _Signdate;

        private long _Ndsid;

        private long _Regionid;

        private System.Nullable<decimal> _Totalsum;

        private System.Nullable<decimal> _Sumfortransfer;

        private System.Nullable<long> _Status;

        private System.Nullable<decimal> _Currencyrate;

        private System.Nullable<System.DateTime> _Ratedate;

        private System.Nullable<bool> _Issigned;

        private EntityRef<Enterpriseauthority> _Enterpriseauthority;

        private EntitySet<Stage> _Stages;

        private EntityRef<Region> _Region;

        private EntityRef<Nds> _Nds;

        private EntityRef<Acttype> _Acttype;

        private EntityRef<Ndsalgorithm> _Ndsalgorithm;

        private EntityRef<Currency> _Currency;

        private EntityRef<Currencymeasure> _Currencymeasure;

        private EntitySet<Sightfuncperson> _Sightfuncpersons;

        private EntitySet<Actpaymentdocument> _Actpaymentdocuments;

        private EntitySet<Contracttranactdoc> _Contracttranactdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnActtypeidChanging(long value);
        partial void OnActtypeidChanged();
        partial void OnEnterpriceauthorityidChanging(long value);
        partial void OnEnterpriceauthorityidChanged();
        partial void OnNdsalgorithmidChanging(long value);
        partial void OnNdsalgorithmidChanged();
        partial void OnCurrencyidChanging(long value);
        partial void OnCurrencyidChanged();
        partial void OnCurrencymeasureidChanging(long value);
        partial void OnCurrencymeasureidChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnSigndateChanging(System.Nullable<System.DateTime> value);
        partial void OnSigndateChanged();
        partial void OnNdsidChanging(long value);
        partial void OnNdsidChanged();
        partial void OnRegionidChanging(long value);
        partial void OnRegionidChanged();
        partial void OnTotalsumChanging(System.Nullable<decimal> value);
        partial void OnTotalsumChanged();
        partial void OnSumfortransferChanging(System.Nullable<decimal> value);
        partial void OnSumfortransferChanged();
        partial void OnStatusChanging(System.Nullable<long> value);
        partial void OnStatusChanged();
        partial void OnCurrencyrateChanging(System.Nullable<decimal> value);
        partial void OnCurrencyrateChanged();
        partial void OnRatedateChanging(System.Nullable<System.DateTime> value);
        partial void OnRatedateChanged();
        partial void OnIssignedChanging(System.Nullable<bool> value);
        partial void OnIssignedChanged();
        #endregion

        public Act()
        {
            this._Enterpriseauthority  = default(EntityRef<Enterpriseauthority>);
            this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
            this._Region  = default(EntityRef<Region>);
            this._Nds  = default(EntityRef<Nds>);
            this._Acttype  = default(EntityRef<Acttype>);
            this._Ndsalgorithm  = default(EntityRef<Ndsalgorithm>);
            this._Currency  = default(EntityRef<Currency>);
            this._Currencymeasure  = default(EntityRef<Currencymeasure>);
            this._Sightfuncpersons = new EntitySet<Sightfuncperson>(new Action<Sightfuncperson>(this.attach_Sightfuncpersons), new Action<Sightfuncperson>(this.detach_Sightfuncpersons));
            this._Actpaymentdocuments = new EntitySet<Actpaymentdocument>(new Action<Actpaymentdocument>(this.attach_Actpaymentdocuments), new Action<Actpaymentdocument>(this.detach_Actpaymentdocuments));
            this._Contracttranactdocs = new EntitySet<Contracttranactdoc>(new Action<Contracttranactdoc>(this.attach_Contracttranactdocs), new Action<Contracttranactdoc>(this.detach_Contracttranactdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Act")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип акта сдачи-приёмки
        /// </summary>
        [Column(Name = @"ACTTYPEID", Storage = "_Acttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Acttypeid
        {
            get
            {
                return this._Acttypeid;
            }
            set
            {
                if (this._Acttypeid != value)
                {
                    if (this._Acttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActtypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Acttypeid = value;
                    this.SendPropertyChanged("Acttypeid");
                    this.OnActtypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на основание для Промгаза
        /// </summary>
        [Column(Name = @"ENTERPRICEAUTHORITYID", Storage = "_Enterpriceauthorityid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Enterpriceauthorityid
        {
            get
            {
                return this._Enterpriceauthorityid;
            }
            set
            {
                if (this._Enterpriceauthorityid != value)
                {
                    if (this._Enterpriseauthority.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEnterpriceauthorityidChanging(value);
                    this.SendPropertyChanging();
                    this._Enterpriceauthorityid = value;
                    this.SendPropertyChanged("Enterpriceauthorityid");
                    this.OnEnterpriceauthorityidChanged();
                }
            }
        }

    
        /// <summary>
        /// Алгоритм расчёта НДС
        /// </summary>
        [Column(Name = @"NDSALGORITHMID", Storage = "_Ndsalgorithmid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithmid;
            }
            set
            {
                if (this._Ndsalgorithmid != value)
                {
                    if (this._Ndsalgorithm.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmid = value;
                    this.SendPropertyChanged("Ndsalgorithmid");
                    this.OnNdsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// Валюта акта
        /// </summary>
        [Column(Name = @"CURRENCYID", Storage = "_Currencyid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencyid
        {
            get
            {
                return this._Currencyid;
            }
            set
            {
                if (this._Currencyid != value)
                {
                    if (this._Currency.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencyidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyid = value;
                    this.SendPropertyChanged("Currencyid");
                    this.OnCurrencyidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на единицу измерения денег
        /// </summary>
        [Column(Name = @"CURRENCYMEASUREID", Storage = "_Currencymeasureid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    if (this._Currencymeasure.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер акта сдачи-приёмки
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(255) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата подписания акта сдачи-приёмки
        /// </summary>
        [Column(Name = @"SIGNDATE", Storage = "_Signdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Signdate
        {
            get
            {
                return this._Signdate;
            }
            set
            {
                if (this._Signdate != value)
                {
                    this.OnSigndateChanging(value);
                    this.SendPropertyChanging();
                    this._Signdate = value;
                    this.SendPropertyChanged("Signdate");
                    this.OnSigndateChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ставку НДС
        /// </summary>
        [Column(Name = @"NDSID", Storage = "_Ndsid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsid
        {
            get
            {
                return this._Ndsid;
            }
            set
            {
                if (this._Ndsid != value)
                {
                    if (this._Nds.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsid = value;
                    this.SendPropertyChanged("Ndsid");
                    this.OnNdsidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на регион
        /// </summary>
        [Column(Name = @"REGIONID", Storage = "_Regionid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Regionid
        {
            get
            {
                return this._Regionid;
            }
            set
            {
                if (this._Regionid != value)
                {
                    if (this._Region.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRegionidChanging(value);
                    this.SendPropertyChanging();
                    this._Regionid = value;
                    this.SendPropertyChanged("Regionid");
                    this.OnRegionidChanged();
                }
            }
        }

    
        /// <summary>
        /// Общая сумма по акту сдачи-приёмки
        /// </summary>
        [Column(Name = @"TOTALSUM", Storage = "_Totalsum", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Totalsum
        {
            get
            {
                return this._Totalsum;
            }
            set
            {
                if (this._Totalsum != value)
                {
                    this.OnTotalsumChanging(value);
                    this.SendPropertyChanging();
                    this._Totalsum = value;
                    this.SendPropertyChanged("Totalsum");
                    this.OnTotalsumChanged();
                }
            }
        }

    
        /// <summary>
        /// Сумма к перечислению
        /// </summary>
        [Column(Name = @"SUMFORTRANSFER", Storage = "_Sumfortransfer", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Sumfortransfer
        {
            get
            {
                return this._Sumfortransfer;
            }
            set
            {
                if (this._Sumfortransfer != value)
                {
                    this.OnSumfortransferChanging(value);
                    this.SendPropertyChanging();
                    this._Sumfortransfer = value;
                    this.SendPropertyChanged("Sumfortransfer");
                    this.OnSumfortransferChanged();
                }
            }
        }

    
        /// <summary>
        /// Состояние акта сдачи-приёмки
        /// </summary>
        [Column(Name = @"STATUS", Storage = "_Status", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// Курс валюты на дату RateDate
        /// </summary>
        [Column(Name = @"CURRENCYRATE", Storage = "_Currencyrate", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Currencyrate
        {
            get
            {
                return this._Currencyrate;
            }
            set
            {
                if (this._Currencyrate != value)
                {
                    this.OnCurrencyrateChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyrate = value;
                    this.SendPropertyChanged("Currencyrate");
                    this.OnCurrencyrateChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата для курса валюты
        /// </summary>
        [Column(Name = @"RATEDATE", Storage = "_Ratedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Ratedate
        {
            get
            {
                return this._Ratedate;
            }
            set
            {
                if (this._Ratedate != value)
                {
                    this.OnRatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Ratedate = value;
                    this.SendPropertyChanged("Ratedate");
                    this.OnRatedateChanged();
                }
            }
        }

    
        /// <summary>
        /// подписан или нет
        /// </summary>
        [Column(Name = @"ISSIGNED", Storage = "_Issigned", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Issigned
        {
            get
            {
                return this._Issigned;
            }
            set
            {
                if (this._Issigned != value)
                {
                    this.OnIssignedChanging(value);
                    this.SendPropertyChanging();
                    this._Issigned = value;
                    this.SendPropertyChanged("Issigned");
                    this.OnIssignedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Enterpriseauthority in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Enterpriseauthority_Act", Storage="_Enterpriseauthority", ThisKey="Enterpriceauthorityid", IsForeignKey=true)]
        public Enterpriseauthority Enterpriseauthority
        {
            get
            {
                return this._Enterpriseauthority.Entity;
            }
            set
            {
                Enterpriseauthority previousValue = this._Enterpriseauthority.Entity;
                if ((previousValue != value) || (this._Enterpriseauthority.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Enterpriseauthority.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Enterpriseauthority.Entity = value;
                    if (value != null)
                    {
                        this._Enterpriceauthorityid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Enterpriceauthorityid = default(long);
                    }
                    this.SendPropertyChanged("Enterpriseauthority");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Stage", Storage="_Stages", OtherKey="Actid")]
        public EntitySet<Stage> Stages
        {
            get
            {
                return this._Stages;
            }
            set
            {
                this._Stages.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Region_Act", Storage="_Region", ThisKey="Regionid", IsForeignKey=true)]
        public Region Region
        {
            get
            {
                return this._Region.Entity;
            }
            set
            {
                Region previousValue = this._Region.Entity;
                if ((previousValue != value) || (this._Region.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Region.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Region.Entity = value;
                    if (value != null)
                    {
                        this._Regionid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Regionid = default(long);
                    }
                    this.SendPropertyChanged("Region");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Act", Storage="_Nds", ThisKey="Ndsid", IsForeignKey=true)]
        public Nds Nds
        {
            get
            {
                return this._Nds.Entity;
            }
            set
            {
                Nds previousValue = this._Nds.Entity;
                if ((previousValue != value) || (this._Nds.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Nds.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Nds.Entity = value;
                    if (value != null)
                    {
                        this._Ndsid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Ndsid = default(long);
                    }
                    this.SendPropertyChanged("Nds");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Acttype_Act", Storage="_Acttype", ThisKey="Acttypeid", IsForeignKey=true)]
        public Acttype Acttype
        {
            get
            {
                return this._Acttype.Entity;
            }
            set
            {
                Acttype previousValue = this._Acttype.Entity;
                if ((previousValue != value) || (this._Acttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Acttype.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Acttype.Entity = value;
                    if (value != null)
                    {
                        this._Acttypeid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Acttypeid = default(long);
                    }
                    this.SendPropertyChanged("Acttype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithm in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Act", Storage="_Ndsalgorithm", ThisKey="Ndsalgorithmid", IsForeignKey=true)]
        public Ndsalgorithm Ndsalgorithm
        {
            get
            {
                return this._Ndsalgorithm.Entity;
            }
            set
            {
                Ndsalgorithm previousValue = this._Ndsalgorithm.Entity;
                if ((previousValue != value) || (this._Ndsalgorithm.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ndsalgorithm.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Ndsalgorithm.Entity = value;
                    if (value != null)
                    {
                        this._Ndsalgorithmid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Ndsalgorithmid = default(long);
                    }
                    this.SendPropertyChanged("Ndsalgorithm");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currency_Act", Storage="_Currency", ThisKey="Currencyid", IsForeignKey=true)]
        public Currency Currency
        {
            get
            {
                return this._Currency.Entity;
            }
            set
            {
                Currency previousValue = this._Currency.Entity;
                if ((previousValue != value) || (this._Currency.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currency.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Currency.Entity = value;
                    if (value != null)
                    {
                        this._Currencyid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Currencyid = default(long);
                    }
                    this.SendPropertyChanged("Currency");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Act", Storage="_Currencymeasure", ThisKey="Currencymeasureid", IsForeignKey=true)]
        public Currencymeasure Currencymeasure
        {
            get
            {
                return this._Currencymeasure.Entity;
            }
            set
            {
                Currencymeasure previousValue = this._Currencymeasure.Entity;
                if ((previousValue != value) || (this._Currencymeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currencymeasure.Entity = null;
                        previousValue.Acts.Remove(this);
                    }
                    this._Currencymeasure.Entity = value;
                    if (value != null)
                    {
                        this._Currencymeasureid = value.Id;
                        value.Acts.Add(this);
                    }
                    else
                    {
                        this._Currencymeasureid = default(long);
                    }
                    this.SendPropertyChanged("Currencymeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sightfuncpersons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Sightfuncperson", Storage="_Sightfuncpersons", OtherKey="Actid", DeleteRule="CASCADE")]
        public EntitySet<Sightfuncperson> Sightfuncpersons
        {
            get
            {
                return this._Sightfuncpersons;
            }
            set
            {
                this._Sightfuncpersons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Actpaymentdocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Actpaymentdocument", Storage="_Actpaymentdocuments", OtherKey="Actid", DeleteRule="CASCADE")]
        public EntitySet<Actpaymentdocument> Actpaymentdocuments
        {
            get
            {
                return this._Actpaymentdocuments;
            }
            set
            {
                this._Actpaymentdocuments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttranactdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Contracttranactdoc", Storage="_Contracttranactdocs", OtherKey="Actid", DeleteRule="CASCADE")]
        public EntitySet<Contracttranactdoc> Contracttranactdocs
        {
            get
            {
                return this._Contracttranactdocs;
            }
            set
            {
                this._Contracttranactdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Act = this;
        }
    
        private void detach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Act = null;
        }

        private void attach_Sightfuncpersons(Sightfuncperson entity)
        {
            this.SendPropertyChanging("Sightfuncpersons");
            entity.Act = this;
        }
    
        private void detach_Sightfuncpersons(Sightfuncperson entity)
        {
            this.SendPropertyChanging("Sightfuncpersons");
            entity.Act = null;
        }

        private void attach_Actpaymentdocuments(Actpaymentdocument entity)
        {
            this.SendPropertyChanging("Actpaymentdocuments");
            entity.Act = this;
        }
    
        private void detach_Actpaymentdocuments(Actpaymentdocument entity)
        {
            this.SendPropertyChanging("Actpaymentdocuments");
            entity.Act = null;
        }

        private void attach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Act = this;
        }
    
        private void detach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Act = null;
        }
    }

    /// <summary>
    /// Связь этапов доп. соглашения с закрытыми этапами (сс)
    /// </summary>
    [Table(Name = @"UD.CLOSEDSTAGERELATION")]
    public partial class Closedstagerelation : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Stageid;

        private long _Closedstageid;

        private EntityRef<Stage> _Stage_Stageid;

        private EntityRef<Stage> _Stage_Closedstageid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnStageidChanging(long value);
        partial void OnStageidChanged();
        partial void OnClosedstageidChanging(long value);
        partial void OnClosedstageidChanged();
        #endregion

        public Closedstagerelation()
        {
            this._Stage_Stageid  = default(EntityRef<Stage>);
            this._Stage_Closedstageid  = default(EntityRef<Stage>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Closedstagerelation")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Cсылка на этап в доп. соглашении
        /// </summary>
        [Column(Name = @"STAGEID", Storage = "_Stageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Stageid
        {
            get
            {
                return this._Stageid;
            }
            set
            {
                if (this._Stageid != value)
                {
                    if (this._Stage_Stageid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStageidChanging(value);
                    this.SendPropertyChanging();
                    this._Stageid = value;
                    this.SendPropertyChanged("Stageid");
                    this.OnStageidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на закрытый этап
        /// </summary>
        [Column(Name = @"CLOSEDSTAGEID", Storage = "_Closedstageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Closedstageid
        {
            get
            {
                return this._Closedstageid;
            }
            set
            {
                if (this._Closedstageid != value)
                {
                    if (this._Stage_Closedstageid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClosedstageidChanging(value);
                    this.SendPropertyChanging();
                    this._Closedstageid = value;
                    this.SendPropertyChanged("Closedstageid");
                    this.OnClosedstageidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage_Stageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Closedstagerelation_Stageid", Storage="_Stage_Stageid", ThisKey="Stageid", IsForeignKey=true, DeleteOnNull=true)]
        public Stage Stage_Stageid
        {
            get
            {
                return this._Stage_Stageid.Entity;
            }
            set
            {
                Stage previousValue = this._Stage_Stageid.Entity;
                if ((previousValue != value) || (this._Stage_Stageid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage_Stageid.Entity = null;
                        previousValue.Closedstagerelations_Stageid.Remove(this);
                    }
                    this._Stage_Stageid.Entity = value;
                    if (value != null)
                    {
                        this._Stageid = value.Id;
                        value.Closedstagerelations_Stageid.Add(this);
                    }
                    else
                    {
                        this._Stageid = default(long);
                    }
                    this.SendPropertyChanged("Stage_Stageid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage_Closedstageid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Id_Closedstagerelation_Closedstageid", Storage="_Stage_Closedstageid", ThisKey="Closedstageid", IsForeignKey=true, DeleteOnNull=true)]
        public Stage Stage_Closedstageid
        {
            get
            {
                return this._Stage_Closedstageid.Entity;
            }
            set
            {
                Stage previousValue = this._Stage_Closedstageid.Entity;
                if ((previousValue != value) || (this._Stage_Closedstageid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage_Closedstageid.Entity = null;
                        previousValue.Closedstagerelations_Closedstageid.Remove(this);
                    }
                    this._Stage_Closedstageid.Entity = value;
                    if (value != null)
                    {
                        this._Closedstageid = value.Id;
                        value.Closedstagerelations_Closedstageid.Add(this);
                    }
                    else
                    {
                        this._Closedstageid = default(long);
                    }
                    this.SendPropertyChanged("Stage_Closedstageid");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Представители (персоны) функционального заказчика
    /// </summary>
    [Table(Name = @"UD.FUNCCUSTOMERPERSON")]
    public partial class Funccustomerperson : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Funccustomerid;

        private System.Nullable<long> _Personid;

        private EntityRef<Functionalcustomer> _Functionalcustomer;

        private EntityRef<Person> _Person;

        private EntitySet<Sightfuncpersonscheme> _Sightfuncpersonschemes;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFunccustomeridChanging(long value);
        partial void OnFunccustomeridChanged();
        partial void OnPersonidChanging(System.Nullable<long> value);
        partial void OnPersonidChanged();
        #endregion

        public Funccustomerperson()
        {
            this._Functionalcustomer  = default(EntityRef<Functionalcustomer>);
            this._Person  = default(EntityRef<Person>);
            this._Sightfuncpersonschemes = new EntitySet<Sightfuncpersonscheme>(new Action<Sightfuncpersonscheme>(this.attach_Sightfuncpersonschemes), new Action<Sightfuncpersonscheme>(this.detach_Sightfuncpersonschemes));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Funccustomerperson")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на функционального заказчика
        /// </summary>
        [Column(Name = @"FUNCCUSTOMERID", Storage = "_Funccustomerid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Funccustomerid
        {
            get
            {
                return this._Funccustomerid;
            }
            set
            {
                if (this._Funccustomerid != value)
                {
                    if (this._Functionalcustomer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFunccustomeridChanging(value);
                    this.SendPropertyChanging();
                    this._Funccustomerid = value;
                    this.SendPropertyChanged("Funccustomerid");
                    this.OnFunccustomeridChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на человека - представителя функционального заказчика
        /// </summary>
        [Column(Name = @"PERSONID", Storage = "_Personid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Personid
        {
            get
            {
                return this._Personid;
            }
            set
            {
                if (this._Personid != value)
                {
                    if (this._Person.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonidChanging(value);
                    this.SendPropertyChanging();
                    this._Personid = value;
                    this.SendPropertyChanged("Personid");
                    this.OnPersonidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionalcustomer_Funccustomerperson", Storage="_Functionalcustomer", ThisKey="Funccustomerid", IsForeignKey=true)]
        public Functionalcustomer Functionalcustomer
        {
            get
            {
                return this._Functionalcustomer.Entity;
            }
            set
            {
                Functionalcustomer previousValue = this._Functionalcustomer.Entity;
                if ((previousValue != value) || (this._Functionalcustomer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Functionalcustomer.Entity = null;
                        previousValue.Funccustomerpersons.Remove(this);
                    }
                    this._Functionalcustomer.Entity = value;
                    if (value != null)
                    {
                        this._Funccustomerid = value.Id;
                        value.Funccustomerpersons.Add(this);
                    }
                    else
                    {
                        this._Funccustomerid = default(long);
                    }
                    this.SendPropertyChanged("Functionalcustomer");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Person in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Funccustomerperson", Storage="_Person", ThisKey="Personid", IsForeignKey=true)]
        public Person Person
        {
            get
            {
                return this._Person.Entity;
            }
            set
            {
                Person previousValue = this._Person.Entity;
                if ((previousValue != value) || (this._Person.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Person.Entity = null;
                        previousValue.Funccustomerpersons.Remove(this);
                    }
                    this._Person.Entity = value;
                    if (value != null)
                    {
                        this._Personid = value.Id;
                        value.Funccustomerpersons.Add(this);
                    }
                    else
                    {
                        this._Personid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Person");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sightfuncpersonschemes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Funccustomerperson_Sightfuncpersonscheme", Storage="_Sightfuncpersonschemes", OtherKey="Funcpersonid", DeleteRule="CASCADE")]
        public EntitySet<Sightfuncpersonscheme> Sightfuncpersonschemes
        {
            get
            {
                return this._Sightfuncpersonschemes;
            }
            set
            {
                this._Sightfuncpersonschemes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Sightfuncpersonschemes(Sightfuncpersonscheme entity)
        {
            this.SendPropertyChanging("Sightfuncpersonschemes");
            entity.Funccustomerperson = this;
        }
    
        private void detach_Sightfuncpersonschemes(Sightfuncpersonscheme entity)
        {
            this.SendPropertyChanging("Sightfuncpersonschemes");
            entity.Funccustomerperson = null;
        }
    }

    /// <summary>
    /// Визы представителя (персоны) функционального заказчика
    /// </summary>
    [Table(Name = @"UD.SIGHTFUNCPERSON")]
    public partial class Sightfuncperson : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private long _Sightfuncpersonschid;

        private long _Actid;

        private EntityRef<Act> _Act;

        private EntityRef<Sightfuncpersonscheme> _Sightfuncpersonscheme;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSightfuncpersonschidChanging(long value);
        partial void OnSightfuncpersonschidChanged();
        partial void OnActidChanging(long value);
        partial void OnActidChanged();
        #endregion

        public Sightfuncperson()
        {
            this._Act  = default(EntityRef<Act>);
            this._Sightfuncpersonscheme  = default(EntityRef<Sightfuncpersonscheme>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Sightfuncperson")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название визы
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", DbType = "NVARCHAR2(500) NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на схему визирования функционального заказчика
        /// </summary>
        [Column(Name = @"SIGHTFUNCPERSONSCHID", Storage = "_Sightfuncpersonschid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Sightfuncpersonschid
        {
            get
            {
                return this._Sightfuncpersonschid;
            }
            set
            {
                if (this._Sightfuncpersonschid != value)
                {
                    if (this._Sightfuncpersonscheme.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSightfuncpersonschidChanging(value);
                    this.SendPropertyChanging();
                    this._Sightfuncpersonschid = value;
                    this.SendPropertyChanged("Sightfuncpersonschid");
                    this.OnSightfuncpersonschidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на акт
        /// </summary>
        [Column(Name = @"ACTID", Storage = "_Actid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Actid
        {
            get
            {
                return this._Actid;
            }
            set
            {
                if (this._Actid != value)
                {
                    if (this._Act.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActidChanging(value);
                    this.SendPropertyChanging();
                    this._Actid = value;
                    this.SendPropertyChanged("Actid");
                    this.OnActidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Act in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Sightfuncperson", Storage="_Act", ThisKey="Actid", IsForeignKey=true, DeleteOnNull=true)]
        public Act Act
        {
            get
            {
                return this._Act.Entity;
            }
            set
            {
                Act previousValue = this._Act.Entity;
                if ((previousValue != value) || (this._Act.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Act.Entity = null;
                        previousValue.Sightfuncpersons.Remove(this);
                    }
                    this._Act.Entity = value;
                    if (value != null)
                    {
                        this._Actid = value.Id;
                        value.Sightfuncpersons.Add(this);
                    }
                    else
                    {
                        this._Actid = default(long);
                    }
                    this.SendPropertyChanged("Act");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sightfuncpersonscheme in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Sightfuncpersonscheme_Sightfuncperson", Storage="_Sightfuncpersonscheme", ThisKey="Sightfuncpersonschid", IsForeignKey=true)]
        public Sightfuncpersonscheme Sightfuncpersonscheme
        {
            get
            {
                return this._Sightfuncpersonscheme.Entity;
            }
            set
            {
                Sightfuncpersonscheme previousValue = this._Sightfuncpersonscheme.Entity;
                if ((previousValue != value) || (this._Sightfuncpersonscheme.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Sightfuncpersonscheme.Entity = null;
                        previousValue.Sightfuncpersons.Remove(this);
                    }
                    this._Sightfuncpersonscheme.Entity = value;
                    if (value != null)
                    {
                        this._Sightfuncpersonschid = value.Id;
                        value.Sightfuncpersons.Add(this);
                    }
                    else
                    {
                        this._Sightfuncpersonschid = default(long);
                    }
                    this.SendPropertyChanged("Sightfuncpersonscheme");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Регион (сп)
    /// </summary>
    [Table(Name = @"UD.REGION")]
    public partial class Region : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Act> _Acts;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Region()
        {
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Region")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название региона
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(500) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Region_Act", Storage="_Acts", OtherKey="Regionid", DeleteRule="CASCADE")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Region = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Region = null;
        }
    }

    /// <summary>
    /// Тип акта сдачи-приёмки
    /// </summary>
    [Table(Name = @"UD.ACTTYPE")]
    public partial class Acttype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractorid;

        private string _Typename;

        private System.Nullable<bool> _Isactive;

        private EntitySet<Act> _Acts;

        private EntityRef<Contractor> _Contractor;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        partial void OnTypenameChanging(string value);
        partial void OnTypenameChanged();
        partial void OnIsactiveChanging(System.Nullable<bool> value);
        partial void OnIsactiveChanged();
        #endregion

        public Acttype()
        {
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractor  = default(EntityRef<Contractor>);
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Acttype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на контрагента
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// Навазние тип акта сдачи-приёмки
        /// </summary>
        [Column(Name = @"TYPENAME", Storage = "_Typename", DbType = "NVARCHAR2(200) NULL")]
        public string Typename
        {
            get
            {
                return this._Typename;
            }
            set
            {
                if (this._Typename != value)
                {
                    this.OnTypenameChanging(value);
                    this.SendPropertyChanging();
                    this._Typename = value;
                    this.SendPropertyChanged("Typename");
                    this.OnTypenameChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак активности
        /// </summary>
        [Column(Name = @"ISACTIVE", Storage = "_Isactive", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isactive
        {
            get
            {
                return this._Isactive;
            }
            set
            {
                if (this._Isactive != value)
                {
                    this.OnIsactiveChanging(value);
                    this.SendPropertyChanging();
                    this._Isactive = value;
                    this.SendPropertyChanged("Isactive");
                    this.OnIsactiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Acttype_Act", Storage="_Acts", OtherKey="Acttypeid")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Acttype", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Acttypes.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Acttypes.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Acttype_Contractdoc", Storage="_Contractdocs", OtherKey="Acttypeid")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Acttype = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Acttype = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Acttype = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Acttype = null;
        }
    }

    /// <summary>
    /// Тип работ (сп)
    /// </summary>
    [Table(Name = @"UD.WORKTYPE")]
    public partial class Worktype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Shortname;

        private EntitySet<Schedule> _Schedules;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortnameChanging(string value);
        partial void OnShortnameChanged();
        #endregion

        public Worktype()
        {
            this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Worktype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название типа работ
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(1000) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Сокращённое название работ
        /// </summary>
        [Column(Name = @"SHORTNAME", Storage = "_Shortname", DbType = "NVARCHAR2(50) NULL")]
        public string Shortname
        {
            get
            {
                return this._Shortname;
            }
            set
            {
                if (this._Shortname != value)
                {
                    this.OnShortnameChanging(value);
                    this.SendPropertyChanging();
                    this._Shortname = value;
                    this.SendPropertyChanged("Shortname");
                    this.OnShortnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedules in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Worktype_Schedule", Storage="_Schedules", OtherKey="Worktypeid", DeleteRule="CASCADE")]
        public EntitySet<Schedule> Schedules
        {
            get
            {
                return this._Schedules;
            }
            set
            {
                this._Schedules.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Schedules(Schedule entity)
        {
            this.SendPropertyChanging("Schedules");
            entity.Worktype = this;
        }
    
        private void detach_Schedules(Schedule entity)
        {
            this.SendPropertyChanging("Schedules");
            entity.Worktype = null;
        }
    }

    /// <summary>
    /// Распоряжение, устанавливающее ответственных по договору со стороны Промгаза
    /// </summary>
    [Table(Name = @"UD.DISPOSAL")]
    public partial class Disposal : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Num;

        private System.Nullable<System.DateTime> _Approveddate;

        private EntitySet<Responsible> _Responsibles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnApproveddateChanging(System.Nullable<System.DateTime> value);
        partial void OnApproveddateChanged();
        #endregion

        public Disposal()
        {
            this._Responsibles = new EntitySet<Responsible>(new Action<Responsible>(this.attach_Responsibles), new Action<Responsible>(this.detach_Responsibles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Disposal")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер распоряжения
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(10) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата утверждения
        /// </summary>
        [Column(Name = @"APPROVEDDATE", Storage = "_Approveddate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Approveddate
        {
            get
            {
                return this._Approveddate;
            }
            set
            {
                if (this._Approveddate != value)
                {
                    this.OnApproveddateChanging(value);
                    this.SendPropertyChanging();
                    this._Approveddate = value;
                    this.SendPropertyChanged("Approveddate");
                    this.OnApproveddateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Disposal_Responsible", Storage="_Responsibles", OtherKey="Disposalid", DeleteRule="CASCADE")]
        public EntitySet<Responsible> Responsibles
        {
            get
            {
                return this._Responsibles;
            }
            set
            {
                this._Responsibles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Disposal = this;
        }
    
        private void detach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Disposal = null;
        }
    }

    /// <summary>
    /// Ответственные со стороны Промгаза, согласно распоряжению (сс)
    /// </summary>
    [Table(Name = @"UD.RESPONSIBLE")]
    public partial class Responsible : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Disposalid;

        private long _Employeeid;

        private long _Roleid = -1;

        private System.Nullable<long> _Contractdocid;

        private System.Nullable<long> _Stageid;

        private EntityRef<Employee> _Employee;

        private EntityRef<Stage> _Stage;

        private EntityRef<Disposal> _Disposal;

        private EntityRef<Role> _Role;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDisposalidChanging(long value);
        partial void OnDisposalidChanged();
        partial void OnEmployeeidChanging(long value);
        partial void OnEmployeeidChanged();
        partial void OnRoleidChanging(long value);
        partial void OnRoleidChanged();
        partial void OnContractdocidChanging(System.Nullable<long> value);
        partial void OnContractdocidChanged();
        partial void OnStageidChanging(System.Nullable<long> value);
        partial void OnStageidChanged();
        #endregion

        public Responsible()
        {
            this._Employee  = default(EntityRef<Employee>);
            this._Stage  = default(EntityRef<Stage>);
            this._Disposal  = default(EntityRef<Disposal>);
            this._Role  = default(EntityRef<Role>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Responsible")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на распоряжение
        /// </summary>
        [Column(Name = @"DISPOSALID", Storage = "_Disposalid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Disposalid
        {
            get
            {
                return this._Disposalid;
            }
            set
            {
                if (this._Disposalid != value)
                {
                    if (this._Disposal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDisposalidChanging(value);
                    this.SendPropertyChanging();
                    this._Disposalid = value;
                    this.SendPropertyChanged("Disposalid");
                    this.OnDisposalidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ответсвенного от заказчика согласно распоряжению
        /// </summary>
        [Column(Name = @"EMPLOYEEID", Storage = "_Employeeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Employeeid
        {
            get
            {
                return this._Employeeid;
            }
            set
            {
                if (this._Employeeid != value)
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeidChanging(value);
                    this.SendPropertyChanging();
                    this._Employeeid = value;
                    this.SendPropertyChanged("Employeeid");
                    this.OnEmployeeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на роль
        /// </summary>
        [Column(Name = @"ROLEID", Storage = "_Roleid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Roleid
        {
            get
            {
                return this._Roleid;
            }
            set
            {
                if (this._Roleid != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleidChanging(value);
                    this.SendPropertyChanging();
                    this._Roleid = value;
                    this.SendPropertyChanged("Roleid");
                    this.OnRoleidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на договор
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stageid in the schema.
        /// </summary>
        [Column(Name = @"STAGEID", Storage = "_Stageid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Stageid
        {
            get
            {
                return this._Stageid;
            }
            set
            {
                if (this._Stageid != value)
                {
                    if (this._Stage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStageidChanging(value);
                    this.SendPropertyChanging();
                    this._Stageid = value;
                    this.SendPropertyChanged("Stageid");
                    this.OnStageidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Responsible", Storage="_Employee", ThisKey="Employeeid", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if ((previousValue != value) || (this._Employee.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Employee.Entity = null;
                        previousValue.Responsibles.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if (value != null)
                    {
                        this._Employeeid = value.Id;
                        value.Responsibles.Add(this);
                    }
                    else
                    {
                        this._Employeeid = default(long);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stage in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stage_Responsible", Storage="_Stage", ThisKey="Stageid", IsForeignKey=true)]
        public Stage Stage
        {
            get
            {
                return this._Stage.Entity;
            }
            set
            {
                Stage previousValue = this._Stage.Entity;
                if ((previousValue != value) || (this._Stage.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Stage.Entity = null;
                        previousValue.Responsibles.Remove(this);
                    }
                    this._Stage.Entity = value;
                    if (value != null)
                    {
                        this._Stageid = value.Id;
                        value.Responsibles.Add(this);
                    }
                    else
                    {
                        this._Stageid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Stage");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Disposal in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Disposal_Responsible", Storage="_Disposal", ThisKey="Disposalid", IsForeignKey=true, DeleteOnNull=true)]
        public Disposal Disposal
        {
            get
            {
                return this._Disposal.Entity;
            }
            set
            {
                Disposal previousValue = this._Disposal.Entity;
                if ((previousValue != value) || (this._Disposal.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Disposal.Entity = null;
                        previousValue.Responsibles.Remove(this);
                    }
                    this._Disposal.Entity = value;
                    if (value != null)
                    {
                        this._Disposalid = value.Id;
                        value.Responsibles.Add(this);
                    }
                    else
                    {
                        this._Disposalid = default(long);
                    }
                    this.SendPropertyChanged("Disposal");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_Responsible", Storage="_Role", ThisKey="Roleid", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Responsibles.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._Roleid = value.Id;
                        value.Responsibles.Add(this);
                    }
                    else
                    {
                        this._Roleid = default(long);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Responsible", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Responsibles.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Responsibles.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Роль (сп)
    /// </summary>
    [Table(Name = @"UD.ROLE")]
    public partial class Role : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Responsible> _Responsibles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Role()
        {
            this._Responsibles = new EntitySet<Responsible>(new Action<Responsible>(this.attach_Responsibles), new Action<Responsible>(this.detach_Responsibles));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Role")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (нарп. Руководитель направления?)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_Responsible", Storage="_Responsibles", OtherKey="Roleid")]
        public EntitySet<Responsible> Responsibles
        {
            get
            {
                return this._Responsibles;
            }
            set
            {
                this._Responsibles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Role = this;
        }
    
        private void detach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Role = null;
        }
    }

    /// <summary>
    /// Основание (сп)
    /// </summary>
    [Table(Name = @"UD.AUTHORITY")]
    public partial class Authority : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Contractorauthority> _Contractorauthorities;

        private EntitySet<Enterpriseauthority> _Enterpriseauthorities;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Authority()
        {
            this._Contractorauthorities = new EntitySet<Contractorauthority>(new Action<Contractorauthority>(this.attach_Contractorauthorities), new Action<Contractorauthority>(this.detach_Contractorauthorities));
            this._Enterpriseauthorities = new EntitySet<Enterpriseauthority>(new Action<Enterpriseauthority>(this.attach_Enterpriseauthorities), new Action<Enterpriseauthority>(this.detach_Enterpriseauthorities));
            OnCreated();
        }

    
        /// <summary>
        /// Идентиыикатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Authority")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование основания
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorauthorities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Authority_Contractorauthority", Storage="_Contractorauthorities", OtherKey="Authorityid", DeleteRule="CASCADE")]
        public EntitySet<Contractorauthority> Contractorauthorities
        {
            get
            {
                return this._Contractorauthorities;
            }
            set
            {
                this._Contractorauthorities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Enterpriseauthorities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Authority_Enterpriseauthority", Storage="_Enterpriseauthorities", OtherKey="Authorityid", DeleteRule="CASCADE")]
        public EntitySet<Enterpriseauthority> Enterpriseauthorities
        {
            get
            {
                return this._Enterpriseauthorities;
            }
            set
            {
                this._Enterpriseauthorities.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractorauthorities(Contractorauthority entity)
        {
            this.SendPropertyChanging("Contractorauthorities");
            entity.Authority = this;
        }
    
        private void detach_Contractorauthorities(Contractorauthority entity)
        {
            this.SendPropertyChanging("Contractorauthorities");
            entity.Authority = null;
        }

        private void attach_Enterpriseauthorities(Enterpriseauthority entity)
        {
            this.SendPropertyChanging("Enterpriseauthorities");
            entity.Authority = this;
        }
    
        private void detach_Enterpriseauthorities(Enterpriseauthority entity)
        {
            this.SendPropertyChanging("Enterpriseauthorities");
            entity.Authority = null;
        }
    }

    /// <summary>
    /// Схема визирования функционального заказчика
    /// </summary>
    [Table(Name = @"UD.SIGHTFUNCPERSONSCHEME")]
    public partial class Sightfuncpersonscheme : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Num;

        private System.Nullable<bool> _Isactive;

        private long _Funcpersonid;

        private EntityRef<Funccustomerperson> _Funccustomerperson;

        private EntitySet<Sightfuncperson> _Sightfuncpersons;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNumChanging(System.Nullable<long> value);
        partial void OnNumChanged();
        partial void OnIsactiveChanging(System.Nullable<bool> value);
        partial void OnIsactiveChanged();
        partial void OnFuncpersonidChanging(long value);
        partial void OnFuncpersonidChanged();
        #endregion

        public Sightfuncpersonscheme()
        {
            this._Funccustomerperson  = default(EntityRef<Funccustomerperson>);
            this._Sightfuncpersons = new EntitySet<Sightfuncperson>(new Action<Sightfuncperson>(this.attach_Sightfuncpersons), new Action<Sightfuncperson>(this.detach_Sightfuncpersons));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Sightfuncpersonscheme")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак активности
        /// </summary>
        [Column(Name = @"ISACTIVE", Storage = "_Isactive", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isactive
        {
            get
            {
                return this._Isactive;
            }
            set
            {
                if (this._Isactive != value)
                {
                    this.OnIsactiveChanging(value);
                    this.SendPropertyChanging();
                    this._Isactive = value;
                    this.SendPropertyChanged("Isactive");
                    this.OnIsactiveChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на представителя (персону)функционального заказчика
        /// </summary>
        [Column(Name = @"FUNCPERSONID", Storage = "_Funcpersonid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Funcpersonid
        {
            get
            {
                return this._Funcpersonid;
            }
            set
            {
                if (this._Funcpersonid != value)
                {
                    if (this._Funccustomerperson.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFuncpersonidChanging(value);
                    this.SendPropertyChanging();
                    this._Funcpersonid = value;
                    this.SendPropertyChanged("Funcpersonid");
                    this.OnFuncpersonidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Funccustomerperson in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Funccustomerperson_Sightfuncpersonscheme", Storage="_Funccustomerperson", ThisKey="Funcpersonid", IsForeignKey=true)]
        public Funccustomerperson Funccustomerperson
        {
            get
            {
                return this._Funccustomerperson.Entity;
            }
            set
            {
                Funccustomerperson previousValue = this._Funccustomerperson.Entity;
                if ((previousValue != value) || (this._Funccustomerperson.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Funccustomerperson.Entity = null;
                        previousValue.Sightfuncpersonschemes.Remove(this);
                    }
                    this._Funccustomerperson.Entity = value;
                    if (value != null)
                    {
                        this._Funcpersonid = value.Id;
                        value.Sightfuncpersonschemes.Add(this);
                    }
                    else
                    {
                        this._Funcpersonid = default(long);
                    }
                    this.SendPropertyChanged("Funccustomerperson");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sightfuncpersons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Sightfuncpersonscheme_Sightfuncperson", Storage="_Sightfuncpersons", OtherKey="Sightfuncpersonschid", DeleteRule="CASCADE")]
        public EntitySet<Sightfuncperson> Sightfuncpersons
        {
            get
            {
                return this._Sightfuncpersons;
            }
            set
            {
                this._Sightfuncpersons.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Sightfuncpersons(Sightfuncperson entity)
        {
            this.SendPropertyChanging("Sightfuncpersons");
            entity.Sightfuncpersonscheme = this;
        }
    
        private void detach_Sightfuncpersons(Sightfuncperson entity)
        {
            this.SendPropertyChanging("Sightfuncpersons");
            entity.Sightfuncpersonscheme = null;
        }
    }

    /// <summary>
    /// Платежные документы по акту сдачи-приёмки
    /// </summary>
    [Table(Name = @"UD.ACTPAYMENTDOCUMENT")]
    public partial class Actpaymentdocument : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Actid;

        private long _Paymentdocumentid;

        private EntityRef<Act> _Act;

        private EntityRef<Paymentdocument> _Paymentdocument;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnActidChanging(long value);
        partial void OnActidChanged();
        partial void OnPaymentdocumentidChanging(long value);
        partial void OnPaymentdocumentidChanged();
        #endregion

        public Actpaymentdocument()
        {
            this._Act  = default(EntityRef<Act>);
            this._Paymentdocument  = default(EntityRef<Paymentdocument>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Actpaymentdocument")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на акт сдачи-приёмки
        /// </summary>
        [Column(Name = @"ACTID", Storage = "_Actid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Actid
        {
            get
            {
                return this._Actid;
            }
            set
            {
                if (this._Actid != value)
                {
                    if (this._Act.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActidChanging(value);
                    this.SendPropertyChanging();
                    this._Actid = value;
                    this.SendPropertyChanged("Actid");
                    this.OnActidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на платежный документ
        /// </summary>
        [Column(Name = @"PAYMENTDOCUMENTID", Storage = "_Paymentdocumentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Paymentdocumentid
        {
            get
            {
                return this._Paymentdocumentid;
            }
            set
            {
                if (this._Paymentdocumentid != value)
                {
                    if (this._Paymentdocument.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPaymentdocumentidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentdocumentid = value;
                    this.SendPropertyChanged("Paymentdocumentid");
                    this.OnPaymentdocumentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Act in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Actpaymentdocument", Storage="_Act", ThisKey="Actid", IsForeignKey=true, DeleteOnNull=true)]
        public Act Act
        {
            get
            {
                return this._Act.Entity;
            }
            set
            {
                Act previousValue = this._Act.Entity;
                if ((previousValue != value) || (this._Act.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Act.Entity = null;
                        previousValue.Actpaymentdocuments.Remove(this);
                    }
                    this._Act.Entity = value;
                    if (value != null)
                    {
                        this._Actid = value.Id;
                        value.Actpaymentdocuments.Add(this);
                    }
                    else
                    {
                        this._Actid = default(long);
                    }
                    this.SendPropertyChanged("Act");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdocument in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Paymentdocument_Actpaymentdocument", Storage="_Paymentdocument", ThisKey="Paymentdocumentid", IsForeignKey=true, DeleteOnNull=true)]
        public Paymentdocument Paymentdocument
        {
            get
            {
                return this._Paymentdocument.Entity;
            }
            set
            {
                Paymentdocument previousValue = this._Paymentdocument.Entity;
                if ((previousValue != value) || (this._Paymentdocument.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Paymentdocument.Entity = null;
                        previousValue.Actpaymentdocuments.Remove(this);
                    }
                    this._Paymentdocument.Entity = value;
                    if (value != null)
                    {
                        this._Paymentdocumentid = value.Id;
                        value.Actpaymentdocuments.Add(this);
                    }
                    else
                    {
                        this._Paymentdocumentid = default(long);
                    }
                    this.SendPropertyChanged("Paymentdocument");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// РђРєС‚ РїСЂРёС‘РјРєРё-РїРµСЂРµРґР°С‡Рё - Р°РєС‚ СЂРµРіРёСЃС‚СЂРёСЂСѓСЋС‰РёР№, РєР°РєРёРµ РґРѕРєСѓРјРµРЅС‚С‹ Р±С‹Р»Рё РїРµСЂРµРґР°РЅС‹ Р·Р°РєР°Р·С‡РёРєСѓ
    /// </summary>
    [Table(Name = @"UD.TRANSFERACT")]
    public partial class Transferact : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Num;

        private System.Nullable<System.DateTime> _Signdate;

        private long _Transferacttypeid;

        private EntityRef<Transferacttype> _Transferacttype;

        private EntitySet<Contracttranactdoc> _Contracttranactdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNumChanging(System.Nullable<long> value);
        partial void OnNumChanged();
        partial void OnSigndateChanging(System.Nullable<System.DateTime> value);
        partial void OnSigndateChanged();
        partial void OnTransferacttypeidChanging(long value);
        partial void OnTransferacttypeidChanged();
        #endregion

        public Transferact()
        {
            this._Transferacttype  = default(EntityRef<Transferacttype>);
            this._Contracttranactdocs = new EntitySet<Contracttranactdoc>(new Action<Contracttranactdoc>(this.attach_Contracttranactdocs), new Action<Contracttranactdoc>(this.detach_Contracttranactdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Transferact")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата подписания акта передачи
        /// </summary>
        [Column(Name = @"SIGNDATE", Storage = "_Signdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Signdate
        {
            get
            {
                return this._Signdate;
            }
            set
            {
                if (this._Signdate != value)
                {
                    this.OnSigndateChanging(value);
                    this.SendPropertyChanging();
                    this._Signdate = value;
                    this.SendPropertyChanged("Signdate");
                    this.OnSigndateChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип акта приёмки-передачи
        /// </summary>
        [Column(Name = @"TRANSFERACTTYPEID", Storage = "_Transferacttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Transferacttypeid
        {
            get
            {
                return this._Transferacttypeid;
            }
            set
            {
                if (this._Transferacttypeid != value)
                {
                    if (this._Transferacttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransferacttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Transferacttypeid = value;
                    this.SendPropertyChanged("Transferacttypeid");
                    this.OnTransferacttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transferacttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferacttype_Transferact", Storage="_Transferacttype", ThisKey="Transferacttypeid", IsForeignKey=true)]
        public Transferacttype Transferacttype
        {
            get
            {
                return this._Transferacttype.Entity;
            }
            set
            {
                Transferacttype previousValue = this._Transferacttype.Entity;
                if ((previousValue != value) || (this._Transferacttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Transferacttype.Entity = null;
                        previousValue.Transferacts.Remove(this);
                    }
                    this._Transferacttype.Entity = value;
                    if (value != null)
                    {
                        this._Transferacttypeid = value.Id;
                        value.Transferacts.Add(this);
                    }
                    else
                    {
                        this._Transferacttypeid = default(long);
                    }
                    this.SendPropertyChanged("Transferacttype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttranactdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferact_Contracttranactdoc", Storage="_Contracttranactdocs", OtherKey="Transferactid", DeleteRule="CASCADE")]
        public EntitySet<Contracttranactdoc> Contracttranactdocs
        {
            get
            {
                return this._Contracttranactdocs;
            }
            set
            {
                this._Contracttranactdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Transferact = this;
        }
    
        private void detach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Transferact = null;
        }
    }

    /// <summary>
    /// Тип акта приёмки-передачи(сп)
    /// </summary>
    [Table(Name = @"UD.TRANSFERACTTYPE")]
    public partial class Transferacttype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Transferact> _Transferacts;

        private EntitySet<Transferacttypedocument> _Transferacttypedocuments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Transferacttype()
        {
            this._Transferacts = new EntitySet<Transferact>(new Action<Transferact>(this.attach_Transferacts), new Action<Transferact>(this.detach_Transferacts));
            this._Transferacttypedocuments = new EntitySet<Transferacttypedocument>(new Action<Transferacttypedocument>(this.attach_Transferacttypedocuments), new Action<Transferacttypedocument>(this.detach_Transferacttypedocuments));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Transferacttype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование типа
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transferacts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferacttype_Transferact", Storage="_Transferacts", OtherKey="Transferacttypeid", DeleteRule="CASCADE")]
        public EntitySet<Transferact> Transferacts
        {
            get
            {
                return this._Transferacts;
            }
            set
            {
                this._Transferacts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Transferacttypedocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferacttype_Transferacttypedocument", Storage="_Transferacttypedocuments", OtherKey="Transferacttypeid", DeleteRule="CASCADE")]
        public EntitySet<Transferacttypedocument> Transferacttypedocuments
        {
            get
            {
                return this._Transferacttypedocuments;
            }
            set
            {
                this._Transferacttypedocuments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Transferacts(Transferact entity)
        {
            this.SendPropertyChanging("Transferacts");
            entity.Transferacttype = this;
        }
    
        private void detach_Transferacts(Transferact entity)
        {
            this.SendPropertyChanging("Transferacts");
            entity.Transferacttype = null;
        }

        private void attach_Transferacttypedocuments(Transferacttypedocument entity)
        {
            this.SendPropertyChanging("Transferacttypedocuments");
            entity.Transferacttype = this;
        }
    
        private void detach_Transferacttypedocuments(Transferacttypedocument entity)
        {
            this.SendPropertyChanging("Transferacttypedocuments");
            entity.Transferacttype = null;
        }
    }

    /// <summary>
    /// Документ (напр. Техническое задание, календарный план,...)
    /// </summary>
    [Table(Name = @"UD.DOCUMENT")]
    public partial class Document : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private System.Nullable<long> _Domain;

        private string _Foldername;

        private EntitySet<Transferacttypedocument> _Transferacttypedocuments;

        private EntitySet<Contracttranactdoc> _Contracttranactdocs;

        private EntitySet<Documentimage> _Documentimages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDomainChanging(System.Nullable<long> value);
        partial void OnDomainChanged();
        partial void OnFoldernameChanging(string value);
        partial void OnFoldernameChanged();
        #endregion

        public Document()
        {
            this._Transferacttypedocuments = new EntitySet<Transferacttypedocument>(new Action<Transferacttypedocument>(this.attach_Transferacttypedocuments), new Action<Transferacttypedocument>(this.detach_Transferacttypedocuments));
            this._Contracttranactdocs = new EntitySet<Contracttranactdoc>(new Action<Contracttranactdoc>(this.attach_Contracttranactdocs), new Action<Contracttranactdoc>(this.detach_Contracttranactdocs));
            this._Documentimages = new EntitySet<Documentimage>(new Action<Documentimage>(this.attach_Documentimages), new Action<Documentimage>(this.detach_Documentimages));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Document")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Наименование документа
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Domain in the schema.
        /// </summary>
        [Column(Name = @"DOMAIN", Storage = "_Domain", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Domain
        {
            get
            {
                return this._Domain;
            }
            set
            {
                if (this._Domain != value)
                {
                    this.OnDomainChanging(value);
                    this.SendPropertyChanging();
                    this._Domain = value;
                    this.SendPropertyChanged("Domain");
                    this.OnDomainChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Foldername in the schema.
        /// </summary>
        [Column(Name = @"FOLDERNAME", Storage = "_Foldername", DbType = "NVARCHAR2(2000) NULL")]
        public string Foldername
        {
            get
            {
                return this._Foldername;
            }
            set
            {
                if (this._Foldername != value)
                {
                    this.OnFoldernameChanging(value);
                    this.SendPropertyChanging();
                    this._Foldername = value;
                    this.SendPropertyChanged("Foldername");
                    this.OnFoldernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transferacttypedocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Transferacttypedocument", Storage="_Transferacttypedocuments", OtherKey="Documentid", DeleteRule="CASCADE")]
        public EntitySet<Transferacttypedocument> Transferacttypedocuments
        {
            get
            {
                return this._Transferacttypedocuments;
            }
            set
            {
                this._Transferacttypedocuments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttranactdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Contracttranactdoc", Storage="_Contracttranactdocs", OtherKey="Documentid", DeleteRule="CASCADE")]
        public EntitySet<Contracttranactdoc> Contracttranactdocs
        {
            get
            {
                return this._Contracttranactdocs;
            }
            set
            {
                this._Contracttranactdocs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Documentimages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Documentimage", Storage="_Documentimages", OtherKey="Documentid")]
        public EntitySet<Documentimage> Documentimages
        {
            get
            {
                return this._Documentimages;
            }
            set
            {
                this._Documentimages.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Transferacttypedocuments(Transferacttypedocument entity)
        {
            this.SendPropertyChanging("Transferacttypedocuments");
            entity.Document = this;
        }
    
        private void detach_Transferacttypedocuments(Transferacttypedocument entity)
        {
            this.SendPropertyChanging("Transferacttypedocuments");
            entity.Document = null;
        }

        private void attach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Document = this;
        }
    
        private void detach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Document = null;
        }

        private void attach_Documentimages(Documentimage entity)
        {
            this.SendPropertyChanging("Documentimages");
            entity.Document = this;
        }
    
        private void detach_Documentimages(Documentimage entity)
        {
            this.SendPropertyChanging("Documentimages");
            entity.Document = null;
        }
    }

    /// <summary>
    /// Тип документа (сс)
    /// </summary>
    [Table(Name = @"UD.TRANSFERACTTYPEDOCUMENT")]
    public partial class Transferacttypedocument : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Transferacttypeid;

        private long _Documentid;

        private EntityRef<Transferacttype> _Transferacttype;

        private EntityRef<Document> _Document;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnTransferacttypeidChanging(long value);
        partial void OnTransferacttypeidChanged();
        partial void OnDocumentidChanging(long value);
        partial void OnDocumentidChanged();
        #endregion

        public Transferacttypedocument()
        {
            this._Transferacttype  = default(EntityRef<Transferacttype>);
            this._Document  = default(EntityRef<Document>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Transferacttypedocument")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип
        /// </summary>
        [Column(Name = @"TRANSFERACTTYPEID", Storage = "_Transferacttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Transferacttypeid
        {
            get
            {
                return this._Transferacttypeid;
            }
            set
            {
                if (this._Transferacttypeid != value)
                {
                    if (this._Transferacttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransferacttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Transferacttypeid = value;
                    this.SendPropertyChanged("Transferacttypeid");
                    this.OnTransferacttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на документ
        /// </summary>
        [Column(Name = @"DOCUMENTID", Storage = "_Documentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Documentid
        {
            get
            {
                return this._Documentid;
            }
            set
            {
                if (this._Documentid != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentidChanging(value);
                    this.SendPropertyChanging();
                    this._Documentid = value;
                    this.SendPropertyChanged("Documentid");
                    this.OnDocumentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transferacttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferacttype_Transferacttypedocument", Storage="_Transferacttype", ThisKey="Transferacttypeid", IsForeignKey=true)]
        public Transferacttype Transferacttype
        {
            get
            {
                return this._Transferacttype.Entity;
            }
            set
            {
                Transferacttype previousValue = this._Transferacttype.Entity;
                if ((previousValue != value) || (this._Transferacttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Transferacttype.Entity = null;
                        previousValue.Transferacttypedocuments.Remove(this);
                    }
                    this._Transferacttype.Entity = value;
                    if (value != null)
                    {
                        this._Transferacttypeid = value.Id;
                        value.Transferacttypedocuments.Add(this);
                    }
                    else
                    {
                        this._Transferacttypeid = default(long);
                    }
                    this.SendPropertyChanged("Transferacttype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Transferacttypedocument", Storage="_Document", ThisKey="Documentid", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.Transferacttypedocuments.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._Documentid = value.Id;
                        value.Transferacttypedocuments.Add(this);
                    }
                    else
                    {
                        this._Documentid = default(long);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Р”РѕРєСѓРјРµРЅС‚С‹, РїСЂРµРґР°РЅРЅС‹Рµ Рє РґРѕРіРѕРІРѕСЂСѓ РёР»Рё Р°РєС‚Сѓ, СЃРѕРіР»Р°СЃРЅРѕ Р°РєС‚Сѓ РїСЂРёС‘РјРєРё-РїРµСЂРµРґР°С‡Рё
    /// </summary>
    [Table(Name = @"UD.CONTRACTTRANACTDOC")]
    public partial class Contracttranactdoc : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Contractdocid;

        private System.Nullable<long> _Transferactid;

        private long _Documentid;

        private System.Nullable<long> _Pagescount;

        private System.Nullable<long> _Actid;

        private EntityRef<Act> _Act;

        private EntityRef<Transferact> _Transferact;

        private EntityRef<Document> _Document;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractdocidChanging(System.Nullable<long> value);
        partial void OnContractdocidChanged();
        partial void OnTransferactidChanging(System.Nullable<long> value);
        partial void OnTransferactidChanged();
        partial void OnDocumentidChanging(long value);
        partial void OnDocumentidChanged();
        partial void OnPagescountChanging(System.Nullable<long> value);
        partial void OnPagescountChanged();
        partial void OnActidChanging(System.Nullable<long> value);
        partial void OnActidChanged();
        #endregion

        public Contracttranactdoc()
        {
            this._Act  = default(EntityRef<Act>);
            this._Transferact  = default(EntityRef<Transferact>);
            this._Document  = default(EntityRef<Document>);
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contracttranactdoc")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// РЎСЃС‹Р»РєР° РЅР° РґРѕРіРѕРІРѕСЂ
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// РЎСЃС‹Р»РєР° РЅР° Р°РєС‚ РїСЂРёРµРјРєРё-РїРµСЂРµРґР°С‡Рё
        /// </summary>
        [Column(Name = @"TRANSFERACTID", Storage = "_Transferactid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Transferactid
        {
            get
            {
                return this._Transferactid;
            }
            set
            {
                if (this._Transferactid != value)
                {
                    if (this._Transferact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransferactidChanging(value);
                    this.SendPropertyChanging();
                    this._Transferactid = value;
                    this.SendPropertyChanged("Transferactid");
                    this.OnTransferactidChanged();
                }
            }
        }

    
        /// <summary>
        /// СЃСЃС‹Р»РєР° РЅР° РґРѕРєСѓРјРµРЅС‚
        /// </summary>
        [Column(Name = @"DOCUMENTID", Storage = "_Documentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Documentid
        {
            get
            {
                return this._Documentid;
            }
            set
            {
                if (this._Documentid != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentidChanging(value);
                    this.SendPropertyChanging();
                    this._Documentid = value;
                    this.SendPropertyChanged("Documentid");
                    this.OnDocumentidChanged();
                }
            }
        }

    
        /// <summary>
        /// РљРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂР°РЅРёС†
        /// </summary>
        [Column(Name = @"PAGESCOUNT", Storage = "_Pagescount", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Pagescount
        {
            get
            {
                return this._Pagescount;
            }
            set
            {
                if (this._Pagescount != value)
                {
                    this.OnPagescountChanging(value);
                    this.SendPropertyChanging();
                    this._Pagescount = value;
                    this.SendPropertyChanged("Pagescount");
                    this.OnPagescountChanged();
                }
            }
        }

    
        /// <summary>
        /// РЎСЃС‹Р»РєР° РЅР° Р°РєС‚ РґР»СЏ РєРѕС‚РѕСЂРѕРіРѕ СЃС‚СЂРѕРёС‚СЃСЏ РѕРїРёСЃСЊ
        /// </summary>
        [Column(Name = @"ACTID", Storage = "_Actid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Actid
        {
            get
            {
                return this._Actid;
            }
            set
            {
                if (this._Actid != value)
                {
                    if (this._Act.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActidChanging(value);
                    this.SendPropertyChanging();
                    this._Actid = value;
                    this.SendPropertyChanged("Actid");
                    this.OnActidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Act in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Act_Contracttranactdoc", Storage="_Act", ThisKey="Actid", IsForeignKey=true)]
        public Act Act
        {
            get
            {
                return this._Act.Entity;
            }
            set
            {
                Act previousValue = this._Act.Entity;
                if ((previousValue != value) || (this._Act.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Act.Entity = null;
                        previousValue.Contracttranactdocs.Remove(this);
                    }
                    this._Act.Entity = value;
                    if (value != null)
                    {
                        this._Actid = value.Id;
                        value.Contracttranactdocs.Add(this);
                    }
                    else
                    {
                        this._Actid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Act");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transferact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Transferact_Contracttranactdoc", Storage="_Transferact", ThisKey="Transferactid", IsForeignKey=true)]
        public Transferact Transferact
        {
            get
            {
                return this._Transferact.Entity;
            }
            set
            {
                Transferact previousValue = this._Transferact.Entity;
                if ((previousValue != value) || (this._Transferact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Transferact.Entity = null;
                        previousValue.Contracttranactdocs.Remove(this);
                    }
                    this._Transferact.Entity = value;
                    if (value != null)
                    {
                        this._Transferactid = value.Id;
                        value.Contracttranactdocs.Add(this);
                    }
                    else
                    {
                        this._Transferactid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Transferact");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Contracttranactdoc", Storage="_Document", ThisKey="Documentid", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.Contracttranactdocs.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._Documentid = value.Id;
                        value.Contracttranactdocs.Add(this);
                    }
                    else
                    {
                        this._Documentid = default(long);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contracttranactdoc", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contracttranactdocs.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Contracttranactdocs.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Договор (генеральный/субподрядный и доп. соглашения)
    /// </summary>
    [Table(Name = @"UD.CONTRACTDOC")]
    public partial class Contractdoc : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Contracttypeid;

        private System.Nullable<long> _Currencyid;

        private System.Nullable<long> _Origincontractid;

        private System.Nullable<long> _Ndsalgorithmid;

        private System.Nullable<long> _Prepaymentndsalgorithmid;

        private long _Contractstateid = -1;

        private System.Nullable<long> _Currencymeasureid;

        private System.Nullable<decimal> _Price;

        private System.Nullable<System.DateTime> _Startat;

        private System.Nullable<System.DateTime> _Endsat;

        private System.Nullable<System.DateTime> _Appliedat;

        private System.Nullable<System.DateTime> _Approvedat;

        private string _Internalnum;

        private string _Contractornum;

        private System.Nullable<decimal> _Prepaymentsum;

        private System.Nullable<float> _Prepaymentpercent;

        private System.Nullable<long> _Ndsid;

        private System.Nullable<bool> _Isprotectability;

        private string _Subject;

        private System.Nullable<decimal> _Currencyrate;

        private System.Nullable<System.DateTime> _Ratedate;

        private string _Description;

        private System.Nullable<long> _Contractorpersonid;

        private System.Nullable<long> _Authorityid;

        private System.Nullable<int> _Prepaymentprecenttype;

        private System.Nullable<bool> _Deleted;

        private System.Nullable<int> _Agreementnum;

        private System.Nullable<bool> _Issubgeneral;

        private System.Nullable<bool> _Isgeneral;

        private System.Nullable<System.DateTime> _Brokeat;

        private System.Nullable<System.DateTime> _Outofcontrolat;

        private System.Nullable<System.DateTime> _Reallyfinishedat;

        private byte[] _Images;

        private System.Nullable<long> _Departmentid;

        private System.Nullable<int> _Delta;

        private string _Deltacomment;

        private System.Nullable<long> _Acttypeid;

        private EntitySet<Approvalprocess> _Approvalprocesses;

        private EntitySet<ContractdocFundsFact> _ContractdocFundsFacts;

        private EntitySet<Contractpayment> _Contractpayments;

        private EntitySet<Contracttrouble> _Contracttroubles;

        private EntitySet<Functionalcustomercontract> _Functionalcustomercontracts;

        private EntityRef<Enterpriseauthority> _Enterpriseauthority;

        private EntitySet<Schedulecontract> _Schedulecontracts;

        private EntityRef<Acttype> _Acttype;

        private EntitySet<Responsible> _Responsibles;

        private EntitySet<Contracttranactdoc> _Contracttranactdocs;

        private EntityRef<Contracttype> _Contracttype;

        private EntityRef<Currency> _Currency;

        private EntitySet<Contractdoc> _Contractdocs_Origincontractid;

        private EntityRef<Contractdoc> _Contractdoc_Origincontractid;

        private EntityRef<Ndsalgorithm> _Ndsalgorithm_Ndsalgorithmid;

        private EntityRef<Ndsalgorithm> _Ndsalgorithm_Prepaymentndsalgorithmid;

        private EntityRef<Nds> _Nds;

        private EntityRef<Contractstate> _Contractstate;

        private EntityRef<Currencymeasure> _Currencymeasure;

        private EntityRef<Person> _Person;

        private EntitySet<Prepayment> _Prepayments;

        private EntitySet<Contracthierarchy> _Contracthierarchies_Generalcontractdocid;

        private EntitySet<Contracthierarchy> _Contracthierarchies_Subcontractdocid;

        private EntitySet<Contractdocdocumentimage> _Contractdocdocumentimages;

        private EntitySet<Contractorcontractdoc> _Contractorcontractdocs;

        private EntityRef<Contractpricecache> _Contractpricecache;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContracttypeidChanging(System.Nullable<long> value);
        partial void OnContracttypeidChanged();
        partial void OnCurrencyidChanging(System.Nullable<long> value);
        partial void OnCurrencyidChanged();
        partial void OnOrigincontractidChanging(System.Nullable<long> value);
        partial void OnOrigincontractidChanged();
        partial void OnNdsalgorithmidChanging(System.Nullable<long> value);
        partial void OnNdsalgorithmidChanged();
        partial void OnPrepaymentndsalgorithmidChanging(System.Nullable<long> value);
        partial void OnPrepaymentndsalgorithmidChanged();
        partial void OnContractstateidChanging(long value);
        partial void OnContractstateidChanged();
        partial void OnCurrencymeasureidChanging(System.Nullable<long> value);
        partial void OnCurrencymeasureidChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnStartatChanging(System.Nullable<System.DateTime> value);
        partial void OnStartatChanged();
        partial void OnEndsatChanging(System.Nullable<System.DateTime> value);
        partial void OnEndsatChanged();
        partial void OnAppliedatChanging(System.Nullable<System.DateTime> value);
        partial void OnAppliedatChanged();
        partial void OnApprovedatChanging(System.Nullable<System.DateTime> value);
        partial void OnApprovedatChanged();
        partial void OnInternalnumChanging(string value);
        partial void OnInternalnumChanged();
        partial void OnContractornumChanging(string value);
        partial void OnContractornumChanged();
        partial void OnPrepaymentsumChanging(System.Nullable<decimal> value);
        partial void OnPrepaymentsumChanged();
        partial void OnPrepaymentpercentChanging(System.Nullable<float> value);
        partial void OnPrepaymentpercentChanged();
        partial void OnNdsidChanging(System.Nullable<long> value);
        partial void OnNdsidChanged();
        partial void OnIsprotectabilityChanging(System.Nullable<bool> value);
        partial void OnIsprotectabilityChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnCurrencyrateChanging(System.Nullable<decimal> value);
        partial void OnCurrencyrateChanged();
        partial void OnRatedateChanging(System.Nullable<System.DateTime> value);
        partial void OnRatedateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnContractorpersonidChanging(System.Nullable<long> value);
        partial void OnContractorpersonidChanged();
        partial void OnAuthorityidChanging(System.Nullable<long> value);
        partial void OnAuthorityidChanged();
        partial void OnPrepaymentprecenttypeChanging(System.Nullable<int> value);
        partial void OnPrepaymentprecenttypeChanged();
        partial void OnDeletedChanging(System.Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnAgreementnumChanging(System.Nullable<int> value);
        partial void OnAgreementnumChanged();
        partial void OnIssubgeneralChanging(System.Nullable<bool> value);
        partial void OnIssubgeneralChanged();
        partial void OnIsgeneralChanging(System.Nullable<bool> value);
        partial void OnIsgeneralChanged();
        partial void OnBrokeatChanging(System.Nullable<System.DateTime> value);
        partial void OnBrokeatChanged();
        partial void OnOutofcontrolatChanging(System.Nullable<System.DateTime> value);
        partial void OnOutofcontrolatChanged();
        partial void OnReallyfinishedatChanging(System.Nullable<System.DateTime> value);
        partial void OnReallyfinishedatChanged();
        partial void OnImagesChanging(byte[] value);
        partial void OnImagesChanged();
        partial void OnDepartmentidChanging(System.Nullable<long> value);
        partial void OnDepartmentidChanged();
        partial void OnDeltaChanging(System.Nullable<int> value);
        partial void OnDeltaChanged();
        partial void OnDeltacommentChanging(string value);
        partial void OnDeltacommentChanged();
        partial void OnActtypeidChanging(System.Nullable<long> value);
        partial void OnActtypeidChanged();
        #endregion

        public Contractdoc()
        {
            this._Approvalprocesses = new EntitySet<Approvalprocess>(new Action<Approvalprocess>(this.attach_Approvalprocesses), new Action<Approvalprocess>(this.detach_Approvalprocesses));
            this._ContractdocFundsFacts = new EntitySet<ContractdocFundsFact>(new Action<ContractdocFundsFact>(this.attach_ContractdocFundsFacts), new Action<ContractdocFundsFact>(this.detach_ContractdocFundsFacts));
            this._Contractpayments = new EntitySet<Contractpayment>(new Action<Contractpayment>(this.attach_Contractpayments), new Action<Contractpayment>(this.detach_Contractpayments));
            this._Contracttroubles = new EntitySet<Contracttrouble>(new Action<Contracttrouble>(this.attach_Contracttroubles), new Action<Contracttrouble>(this.detach_Contracttroubles));
            this._Functionalcustomercontracts = new EntitySet<Functionalcustomercontract>(new Action<Functionalcustomercontract>(this.attach_Functionalcustomercontracts), new Action<Functionalcustomercontract>(this.detach_Functionalcustomercontracts));
            this._Enterpriseauthority  = default(EntityRef<Enterpriseauthority>);
            this._Schedulecontracts = new EntitySet<Schedulecontract>(new Action<Schedulecontract>(this.attach_Schedulecontracts), new Action<Schedulecontract>(this.detach_Schedulecontracts));
            this._Acttype  = default(EntityRef<Acttype>);
            this._Responsibles = new EntitySet<Responsible>(new Action<Responsible>(this.attach_Responsibles), new Action<Responsible>(this.detach_Responsibles));
            this._Contracttranactdocs = new EntitySet<Contracttranactdoc>(new Action<Contracttranactdoc>(this.attach_Contracttranactdocs), new Action<Contracttranactdoc>(this.detach_Contracttranactdocs));
            this._Contracttype  = default(EntityRef<Contracttype>);
            this._Currency  = default(EntityRef<Currency>);
            this._Contractdocs_Origincontractid = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs_Origincontractid), new Action<Contractdoc>(this.detach_Contractdocs_Origincontractid));
            this._Contractdoc_Origincontractid  = default(EntityRef<Contractdoc>);
            this._Ndsalgorithm_Ndsalgorithmid  = default(EntityRef<Ndsalgorithm>);
            this._Ndsalgorithm_Prepaymentndsalgorithmid  = default(EntityRef<Ndsalgorithm>);
            this._Nds  = default(EntityRef<Nds>);
            this._Contractstate  = default(EntityRef<Contractstate>);
            this._Currencymeasure  = default(EntityRef<Currencymeasure>);
            this._Person  = default(EntityRef<Person>);
            this._Prepayments = new EntitySet<Prepayment>(new Action<Prepayment>(this.attach_Prepayments), new Action<Prepayment>(this.detach_Prepayments));
            this._Contracthierarchies_Generalcontractdocid = new EntitySet<Contracthierarchy>(new Action<Contracthierarchy>(this.attach_Contracthierarchies_Generalcontractdocid), new Action<Contracthierarchy>(this.detach_Contracthierarchies_Generalcontractdocid));
            this._Contracthierarchies_Subcontractdocid = new EntitySet<Contracthierarchy>(new Action<Contracthierarchy>(this.attach_Contracthierarchies_Subcontractdocid), new Action<Contracthierarchy>(this.detach_Contracthierarchies_Subcontractdocid));
            this._Contractdocdocumentimages = new EntitySet<Contractdocdocumentimage>(new Action<Contractdocdocumentimage>(this.attach_Contractdocdocumentimages), new Action<Contractdocdocumentimage>(this.detach_Contractdocdocumentimages));
            this._Contractorcontractdocs = new EntitySet<Contractorcontractdoc>(new Action<Contractorcontractdoc>(this.attach_Contractorcontractdocs), new Action<Contractorcontractdoc>(this.detach_Contractorcontractdocs));
            this._Contractpricecache  = default(EntityRef<Contractpricecache>);
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор договора
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractdoc")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._Contractpricecache.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Тип договора (напр. НИОКР)
        /// </summary>
        [Column(Name = @"CONTRACTTYPEID", Storage = "_Contracttypeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contracttypeid
        {
            get
            {
                return this._Contracttypeid;
            }
            set
            {
                if (this._Contracttypeid != value)
                {
                    if (this._Contracttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContracttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contracttypeid = value;
                    this.SendPropertyChanged("Contracttypeid");
                    this.OnContracttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на валюту договора
        /// </summary>
        [Column(Name = @"CURRENCYID", Storage = "_Currencyid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Currencyid
        {
            get
            {
                return this._Currencyid;
            }
            set
            {
                if (this._Currencyid != value)
                {
                    if (this._Currency.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencyidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyid = value;
                    this.SendPropertyChanged("Currencyid");
                    this.OnCurrencyidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на оригинальный договор (для доп. соглашений)
        /// </summary>
        [Column(Name = @"ORIGINCONTRACTID", Storage = "_Origincontractid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Origincontractid
        {
            get
            {
                return this._Origincontractid;
            }
            set
            {
                if (this._Origincontractid != value)
                {
                    if (this._Contractdoc_Origincontractid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrigincontractidChanging(value);
                    this.SendPropertyChanging();
                    this._Origincontractid = value;
                    this.SendPropertyChanged("Origincontractid");
                    this.OnOrigincontractidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на алгоритм расчёта НДС
        /// </summary>
        [Column(Name = @"NDSALGORITHMID", Storage = "_Ndsalgorithmid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithmid;
            }
            set
            {
                if (this._Ndsalgorithmid != value)
                {
                    if (this._Ndsalgorithm_Ndsalgorithmid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmid = value;
                    this.SendPropertyChanged("Ndsalgorithmid");
                    this.OnNdsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на алгоритм расчёта НДС для аванса
        /// </summary>
        [Column(Name = @"PREPAYMENTNDSALGORITHMID", Storage = "_Prepaymentndsalgorithmid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Prepaymentndsalgorithmid
        {
            get
            {
                return this._Prepaymentndsalgorithmid;
            }
            set
            {
                if (this._Prepaymentndsalgorithmid != value)
                {
                    if (this._Ndsalgorithm_Prepaymentndsalgorithmid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrepaymentndsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Prepaymentndsalgorithmid = value;
                    this.SendPropertyChanged("Prepaymentndsalgorithmid");
                    this.OnPrepaymentndsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на состояние договора
        /// </summary>
        [Column(Name = @"CONTRACTSTATEID", Storage = "_Contractstateid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractstateid
        {
            get
            {
                return this._Contractstateid;
            }
            set
            {
                if (this._Contractstateid != value)
                {
                    if (this._Contractstate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractstateidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractstateid = value;
                    this.SendPropertyChanged("Contractstateid");
                    this.OnContractstateidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на единицу измерения цены договора (напр. в тыс. руб.)
        /// </summary>
        [Column(Name = @"CURRENCYMEASUREID", Storage = "_Currencymeasureid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    if (this._Currencymeasure.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// Цена договора в заданной валюте
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата начала работ по договору
        /// </summary>
        [Column(Name = @"STARTAT", Storage = "_Startat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Startat
        {
            get
            {
                return this._Startat;
            }
            set
            {
                if (this._Startat != value)
                {
                    this.OnStartatChanging(value);
                    this.SendPropertyChanging();
                    this._Startat = value;
                    this.SendPropertyChanged("Startat");
                    this.OnStartatChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата окончания работ по договору
        /// </summary>
        [Column(Name = @"ENDSAT", Storage = "_Endsat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Endsat
        {
            get
            {
                return this._Endsat;
            }
            set
            {
                if (this._Endsat != value)
                {
                    this.OnEndsatChanging(value);
                    this.SendPropertyChanging();
                    this._Endsat = value;
                    this.SendPropertyChanged("Endsat");
                    this.OnEndsatChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата принятия договора
        /// </summary>
        [Column(Name = @"APPLIEDAT", Storage = "_Appliedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Appliedat
        {
            get
            {
                return this._Appliedat;
            }
            set
            {
                if (this._Appliedat != value)
                {
                    this.OnAppliedatChanging(value);
                    this.SendPropertyChanging();
                    this._Appliedat = value;
                    this.SendPropertyChanged("Appliedat");
                    this.OnAppliedatChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата утверждения договора
        /// </summary>
        [Column(Name = @"APPROVEDAT", Storage = "_Approvedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Approvedat
        {
            get
            {
                return this._Approvedat;
            }
            set
            {
                if (this._Approvedat != value)
                {
                    this.OnApprovedatChanging(value);
                    this.SendPropertyChanging();
                    this._Approvedat = value;
                    this.SendPropertyChanged("Approvedat");
                    this.OnApprovedatChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер договора, присвоенный заказчиком
        /// </summary>
        [Column(Name = @"INTERNALNUM", Storage = "_Internalnum", DbType = "NVARCHAR2(100) NULL")]
        public string Internalnum
        {
            get
            {
                return this._Internalnum;
            }
            set
            {
                if (this._Internalnum != value)
                {
                    this.OnInternalnumChanging(value);
                    this.SendPropertyChanging();
                    this._Internalnum = value;
                    this.SendPropertyChanged("Internalnum");
                    this.OnInternalnumChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер договора, присвоенный исполнителем
        /// </summary>
        [Column(Name = @"CONTRACTORNUM", Storage = "_Contractornum", DbType = "NVARCHAR2(100) NULL")]
        public string Contractornum
        {
            get
            {
                return this._Contractornum;
            }
            set
            {
                if (this._Contractornum != value)
                {
                    this.OnContractornumChanging(value);
                    this.SendPropertyChanging();
                    this._Contractornum = value;
                    this.SendPropertyChanged("Contractornum");
                    this.OnContractornumChanged();
                }
            }
        }

    
        /// <summary>
        /// Сумма аванса по договору (общая сумма по всем годам, аванс по годам представлен в таблице Prepaiment)
        /// </summary>
        [Column(Name = @"PREPAYMENTSUM", Storage = "_Prepaymentsum", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Prepaymentsum
        {
            get
            {
                return this._Prepaymentsum;
            }
            set
            {
                if (this._Prepaymentsum != value)
                {
                    this.OnPrepaymentsumChanging(value);
                    this.SendPropertyChanging();
                    this._Prepaymentsum = value;
                    this.SendPropertyChanged("Prepaymentsum");
                    this.OnPrepaymentsumChanged();
                }
            }
        }

    
        /// <summary>
        /// Процент аванса от суммы договора [0..100](общий по всем годам, аванс по годам представлен в таблице Prepaiment
        /// </summary>
        [Column(Name = @"PREPAYMENTPERCENT", Storage = "_Prepaymentpercent", DbType = "FLOAT(10) NULL")]
        public System.Nullable<float> Prepaymentpercent
        {
            get
            {
                return this._Prepaymentpercent;
            }
            set
            {
                if (this._Prepaymentpercent != value)
                {
                    this.OnPrepaymentpercentChanging(value);
                    this.SendPropertyChanging();
                    this._Prepaymentpercent = value;
                    this.SendPropertyChanged("Prepaymentpercent");
                    this.OnPrepaymentpercentChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на ставку НДС договора
        /// </summary>
        [Column(Name = @"NDSID", Storage = "_Ndsid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Ndsid
        {
            get
            {
                return this._Ndsid;
            }
            set
            {
                if (this._Ndsid != value)
                {
                    if (this._Nds.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNdsidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsid = value;
                    this.SendPropertyChanged("Ndsid");
                    this.OnNdsidChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак охраноспособности договора
        /// </summary>
        [Column(Name = @"ISPROTECTABILITY", Storage = "_Isprotectability", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isprotectability
        {
            get
            {
                return this._Isprotectability;
            }
            set
            {
                if (this._Isprotectability != value)
                {
                    this.OnIsprotectabilityChanging(value);
                    this.SendPropertyChanging();
                    this._Isprotectability = value;
                    this.SendPropertyChanged("Isprotectability");
                    this.OnIsprotectabilityChanged();
                }
            }
        }

    
        /// <summary>
        /// Тема договора
        /// </summary>
        [Column(Name = @"SUBJECT", Storage = "_Subject", DbType = "NVARCHAR2(2000) NULL")]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// Курс валюты по договору на дату RateDate
        /// </summary>
        [Column(Name = @"CURRENCYRATE", Storage = "_Currencyrate", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Currencyrate
        {
            get
            {
                return this._Currencyrate;
            }
            set
            {
                if (this._Currencyrate != value)
                {
                    this.OnCurrencyrateChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyrate = value;
                    this.SendPropertyChanged("Currencyrate");
                    this.OnCurrencyrateChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата для которой берётся курс валюты договора. Как правило совпадает с датой подписания договора
        /// </summary>
        [Column(Name = @"RATEDATE", Storage = "_Ratedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Ratedate
        {
            get
            {
                return this._Ratedate;
            }
            set
            {
                if (this._Ratedate != value)
                {
                    this.OnRatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Ratedate = value;
                    this.SendPropertyChanged("Ratedate");
                    this.OnRatedateChanged();
                }
            }
        }

    
        /// <summary>
        /// Дополнительные сведения о договоре
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(2000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на руководителя темы от огранизации исполнителя
        /// </summary>
        [Column(Name = @"CONTRACTORPERSONID", Storage = "_Contractorpersonid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contractorpersonid
        {
            get
            {
                return this._Contractorpersonid;
            }
            set
            {
                if (this._Contractorpersonid != value)
                {
                    if (this._Person.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractorpersonidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorpersonid = value;
                    this.SendPropertyChanged("Contractorpersonid");
                    this.OnContractorpersonidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на распоряжение по организации
        /// </summary>
        [Column(Name = @"AUTHORITYID", Storage = "_Authorityid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Authorityid
        {
            get
            {
                return this._Authorityid;
            }
            set
            {
                if (this._Authorityid != value)
                {
                    if (this._Enterpriseauthority.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAuthorityidChanging(value);
                    this.SendPropertyChanging();
                    this._Authorityid = value;
                    this.SendPropertyChanged("Authorityid");
                    this.OnAuthorityidChanged();
                }
            }
        }

    
        /// <summary>
        /// Формат ввода данных по % аванса: - от суммы договора без НДС, - от суммы договора с НДС
        /// </summary>
        [Column(Name = @"PREPAYMENTPRECENTTYPE", Storage = "_Prepaymentprecenttype", DbType = "NUMBER(2) NULL")]
        public System.Nullable<int> Prepaymentprecenttype
        {
            get
            {
                return this._Prepaymentprecenttype;
            }
            set
            {
                if (this._Prepaymentprecenttype != value)
                {
                    this.OnPrepaymentprecenttypeChanging(value);
                    this.SendPropertyChanging();
                    this._Prepaymentprecenttype = value;
                    this.SendPropertyChanged("Prepaymentprecenttype");
                    this.OnPrepaymentprecenttypeChanged();
                }
            }
        }

    
        /// <summary>
        /// Признак того, что договор удалён пользователем
        /// </summary>
        [Column(Name = @"DELETED", Storage = "_Deleted", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер соглашения к договору. Используется только в ДС в случае, если автоматически вычисленный номер ДС не подходит
        /// </summary>
        [Column(Name = @"AGREEMENTNUM", Storage = "_Agreementnum", DbType = "NUMBER(4) NULL")]
        public System.Nullable<int> Agreementnum
        {
            get
            {
                return this._Agreementnum;
            }
            set
            {
                if (this._Agreementnum != value)
                {
                    this.OnAgreementnumChanging(value);
                    this.SendPropertyChanging();
                    this._Agreementnum = value;
                    this.SendPropertyChanged("Agreementnum");
                    this.OnAgreementnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issubgeneral in the schema.
        /// </summary>
        [Column(Name = @"ISSUBGENERAL", Storage = "_Issubgeneral", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Issubgeneral
        {
            get
            {
                return this._Issubgeneral;
            }
            set
            {
                if (this._Issubgeneral != value)
                {
                    this.OnIssubgeneralChanging(value);
                    this.SendPropertyChanging();
                    this._Issubgeneral = value;
                    this.SendPropertyChanged("Issubgeneral");
                    this.OnIssubgeneralChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Isgeneral in the schema.
        /// </summary>
        [Column(Name = @"ISGENERAL", Storage = "_Isgeneral", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Isgeneral
        {
            get
            {
                return this._Isgeneral;
            }
            set
            {
                if (this._Isgeneral != value)
                {
                    this.OnIsgeneralChanging(value);
                    this.SendPropertyChanging();
                    this._Isgeneral = value;
                    this.SendPropertyChanged("Isgeneral");
                    this.OnIsgeneralChanged();
                }
            }
        }

    
        /// <summary>
        /// Разорван такого-то числа
        /// </summary>
        [Column(Name = @"BROKEAT", Storage = "_Brokeat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Brokeat
        {
            get
            {
                return this._Brokeat;
            }
            set
            {
                if (this._Brokeat != value)
                {
                    this.OnBrokeatChanging(value);
                    this.SendPropertyChanging();
                    this._Brokeat = value;
                    this.SendPropertyChanged("Brokeat");
                    this.OnBrokeatChanged();
                }
            }
        }

    
        /// <summary>
        /// Снят с контроля
        /// </summary>
        [Column(Name = @"OUTOFCONTROLAT", Storage = "_Outofcontrolat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Outofcontrolat
        {
            get
            {
                return this._Outofcontrolat;
            }
            set
            {
                if (this._Outofcontrolat != value)
                {
                    this.OnOutofcontrolatChanging(value);
                    this.SendPropertyChanging();
                    this._Outofcontrolat = value;
                    this.SendPropertyChanged("Outofcontrolat");
                    this.OnOutofcontrolatChanged();
                }
            }
        }

    
        /// <summary>
        /// Когда закончен на самом деле
        /// </summary>
        [Column(Name = @"REALLYFINISHEDAT", Storage = "_Reallyfinishedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Reallyfinishedat
        {
            get
            {
                return this._Reallyfinishedat;
            }
            set
            {
                if (this._Reallyfinishedat != value)
                {
                    this.OnReallyfinishedatChanging(value);
                    this.SendPropertyChanging();
                    this._Reallyfinishedat = value;
                    this.SendPropertyChanged("Reallyfinishedat");
                    this.OnReallyfinishedatChanged();
                }
            }
        }

    
        /// <summary>
        /// Образ пакета документов договора. Весь пакет документов сохраняется в виде одного архива формата ZIP
        /// </summary>
        [Column(Name = @"IMAGES", Storage = "_Images", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Images
        {
            get
            {
                return this._Images;
            }
            set
            {
                if (this._Images != value)
                {
                    this.OnImagesChanging(value);
                    this.SendPropertyChanging();
                    this._Images = value;
                    this.SendPropertyChanged("Images");
                    this.OnImagesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departmentid in the schema.
        /// </summary>
        [Column(Name = @"DEPARTMENTID", Storage = "_Departmentid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Departmentid
        {
            get
            {
                return this._Departmentid;
            }
            set
            {
                if (this._Departmentid != value)
                {
                    this.OnDepartmentidChanging(value);
                    this.SendPropertyChanging();
                    this._Departmentid = value;
                    this.SendPropertyChanged("Departmentid");
                    this.OnDepartmentidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Delta in the schema.
        /// </summary>
        [Column(Name = @"DELTA", Storage = "_Delta", DbType = "NUMBER(8) NULL")]
        public System.Nullable<int> Delta
        {
            get
            {
                return this._Delta;
            }
            set
            {
                if (this._Delta != value)
                {
                    this.OnDeltaChanging(value);
                    this.SendPropertyChanging();
                    this._Delta = value;
                    this.SendPropertyChanged("Delta");
                    this.OnDeltaChanged();
                }
            }
        }

    
        /// <summary>
        /// Примечание к договору с открытой датой
        /// </summary>
        [Column(Name = @"DELTACOMMENT", Storage = "_Deltacomment", DbType = "NVARCHAR2(2000) NULL")]
        public string Deltacomment
        {
            get
            {
                return this._Deltacomment;
            }
            set
            {
                if (this._Deltacomment != value)
                {
                    this.OnDeltacommentChanging(value);
                    this.SendPropertyChanging();
                    this._Deltacomment = value;
                    this.SendPropertyChanged("Deltacomment");
                    this.OnDeltacommentChanged();
                }
            }
        }

    
        /// <summary>
        /// Тип акта
        /// </summary>
        [Column(Name = @"ACTTYPEID", Storage = "_Acttypeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Acttypeid
        {
            get
            {
                return this._Acttypeid;
            }
            set
            {
                if (this._Acttypeid != value)
                {
                    if (this._Acttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnActtypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Acttypeid = value;
                    this.SendPropertyChanged("Acttypeid");
                    this.OnActtypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvalprocesses in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Approvalprocess", Storage="_Approvalprocesses", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Approvalprocess> Approvalprocesses
        {
            get
            {
                return this._Approvalprocesses;
            }
            set
            {
                this._Approvalprocesses.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ContractdocFundsFacts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_ContractdocFundsFact", Storage="_ContractdocFundsFacts", OtherKey="Contractdocid")]
        public EntitySet<ContractdocFundsFact> ContractdocFundsFacts
        {
            get
            {
                return this._ContractdocFundsFacts;
            }
            set
            {
                this._ContractdocFundsFacts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractpayments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractpayment", Storage="_Contractpayments", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Contractpayment> Contractpayments
        {
            get
            {
                return this._Contractpayments;
            }
            set
            {
                this._Contractpayments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttroubles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contracttrouble", Storage="_Contracttroubles", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Contracttrouble> Contracttroubles
        {
            get
            {
                return this._Contracttroubles;
            }
            set
            {
                this._Contracttroubles.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomercontracts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Functionalcustomercontract", Storage="_Functionalcustomercontracts", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Functionalcustomercontract> Functionalcustomercontracts
        {
            get
            {
                return this._Functionalcustomercontracts;
            }
            set
            {
                this._Functionalcustomercontracts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Enterpriseauthority in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Enterpriseauthority_Contractdoc", Storage="_Enterpriseauthority", ThisKey="Authorityid", IsForeignKey=true)]
        public Enterpriseauthority Enterpriseauthority
        {
            get
            {
                return this._Enterpriseauthority.Entity;
            }
            set
            {
                Enterpriseauthority previousValue = this._Enterpriseauthority.Entity;
                if ((previousValue != value) || (this._Enterpriseauthority.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Enterpriseauthority.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Enterpriseauthority.Entity = value;
                    if (value != null)
                    {
                        this._Authorityid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Authorityid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Enterpriseauthority");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedulecontracts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Schedulecontract", Storage="_Schedulecontracts", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Schedulecontract> Schedulecontracts
        {
            get
            {
                return this._Schedulecontracts;
            }
            set
            {
                this._Schedulecontracts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Acttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Acttype_Contractdoc", Storage="_Acttype", ThisKey="Acttypeid", IsForeignKey=true)]
        public Acttype Acttype
        {
            get
            {
                return this._Acttype.Entity;
            }
            set
            {
                Acttype previousValue = this._Acttype.Entity;
                if ((previousValue != value) || (this._Acttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Acttype.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Acttype.Entity = value;
                    if (value != null)
                    {
                        this._Acttypeid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Acttypeid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Acttype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsibles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Responsible", Storage="_Responsibles", OtherKey="Contractdocid")]
        public EntitySet<Responsible> Responsibles
        {
            get
            {
                return this._Responsibles;
            }
            set
            {
                this._Responsibles.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttranactdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contracttranactdoc", Storage="_Contracttranactdocs", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Contracttranactdoc> Contracttranactdocs
        {
            get
            {
                return this._Contracttranactdocs;
            }
            set
            {
                this._Contracttranactdocs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Contractdoc", Storage="_Contracttype", ThisKey="Contracttypeid", IsForeignKey=true)]
        public Contracttype Contracttype
        {
            get
            {
                return this._Contracttype.Entity;
            }
            set
            {
                Contracttype previousValue = this._Contracttype.Entity;
                if ((previousValue != value) || (this._Contracttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contracttype.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Contracttype.Entity = value;
                    if (value != null)
                    {
                        this._Contracttypeid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Contracttypeid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contracttype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currency_Contractdoc", Storage="_Currency", ThisKey="Currencyid", IsForeignKey=true)]
        public Currency Currency
        {
            get
            {
                return this._Currency.Entity;
            }
            set
            {
                Currency previousValue = this._Currency.Entity;
                if ((previousValue != value) || (this._Currency.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currency.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Currency.Entity = value;
                    if (value != null)
                    {
                        this._Currencyid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Currencyid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Currency");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs_Origincontractid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractdoc", Storage="_Contractdocs_Origincontractid", OtherKey="Origincontractid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs_Origincontractid
        {
            get
            {
                return this._Contractdocs_Origincontractid;
            }
            set
            {
                this._Contractdocs_Origincontractid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc_Origincontractid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractdoc", Storage="_Contractdoc_Origincontractid", ThisKey="Origincontractid", IsForeignKey=true)]
        public Contractdoc Contractdoc_Origincontractid
        {
            get
            {
                return this._Contractdoc_Origincontractid.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc_Origincontractid.Entity;
                if ((previousValue != value) || (this._Contractdoc_Origincontractid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc_Origincontractid.Entity = null;
                        previousValue.Contractdocs_Origincontractid.Remove(this);
                    }
                    this._Contractdoc_Origincontractid.Entity = value;
                    if (value != null)
                    {
                        this._Origincontractid = value.Id;
                        value.Contractdocs_Origincontractid.Add(this);
                    }
                    else
                    {
                        this._Origincontractid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contractdoc_Origincontractid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithm_Ndsalgorithmid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Id_Contractdoc_Ndsalgorithmid", Storage="_Ndsalgorithm_Ndsalgorithmid", ThisKey="Ndsalgorithmid", IsForeignKey=true)]
        public Ndsalgorithm Ndsalgorithm_Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithm_Ndsalgorithmid.Entity;
            }
            set
            {
                Ndsalgorithm previousValue = this._Ndsalgorithm_Ndsalgorithmid.Entity;
                if ((previousValue != value) || (this._Ndsalgorithm_Ndsalgorithmid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ndsalgorithm_Ndsalgorithmid.Entity = null;
                        previousValue.Contractdocs_Ndsalgorithmid.Remove(this);
                    }
                    this._Ndsalgorithm_Ndsalgorithmid.Entity = value;
                    if (value != null)
                    {
                        this._Ndsalgorithmid = value.Id;
                        value.Contractdocs_Ndsalgorithmid.Add(this);
                    }
                    else
                    {
                        this._Ndsalgorithmid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Ndsalgorithm_Ndsalgorithmid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithm_Prepaymentndsalgorithmid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Id_Contractdoc_Prepaymentndsalgorithmid", Storage="_Ndsalgorithm_Prepaymentndsalgorithmid", ThisKey="Prepaymentndsalgorithmid", IsForeignKey=true)]
        public Ndsalgorithm Ndsalgorithm_Prepaymentndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithm_Prepaymentndsalgorithmid.Entity;
            }
            set
            {
                Ndsalgorithm previousValue = this._Ndsalgorithm_Prepaymentndsalgorithmid.Entity;
                if ((previousValue != value) || (this._Ndsalgorithm_Prepaymentndsalgorithmid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ndsalgorithm_Prepaymentndsalgorithmid.Entity = null;
                        previousValue.Contractdocs_Prepaymentndsalgorithmid.Remove(this);
                    }
                    this._Ndsalgorithm_Prepaymentndsalgorithmid.Entity = value;
                    if (value != null)
                    {
                        this._Prepaymentndsalgorithmid = value.Id;
                        value.Contractdocs_Prepaymentndsalgorithmid.Add(this);
                    }
                    else
                    {
                        this._Prepaymentndsalgorithmid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Ndsalgorithm_Prepaymentndsalgorithmid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Contractdoc", Storage="_Nds", ThisKey="Ndsid", IsForeignKey=true)]
        public Nds Nds
        {
            get
            {
                return this._Nds.Entity;
            }
            set
            {
                Nds previousValue = this._Nds.Entity;
                if ((previousValue != value) || (this._Nds.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Nds.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Nds.Entity = value;
                    if (value != null)
                    {
                        this._Ndsid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Ndsid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Nds");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractstate in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractstate_Contractdoc", Storage="_Contractstate", ThisKey="Contractstateid", IsForeignKey=true)]
        public Contractstate Contractstate
        {
            get
            {
                return this._Contractstate.Entity;
            }
            set
            {
                Contractstate previousValue = this._Contractstate.Entity;
                if ((previousValue != value) || (this._Contractstate.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractstate.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Contractstate.Entity = value;
                    if (value != null)
                    {
                        this._Contractstateid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Contractstateid = default(long);
                    }
                    this.SendPropertyChanged("Contractstate");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Contractdoc", Storage="_Currencymeasure", ThisKey="Currencymeasureid", IsForeignKey=true)]
        public Currencymeasure Currencymeasure
        {
            get
            {
                return this._Currencymeasure.Entity;
            }
            set
            {
                Currencymeasure previousValue = this._Currencymeasure.Entity;
                if ((previousValue != value) || (this._Currencymeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currencymeasure.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Currencymeasure.Entity = value;
                    if (value != null)
                    {
                        this._Currencymeasureid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Currencymeasureid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Currencymeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Person in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Contractdoc", Storage="_Person", ThisKey="Contractorpersonid", IsForeignKey=true)]
        public Person Person
        {
            get
            {
                return this._Person.Entity;
            }
            set
            {
                Person previousValue = this._Person.Entity;
                if ((previousValue != value) || (this._Person.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Person.Entity = null;
                        previousValue.Contractdocs.Remove(this);
                    }
                    this._Person.Entity = value;
                    if (value != null)
                    {
                        this._Contractorpersonid = value.Id;
                        value.Contractdocs.Add(this);
                    }
                    else
                    {
                        this._Contractorpersonid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Person");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prepayments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Prepayment", Storage="_Prepayments", OtherKey="Contractdocid", DeleteRule="CASCADE")]
        public EntitySet<Prepayment> Prepayments
        {
            get
            {
                return this._Prepayments;
            }
            set
            {
                this._Prepayments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracthierarchies_Generalcontractdocid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Id_Contracthierarchy_Generalcontractdocid", Storage="_Contracthierarchies_Generalcontractdocid", OtherKey="Generalcontractdocid", DeleteRule="CASCADE")]
        public EntitySet<Contracthierarchy> Contracthierarchies_Generalcontractdocid
        {
            get
            {
                return this._Contracthierarchies_Generalcontractdocid;
            }
            set
            {
                this._Contracthierarchies_Generalcontractdocid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contracthierarchies_Subcontractdocid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Id_Contracthierarchy_Subcontractdocid", Storage="_Contracthierarchies_Subcontractdocid", OtherKey="Subcontractdocid", DeleteRule="CASCADE")]
        public EntitySet<Contracthierarchy> Contracthierarchies_Subcontractdocid
        {
            get
            {
                return this._Contracthierarchies_Subcontractdocid;
            }
            set
            {
                this._Contracthierarchies_Subcontractdocid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocdocumentimages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractdocdocumentimage", Storage="_Contractdocdocumentimages", OtherKey="Contractdocid")]
        public EntitySet<Contractdocdocumentimage> Contractdocdocumentimages
        {
            get
            {
                return this._Contractdocdocumentimages;
            }
            set
            {
                this._Contractdocdocumentimages.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorcontractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractorcontractdoc", Storage="_Contractorcontractdocs", OtherKey="Contractdocid")]
        public EntitySet<Contractorcontractdoc> Contractorcontractdocs
        {
            get
            {
                return this._Contractorcontractdocs;
            }
            set
            {
                this._Contractorcontractdocs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractpricecache in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractpricecache", Storage="_Contractpricecache", ThisKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public Contractpricecache Contractpricecache
        {
            get
            {
                return this._Contractpricecache.Entity;
            }
            set
            {
                Contractpricecache previousValue = this._Contractpricecache.Entity;
                if ((previousValue != value) || (this._Contractpricecache.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractpricecache.Entity = null;
                        previousValue.Contractdoc = null;
                    }
                    this._Contractpricecache.Entity = value;
                    if (value != null)
                    {
                        value.Contractdoc = this;
                    }
                    this.SendPropertyChanged("Contractpricecache");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Contractdoc = this;
        }
    
        private void detach_Approvalprocesses(Approvalprocess entity)
        {
            this.SendPropertyChanging("Approvalprocesses");
            entity.Contractdoc = null;
        }

        private void attach_ContractdocFundsFacts(ContractdocFundsFact entity)
        {
            this.SendPropertyChanging("ContractdocFundsFacts");
            entity.Contractdoc = this;
        }
    
        private void detach_ContractdocFundsFacts(ContractdocFundsFact entity)
        {
            this.SendPropertyChanging("ContractdocFundsFacts");
            entity.Contractdoc = null;
        }

        private void attach_Contractpayments(Contractpayment entity)
        {
            this.SendPropertyChanging("Contractpayments");
            entity.Contractdoc = this;
        }
    
        private void detach_Contractpayments(Contractpayment entity)
        {
            this.SendPropertyChanging("Contractpayments");
            entity.Contractdoc = null;
        }

        private void attach_Contracttroubles(Contracttrouble entity)
        {
            this.SendPropertyChanging("Contracttroubles");
            entity.Contractdoc = this;
        }
    
        private void detach_Contracttroubles(Contracttrouble entity)
        {
            this.SendPropertyChanging("Contracttroubles");
            entity.Contractdoc = null;
        }

        private void attach_Functionalcustomercontracts(Functionalcustomercontract entity)
        {
            this.SendPropertyChanging("Functionalcustomercontracts");
            entity.Contractdoc = this;
        }
    
        private void detach_Functionalcustomercontracts(Functionalcustomercontract entity)
        {
            this.SendPropertyChanging("Functionalcustomercontracts");
            entity.Contractdoc = null;
        }

        private void attach_Schedulecontracts(Schedulecontract entity)
        {
            this.SendPropertyChanging("Schedulecontracts");
            entity.Contractdoc = this;
        }
    
        private void detach_Schedulecontracts(Schedulecontract entity)
        {
            this.SendPropertyChanging("Schedulecontracts");
            entity.Contractdoc = null;
        }

        private void attach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Contractdoc = this;
        }
    
        private void detach_Responsibles(Responsible entity)
        {
            this.SendPropertyChanging("Responsibles");
            entity.Contractdoc = null;
        }

        private void attach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Contractdoc = this;
        }
    
        private void detach_Contracttranactdocs(Contracttranactdoc entity)
        {
            this.SendPropertyChanging("Contracttranactdocs");
            entity.Contractdoc = null;
        }

        private void attach_Contractdocs_Origincontractid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Origincontractid");
            entity.Contractdoc_Origincontractid = this;
        }
    
        private void detach_Contractdocs_Origincontractid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Origincontractid");
            entity.Contractdoc_Origincontractid = null;
        }

        private void attach_Prepayments(Prepayment entity)
        {
            this.SendPropertyChanging("Prepayments");
            entity.Contractdoc = this;
        }
    
        private void detach_Prepayments(Prepayment entity)
        {
            this.SendPropertyChanging("Prepayments");
            entity.Contractdoc = null;
        }

        private void attach_Contracthierarchies_Generalcontractdocid(Contracthierarchy entity)
        {
            this.SendPropertyChanging("Contracthierarchies_Generalcontractdocid");
            entity.Contractdoc_Generalcontractdocid = this;
        }
    
        private void detach_Contracthierarchies_Generalcontractdocid(Contracthierarchy entity)
        {
            this.SendPropertyChanging("Contracthierarchies_Generalcontractdocid");
            entity.Contractdoc_Generalcontractdocid = null;
        }

        private void attach_Contracthierarchies_Subcontractdocid(Contracthierarchy entity)
        {
            this.SendPropertyChanging("Contracthierarchies_Subcontractdocid");
            entity.Contractdoc_Subcontractdocid = this;
        }
    
        private void detach_Contracthierarchies_Subcontractdocid(Contracthierarchy entity)
        {
            this.SendPropertyChanging("Contracthierarchies_Subcontractdocid");
            entity.Contractdoc_Subcontractdocid = null;
        }

        private void attach_Contractdocdocumentimages(Contractdocdocumentimage entity)
        {
            this.SendPropertyChanging("Contractdocdocumentimages");
            entity.Contractdoc = this;
        }
    
        private void detach_Contractdocdocumentimages(Contractdocdocumentimage entity)
        {
            this.SendPropertyChanging("Contractdocdocumentimages");
            entity.Contractdoc = null;
        }

        private void attach_Contractorcontractdocs(Contractorcontractdoc entity)
        {
            this.SendPropertyChanging("Contractorcontractdocs");
            entity.Contractdoc = this;
        }
    
        private void detach_Contractorcontractdocs(Contractorcontractdoc entity)
        {
            this.SendPropertyChanging("Contractorcontractdocs");
            entity.Contractdoc = null;
        }
    }

    /// <summary>
    /// Тип договора (сп)
    /// </summary>
    [Table(Name = @"UD.CONTRACTTYPE")]
    public partial class Contracttype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private System.Nullable<int> _Reportorder;

        private EntitySet<Responsiblefororder> _Responsiblefororders;

        private EntitySet<Reportgrouping> _Reportgroupings_Contracttypeid;

        private EntitySet<Reportgrouping> _Reportgroupings_Contracttypesubgroupid;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnReportorderChanging(System.Nullable<int> value);
        partial void OnReportorderChanged();
        #endregion

        public Contracttype()
        {
            this._Responsiblefororders = new EntitySet<Responsiblefororder>(new Action<Responsiblefororder>(this.attach_Responsiblefororders), new Action<Responsiblefororder>(this.detach_Responsiblefororders));
            this._Reportgroupings_Contracttypeid = new EntitySet<Reportgrouping>(new Action<Reportgrouping>(this.attach_Reportgroupings_Contracttypeid), new Action<Reportgrouping>(this.detach_Reportgroupings_Contracttypeid));
            this._Reportgroupings_Contracttypesubgroupid = new EntitySet<Reportgrouping>(new Action<Reportgrouping>(this.attach_Reportgroupings_Contracttypesubgroupid), new Action<Reportgrouping>(this.detach_Reportgroupings_Contracttypesubgroupid));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contracttype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. НИОКР)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(200) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Определяет порядок следования группы в отчётах
        /// </summary>
        [Column(Name = @"REPORTORDER", Storage = "_Reportorder", DbType = "NUMBER(3) NULL")]
        public System.Nullable<int> Reportorder
        {
            get
            {
                return this._Reportorder;
            }
            set
            {
                if (this._Reportorder != value)
                {
                    this.OnReportorderChanging(value);
                    this.SendPropertyChanging();
                    this._Reportorder = value;
                    this.SendPropertyChanged("Reportorder");
                    this.OnReportorderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Responsiblefororders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Responsiblefororder", Storage="_Responsiblefororders", OtherKey="Contracttypeid")]
        public EntitySet<Responsiblefororder> Responsiblefororders
        {
            get
            {
                return this._Responsiblefororders;
            }
            set
            {
                this._Responsiblefororders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Reportgroupings_Contracttypeid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Id_Reportgrouping_Contracttypeid", Storage="_Reportgroupings_Contracttypeid", OtherKey="Contracttypeid")]
        public EntitySet<Reportgrouping> Reportgroupings_Contracttypeid
        {
            get
            {
                return this._Reportgroupings_Contracttypeid;
            }
            set
            {
                this._Reportgroupings_Contracttypeid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Reportgroupings_Contracttypesubgroupid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Id_Reportgrouping_Contracttypesubgroupid", Storage="_Reportgroupings_Contracttypesubgroupid", OtherKey="Contracttypesubgroupid")]
        public EntitySet<Reportgrouping> Reportgroupings_Contracttypesubgroupid
        {
            get
            {
                return this._Reportgroupings_Contracttypesubgroupid;
            }
            set
            {
                this._Reportgroupings_Contracttypesubgroupid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contracttype_Contractdoc", Storage="_Contractdocs", OtherKey="Contracttypeid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Contracttype = this;
        }
    
        private void detach_Responsiblefororders(Responsiblefororder entity)
        {
            this.SendPropertyChanging("Responsiblefororders");
            entity.Contracttype = null;
        }

        private void attach_Reportgroupings_Contracttypeid(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings_Contracttypeid");
            entity.Contracttype_Contracttypeid = this;
        }
    
        private void detach_Reportgroupings_Contracttypeid(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings_Contracttypeid");
            entity.Contracttype_Contracttypeid = null;
        }

        private void attach_Reportgroupings_Contracttypesubgroupid(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings_Contracttypesubgroupid");
            entity.Contracttype_Contracttypesubgroupid = this;
        }
    
        private void detach_Reportgroupings_Contracttypesubgroupid(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings_Contracttypesubgroupid");
            entity.Contracttype_Contracttypesubgroupid = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Contracttype = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Contracttype = null;
        }
    }

    /// <summary>
    /// Валюта (сп)
    /// </summary>
    [Table(Name = @"UD.CURRENCY")]
    public partial class Currency : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Culture;

        private string _Currencyi;

        private string _Currencyr;

        private string _Currencym;

        private string _Smalli;

        private string _Smallr;

        private string _Smallm;

        private string _Highsmallname;

        private string _Lowsmallname;

        private string _Code;

        private EntitySet<Act> _Acts;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCultureChanging(string value);
        partial void OnCultureChanged();
        partial void OnCurrencyiChanging(string value);
        partial void OnCurrencyiChanged();
        partial void OnCurrencyrChanging(string value);
        partial void OnCurrencyrChanged();
        partial void OnCurrencymChanging(string value);
        partial void OnCurrencymChanged();
        partial void OnSmalliChanging(string value);
        partial void OnSmalliChanged();
        partial void OnSmallrChanging(string value);
        partial void OnSmallrChanged();
        partial void OnSmallmChanging(string value);
        partial void OnSmallmChanged();
        partial void OnHighsmallnameChanging(string value);
        partial void OnHighsmallnameChanged();
        partial void OnLowsmallnameChanging(string value);
        partial void OnLowsmallnameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        #endregion

        public Currency()
        {
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Currency")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. Рубль)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Культура (используется в приложении для отобржения суммы прописью) (напр. ru-ru)
        /// </summary>
        [Column(Name = @"CULTURE", Storage = "_Culture", CanBeNull = false, DbType = "NVARCHAR2(10) NOT NULL")]
        public string Culture
        {
            get
            {
                return this._Culture;
            }
            set
            {
                if (this._Culture != value)
                {
                    this.OnCultureChanging(value);
                    this.SendPropertyChanging();
                    this._Culture = value;
                    this.SendPropertyChanged("Culture");
                    this.OnCultureChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение валюты в именительном падеже единственном числе (напр. рубль)
        /// </summary>
        [Column(Name = @"CURRENCYI", Storage = "_Currencyi", DbType = "NVARCHAR2(20) NULL")]
        public string Currencyi
        {
            get
            {
                return this._Currencyi;
            }
            set
            {
                if (this._Currencyi != value)
                {
                    this.OnCurrencyiChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyi = value;
                    this.SendPropertyChanged("Currencyi");
                    this.OnCurrencyiChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение валюты в родительном падеже единственном числе (напр. рубля)
        /// </summary>
        [Column(Name = @"CURRENCYR", Storage = "_Currencyr", DbType = "NVARCHAR2(20) NULL")]
        public string Currencyr
        {
            get
            {
                return this._Currencyr;
            }
            set
            {
                if (this._Currencyr != value)
                {
                    this.OnCurrencyrChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyr = value;
                    this.SendPropertyChanged("Currencyr");
                    this.OnCurrencyrChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение валюты в родительном падеже множественном числе (напр. рублей)
        /// </summary>
        [Column(Name = @"CURRENCYM", Storage = "_Currencym", DbType = "NVARCHAR2(20) NULL")]
        public string Currencym
        {
            get
            {
                return this._Currencym;
            }
            set
            {
                if (this._Currencym != value)
                {
                    this.OnCurrencymChanging(value);
                    this.SendPropertyChanging();
                    this._Currencym = value;
                    this.SendPropertyChanged("Currencym");
                    this.OnCurrencymChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение минимальной единицы валюты в именительном падеже единственном числе (напр. копейка)
        /// </summary>
        [Column(Name = @"SMALLI", Storage = "_Smalli", DbType = "NVARCHAR2(20) NULL")]
        public string Smalli
        {
            get
            {
                return this._Smalli;
            }
            set
            {
                if (this._Smalli != value)
                {
                    this.OnSmalliChanging(value);
                    this.SendPropertyChanging();
                    this._Smalli = value;
                    this.SendPropertyChanged("Smalli");
                    this.OnSmalliChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение минимальной единицы валюты в родительном падеже единственном числе (напр. копейки)
        /// </summary>
        [Column(Name = @"SMALLR", Storage = "_Smallr", DbType = "NVARCHAR2(20) NULL")]
        public string Smallr
        {
            get
            {
                return this._Smallr;
            }
            set
            {
                if (this._Smallr != value)
                {
                    this.OnSmallrChanging(value);
                    this.SendPropertyChanging();
                    this._Smallr = value;
                    this.SendPropertyChanged("Smallr");
                    this.OnSmallrChanged();
                }
            }
        }

    
        /// <summary>
        /// Склонение минимальной единицы валюты в родительном падеже единственном числе (напр. копеек)
        /// </summary>
        [Column(Name = @"SMALLM", Storage = "_Smallm", DbType = "NVARCHAR2(20) NULL")]
        public string Smallm
        {
            get
            {
                return this._Smallm;
            }
            set
            {
                if (this._Smallm != value)
                {
                    this.OnSmallmChanging(value);
                    this.SendPropertyChanging();
                    this._Smallm = value;
                    this.SendPropertyChanged("Smallm");
                    this.OnSmallmChanged();
                }
            }
        }

    
        /// <summary>
        /// Аббревиатура единицы валюты (напр. рубл.)
        /// </summary>
        [Column(Name = @"HIGHSMALLNAME", Storage = "_Highsmallname", DbType = "NVARCHAR2(20) NULL")]
        public string Highsmallname
        {
            get
            {
                return this._Highsmallname;
            }
            set
            {
                if (this._Highsmallname != value)
                {
                    this.OnHighsmallnameChanging(value);
                    this.SendPropertyChanging();
                    this._Highsmallname = value;
                    this.SendPropertyChanged("Highsmallname");
                    this.OnHighsmallnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Аббревиатура минимальной единицы валюты (напр. коп.)
        /// </summary>
        [Column(Name = @"LOWSMALLNAME", Storage = "_Lowsmallname", DbType = "NVARCHAR2(20) NULL")]
        public string Lowsmallname
        {
            get
            {
                return this._Lowsmallname;
            }
            set
            {
                if (this._Lowsmallname != value)
                {
                    this.OnLowsmallnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lowsmallname = value;
                    this.SendPropertyChanged("Lowsmallname");
                    this.OnLowsmallnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Код единицы валюты (напр. RUB)
        /// </summary>
        [Column(Name = @"CODE", Storage = "_Code", DbType = "VARCHAR2(10 CHAR) NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currency_Act", Storage="_Acts", OtherKey="Currencyid")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currency_Contractdoc", Storage="_Contractdocs", OtherKey="Currencyid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Currency = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Currency = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Currency = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Currency = null;
        }
    }

    /// <summary>
    /// Алгоритм НДС (сп)
    /// </summary>
    [Table(Name = @"UD.NDSALGORITHM")]
    public partial class Ndsalgorithm : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private string _Pricetooltip;

        private EntitySet<Stage> _Stages;

        private EntitySet<Act> _Acts;

        private EntitySet<Contractdoc> _Contractdocs_Ndsalgorithmid;

        private EntitySet<Contractdoc> _Contractdocs_Prepaymentndsalgorithmid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPricetooltipChanging(string value);
        partial void OnPricetooltipChanged();
        #endregion

        public Ndsalgorithm()
        {
            this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractdocs_Ndsalgorithmid = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs_Ndsalgorithmid), new Action<Contractdoc>(this.detach_Contractdocs_Ndsalgorithmid));
            this._Contractdocs_Prepaymentndsalgorithmid = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs_Prepaymentndsalgorithmid), new Action<Contractdoc>(this.detach_Contractdocs_Prepaymentndsalgorithmid));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Ndsalgorithm")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. без НДС)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pricetooltip in the schema.
        /// </summary>
        [Column(Name = @"PRICETOOLTIP", Storage = "_Pricetooltip", DbType = "NVARCHAR2(100) NULL")]
        public string Pricetooltip
        {
            get
            {
                return this._Pricetooltip;
            }
            set
            {
                if (this._Pricetooltip != value)
                {
                    this.OnPricetooltipChanging(value);
                    this.SendPropertyChanging();
                    this._Pricetooltip = value;
                    this.SendPropertyChanged("Pricetooltip");
                    this.OnPricetooltipChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Stage", Storage="_Stages", OtherKey="Ndsalgorithmid", DeleteRule="CASCADE")]
        public EntitySet<Stage> Stages
        {
            get
            {
                return this._Stages;
            }
            set
            {
                this._Stages.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Act", Storage="_Acts", OtherKey="Ndsalgorithmid")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs_Ndsalgorithmid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Id_Contractdoc_Ndsalgorithmid", Storage="_Contractdocs_Ndsalgorithmid", OtherKey="Ndsalgorithmid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs_Ndsalgorithmid
        {
            get
            {
                return this._Contractdocs_Ndsalgorithmid;
            }
            set
            {
                this._Contractdocs_Ndsalgorithmid.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs_Prepaymentndsalgorithmid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ndsalgorithm_Id_Contractdoc_Prepaymentndsalgorithmid", Storage="_Contractdocs_Prepaymentndsalgorithmid", OtherKey="Prepaymentndsalgorithmid")]
        public EntitySet<Contractdoc> Contractdocs_Prepaymentndsalgorithmid
        {
            get
            {
                return this._Contractdocs_Prepaymentndsalgorithmid;
            }
            set
            {
                this._Contractdocs_Prepaymentndsalgorithmid.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Ndsalgorithm = this;
        }
    
        private void detach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Ndsalgorithm = null;
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Ndsalgorithm = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Ndsalgorithm = null;
        }

        private void attach_Contractdocs_Ndsalgorithmid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Ndsalgorithmid");
            entity.Ndsalgorithm_Ndsalgorithmid = this;
        }
    
        private void detach_Contractdocs_Ndsalgorithmid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Ndsalgorithmid");
            entity.Ndsalgorithm_Ndsalgorithmid = null;
        }

        private void attach_Contractdocs_Prepaymentndsalgorithmid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Prepaymentndsalgorithmid");
            entity.Ndsalgorithm_Prepaymentndsalgorithmid = this;
        }
    
        private void detach_Contractdocs_Prepaymentndsalgorithmid(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs_Prepaymentndsalgorithmid");
            entity.Ndsalgorithm_Prepaymentndsalgorithmid = null;
        }
    }

    /// <summary>
    /// Предоплата по годам
    /// </summary>
    [Table(Name = @"UD.PREPAYMENT")]
    public partial class Prepayment : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractdocid;

        private decimal _Sum;

        private float _Percentvalue;

        private int _Year;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        partial void OnSumChanging(decimal value);
        partial void OnSumChanged();
        partial void OnPercentvalueChanging(float value);
        partial void OnPercentvalueChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        #endregion

        public Prepayment()
        {
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Prepayment")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на контракт
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// Сумма аванса
        /// </summary>
        [Column(Name = @"SUM", Storage = "_Sum", CanBeNull = false, DbType = "NUMBER(18,2) NOT NULL")]
        public decimal Sum
        {
            get
            {
                return this._Sum;
            }
            set
            {
                if (this._Sum != value)
                {
                    this.OnSumChanging(value);
                    this.SendPropertyChanging();
                    this._Sum = value;
                    this.SendPropertyChanged("Sum");
                    this.OnSumChanged();
                }
            }
        }

    
        /// <summary>
        /// Процент от общей стоимости договора (0..100)
        /// </summary>
        [Column(Name = @"PERCENTVALUE", Storage = "_Percentvalue", CanBeNull = false, DbType = "FLOAT(10) NOT NULL")]
        public float Percentvalue
        {
            get
            {
                return this._Percentvalue;
            }
            set
            {
                if (this._Percentvalue != value)
                {
                    this.OnPercentvalueChanging(value);
                    this.SendPropertyChanging();
                    this._Percentvalue = value;
                    this.SendPropertyChanged("Percentvalue");
                    this.OnPercentvalueChanged();
                }
            }
        }

    
        /// <summary>
        /// Год, в который выдан аванс
        /// </summary>
        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(4) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Prepayment", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Prepayments.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Prepayments.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Представитель организации (Гапрома, дочерних организаций, сторонних предсприятий, кроме сотрудников Промгаза)
    /// </summary>
    [Table(Name = @"UD.PERSON")]
    public partial class Person : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<long> _Degreeid;

        private bool _Iscontractheadauthority;

        private bool _Isactsignauthority;

        private bool _Isvalid;

        private string _Familyname;

        private string _Firstname;

        private string _Middlename;

        private System.Nullable<bool> _Sex;

        private System.Nullable<long> _Contractorpositionid;

        private EntityRef<Contractorposition> _Contractorposition;

        private EntitySet<Funccustomerperson> _Funccustomerpersons;

        private EntitySet<Contractdoc> _Contractdocs;

        private EntityRef<Degree> _Degree;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDegreeidChanging(System.Nullable<long> value);
        partial void OnDegreeidChanged();
        partial void OnIscontractheadauthorityChanging(bool value);
        partial void OnIscontractheadauthorityChanged();
        partial void OnIsactsignauthorityChanging(bool value);
        partial void OnIsactsignauthorityChanged();
        partial void OnIsvalidChanging(bool value);
        partial void OnIsvalidChanged();
        partial void OnFamilynameChanging(string value);
        partial void OnFamilynameChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnMiddlenameChanging(string value);
        partial void OnMiddlenameChanged();
        partial void OnSexChanging(System.Nullable<bool> value);
        partial void OnSexChanged();
        partial void OnContractorpositionidChanging(System.Nullable<long> value);
        partial void OnContractorpositionidChanged();
        #endregion

        public Person()
        {
            this._Contractorposition  = default(EntityRef<Contractorposition>);
            this._Funccustomerpersons = new EntitySet<Funccustomerperson>(new Action<Funccustomerperson>(this.attach_Funccustomerpersons), new Action<Funccustomerperson>(this.detach_Funccustomerpersons));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            this._Degree  = default(EntityRef<Degree>);
            OnCreated();
        }

    
        /// <summary>
        /// Индентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Person")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на учёную степень
        /// </summary>
        [Column(Name = @"DEGREEID", Storage = "_Degreeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Degreeid
        {
            get
            {
                return this._Degreeid;
            }
            set
            {
                if (this._Degreeid != value)
                {
                    if (this._Degree.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDegreeidChanging(value);
                    this.SendPropertyChanging();
                    this._Degreeid = value;
                    this.SendPropertyChanged("Degreeid");
                    this.OnDegreeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Имеет ли человек право подписи от первого лица
        /// </summary>
        [Column(Name = @"ISCONTRACTHEADAUTHORITY", Storage = "_Iscontractheadauthority", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool Iscontractheadauthority
        {
            get
            {
                return this._Iscontractheadauthority;
            }
            set
            {
                if (this._Iscontractheadauthority != value)
                {
                    this.OnIscontractheadauthorityChanging(value);
                    this.SendPropertyChanging();
                    this._Iscontractheadauthority = value;
                    this.SendPropertyChanged("Iscontractheadauthority");
                    this.OnIscontractheadauthorityChanged();
                }
            }
        }

    
        /// <summary>
        /// Имеет ли человек право подписи актов
        /// </summary>
        [Column(Name = @"ISACTSIGNAUTHORITY", Storage = "_Isactsignauthority", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool Isactsignauthority
        {
            get
            {
                return this._Isactsignauthority;
            }
            set
            {
                if (this._Isactsignauthority != value)
                {
                    this.OnIsactsignauthorityChanging(value);
                    this.SendPropertyChanging();
                    this._Isactsignauthority = value;
                    this.SendPropertyChanged("Isactsignauthority");
                    this.OnIsactsignauthorityChanged();
                }
            }
        }

    
        /// <summary>
        /// Являются ли данные по человеку актуальными
        /// </summary>
        [Column(Name = @"ISVALID", Storage = "_Isvalid", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool Isvalid
        {
            get
            {
                return this._Isvalid;
            }
            set
            {
                if (this._Isvalid != value)
                {
                    this.OnIsvalidChanging(value);
                    this.SendPropertyChanging();
                    this._Isvalid = value;
                    this.SendPropertyChanged("Isvalid");
                    this.OnIsvalidChanged();
                }
            }
        }

    
        /// <summary>
        /// Фамилия
        /// </summary>
        [Column(Name = @"FAMILYNAME", Storage = "_Familyname", CanBeNull = false, DbType = "NVARCHAR2(30) NOT NULL")]
        public string Familyname
        {
            get
            {
                return this._Familyname;
            }
            set
            {
                if (this._Familyname != value)
                {
                    this.OnFamilynameChanging(value);
                    this.SendPropertyChanging();
                    this._Familyname = value;
                    this.SendPropertyChanged("Familyname");
                    this.OnFamilynameChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя
        /// </summary>
        [Column(Name = @"FIRSTNAME", Storage = "_Firstname", DbType = "NVARCHAR2(30) NULL")]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Отчество
        /// </summary>
        [Column(Name = @"MIDDLENAME", Storage = "_Middlename", DbType = "NVARCHAR2(30) NULL")]
        public string Middlename
        {
            get
            {
                return this._Middlename;
            }
            set
            {
                if (this._Middlename != value)
                {
                    this.OnMiddlenameChanging(value);
                    this.SendPropertyChanging();
                    this._Middlename = value;
                    this.SendPropertyChanged("Middlename");
                    this.OnMiddlenameChanged();
                }
            }
        }

    
        /// <summary>
        /// Пол (1-мужщина, 0-женщина)
        /// </summary>
        [Column(Name = @"SEX", Storage = "_Sex", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging();
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на должность в организации
        /// </summary>
        [Column(Name = @"CONTRACTORPOSITIONID", Storage = "_Contractorpositionid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Contractorpositionid
        {
            get
            {
                return this._Contractorpositionid;
            }
            set
            {
                if (this._Contractorpositionid != value)
                {
                    if (this._Contractorposition.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractorpositionidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorpositionid = value;
                    this.SendPropertyChanged("Contractorpositionid");
                    this.OnContractorpositionidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorposition in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractorposition_Person", Storage="_Contractorposition", ThisKey="Contractorpositionid", IsForeignKey=true)]
        public Contractorposition Contractorposition
        {
            get
            {
                return this._Contractorposition.Entity;
            }
            set
            {
                Contractorposition previousValue = this._Contractorposition.Entity;
                if ((previousValue != value) || (this._Contractorposition.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractorposition.Entity = null;
                        previousValue.People.Remove(this);
                    }
                    this._Contractorposition.Entity = value;
                    if (value != null)
                    {
                        this._Contractorpositionid = value.Id;
                        value.People.Add(this);
                    }
                    else
                    {
                        this._Contractorpositionid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contractorposition");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Funccustomerpersons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Funccustomerperson", Storage="_Funccustomerpersons", OtherKey="Personid", DeleteRule="CASCADE")]
        public EntitySet<Funccustomerperson> Funccustomerpersons
        {
            get
            {
                return this._Funccustomerpersons;
            }
            set
            {
                this._Funccustomerpersons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Contractdoc", Storage="_Contractdocs", OtherKey="Contractorpersonid")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Degree in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Degree_Person", Storage="_Degree", ThisKey="Degreeid", IsForeignKey=true)]
        public Degree Degree
        {
            get
            {
                return this._Degree.Entity;
            }
            set
            {
                Degree previousValue = this._Degree.Entity;
                if ((previousValue != value) || (this._Degree.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Degree.Entity = null;
                        previousValue.People.Remove(this);
                    }
                    this._Degree.Entity = value;
                    if (value != null)
                    {
                        this._Degreeid = value.Id;
                        value.People.Add(this);
                    }
                    else
                    {
                        this._Degreeid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Degree");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Funccustomerpersons(Funccustomerperson entity)
        {
            this.SendPropertyChanging("Funccustomerpersons");
            entity.Person = this;
        }
    
        private void detach_Funccustomerpersons(Funccustomerperson entity)
        {
            this.SendPropertyChanging("Funccustomerpersons");
            entity.Person = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Person = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Person = null;
        }
    }

    /// <summary>
    /// Улица
    /// </summary>
    [Table(Name = @"UD.CONTRACTOR")]
    public partial class Contractor : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractortypeid;

        private string _Name;

        private string _Shortname;

        private string _Zip;

        private string _Bank;

        private string _Inn;

        private string _Account;

        private string _Bik;

        private string _Kpp;

        private string _Address;

        private string _Correspaccount;

        private string _Okpo;

        private string _Okonh;

        private string _Ogrn;

        private string _Okato;

        private string _Okved;

        private string _Insurance;

        private string _Birthplace;

        private string _Middlename;

        private string _Firstname;

        private System.Nullable<System.DateTime> _Birthdate;

        private string _Pasportnumber;

        private string _Pasportseries;

        private string _Pasportauthority;

        private string _Familyname;

        private System.Nullable<System.DateTime> _Pasportdate;

        private System.Nullable<long> _Educationid;

        private System.Nullable<bool> _Sex;

        private EntitySet<Contractorposition> _Contractorpositions;

        private EntitySet<Contractorauthority> _Contractorauthorities;

        private EntityRef<Education> _Education;

        private EntitySet<Reportgrouping> _Reportgroupings;

        private EntitySet<Contractorpropertiy> _Contractorpropertiys;

        private EntitySet<Functionalcustomer> _Functionalcustomers;

        private EntityRef<Contractortype> _Contractortype;

        private EntitySet<Acttype> _Acttypes;

        private EntitySet<Contractorcontractdoc> _Contractorcontractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractortypeidChanging(long value);
        partial void OnContractortypeidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortnameChanging(string value);
        partial void OnShortnameChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();
        partial void OnBankChanging(string value);
        partial void OnBankChanged();
        partial void OnInnChanging(string value);
        partial void OnInnChanged();
        partial void OnAccountChanging(string value);
        partial void OnAccountChanged();
        partial void OnBikChanging(string value);
        partial void OnBikChanged();
        partial void OnKppChanging(string value);
        partial void OnKppChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCorrespaccountChanging(string value);
        partial void OnCorrespaccountChanged();
        partial void OnOkpoChanging(string value);
        partial void OnOkpoChanged();
        partial void OnOkonhChanging(string value);
        partial void OnOkonhChanged();
        partial void OnOgrnChanging(string value);
        partial void OnOgrnChanged();
        partial void OnOkatoChanging(string value);
        partial void OnOkatoChanged();
        partial void OnOkvedChanging(string value);
        partial void OnOkvedChanged();
        partial void OnInsuranceChanging(string value);
        partial void OnInsuranceChanged();
        partial void OnBirthplaceChanging(string value);
        partial void OnBirthplaceChanged();
        partial void OnMiddlenameChanging(string value);
        partial void OnMiddlenameChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdateChanged();
        partial void OnPasportnumberChanging(string value);
        partial void OnPasportnumberChanged();
        partial void OnPasportseriesChanging(string value);
        partial void OnPasportseriesChanged();
        partial void OnPasportauthorityChanging(string value);
        partial void OnPasportauthorityChanged();
        partial void OnFamilynameChanging(string value);
        partial void OnFamilynameChanged();
        partial void OnPasportdateChanging(System.Nullable<System.DateTime> value);
        partial void OnPasportdateChanged();
        partial void OnEducationidChanging(System.Nullable<long> value);
        partial void OnEducationidChanged();
        partial void OnSexChanging(System.Nullable<bool> value);
        partial void OnSexChanged();
        #endregion

        public Contractor()
        {
            this._Contractorpositions = new EntitySet<Contractorposition>(new Action<Contractorposition>(this.attach_Contractorpositions), new Action<Contractorposition>(this.detach_Contractorpositions));
            this._Contractorauthorities = new EntitySet<Contractorauthority>(new Action<Contractorauthority>(this.attach_Contractorauthorities), new Action<Contractorauthority>(this.detach_Contractorauthorities));
            this._Education  = default(EntityRef<Education>);
            this._Reportgroupings = new EntitySet<Reportgrouping>(new Action<Reportgrouping>(this.attach_Reportgroupings), new Action<Reportgrouping>(this.detach_Reportgroupings));
            this._Contractorpropertiys = new EntitySet<Contractorpropertiy>(new Action<Contractorpropertiy>(this.attach_Contractorpropertiys), new Action<Contractorpropertiy>(this.detach_Contractorpropertiys));
            this._Functionalcustomers = new EntitySet<Functionalcustomer>(new Action<Functionalcustomer>(this.attach_Functionalcustomers), new Action<Functionalcustomer>(this.detach_Functionalcustomers));
            this._Contractortype  = default(EntityRef<Contractortype>);
            this._Acttypes = new EntitySet<Acttype>(new Action<Acttype>(this.attach_Acttypes), new Action<Acttype>(this.detach_Acttypes));
            this._Contractorcontractdocs = new EntitySet<Contractorcontractdoc>(new Action<Contractorcontractdoc>(this.attach_Contractorcontractdocs), new Action<Contractorcontractdoc>(this.detach_Contractorcontractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификтор контрагента
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractor")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на тип контрагента
        /// </summary>
        [Column(Name = @"CONTRACTORTYPEID", Storage = "_Contractortypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractortypeid
        {
            get
            {
                return this._Contractortypeid;
            }
            set
            {
                if (this._Contractortypeid != value)
                {
                    if (this._Contractortype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractortypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractortypeid = value;
                    this.SendPropertyChanged("Contractortypeid");
                    this.OnContractortypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// Название организации
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(500) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Короткое название организации
        /// </summary>
        [Column(Name = @"SHORTNAME", Storage = "_Shortname", DbType = "NVARCHAR2(255) NULL")]
        public string Shortname
        {
            get
            {
                return this._Shortname;
            }
            set
            {
                if (this._Shortname != value)
                {
                    this.OnShortnameChanging(value);
                    this.SendPropertyChanging();
                    this._Shortname = value;
                    this.SendPropertyChanged("Shortname");
                    this.OnShortnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Индекс
        /// </summary>
        [Column(Name = @"ZIP", Storage = "_Zip", DbType = "NVARCHAR2(7) NULL")]
        public string Zip
        {
            get
            {
                return this._Zip;
            }
            set
            {
                if (this._Zip != value)
                {
                    this.OnZipChanging(value);
                    this.SendPropertyChanging();
                    this._Zip = value;
                    this.SendPropertyChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }

    
        /// <summary>
        /// Банк
        /// </summary>
        [Column(Name = @"BANK", Storage = "_Bank", DbType = "NVARCHAR2(200) NULL")]
        public string Bank
        {
            get
            {
                return this._Bank;
            }
            set
            {
                if (this._Bank != value)
                {
                    this.OnBankChanging(value);
                    this.SendPropertyChanging();
                    this._Bank = value;
                    this.SendPropertyChanged("Bank");
                    this.OnBankChanged();
                }
            }
        }

    
        /// <summary>
        /// ИНН
        /// </summary>
        [Column(Name = @"INN", Storage = "_Inn", DbType = "NVARCHAR2(20) NULL")]
        public string Inn
        {
            get
            {
                return this._Inn;
            }
            set
            {
                if (this._Inn != value)
                {
                    this.OnInnChanging(value);
                    this.SendPropertyChanging();
                    this._Inn = value;
                    this.SendPropertyChanged("Inn");
                    this.OnInnChanged();
                }
            }
        }

    
        /// <summary>
        /// Расчётный счёт
        /// </summary>
        [Column(Name = @"ACCOUNT", Storage = "_Account", DbType = "NVARCHAR2(20) NULL")]
        public string Account
        {
            get
            {
                return this._Account;
            }
            set
            {
                if (this._Account != value)
                {
                    this.OnAccountChanging(value);
                    this.SendPropertyChanging();
                    this._Account = value;
                    this.SendPropertyChanged("Account");
                    this.OnAccountChanged();
                }
            }
        }

    
        /// <summary>
        /// БИК
        /// </summary>
        [Column(Name = @"BIK", Storage = "_Bik", DbType = "NVARCHAR2(12) NULL")]
        public string Bik
        {
            get
            {
                return this._Bik;
            }
            set
            {
                if (this._Bik != value)
                {
                    this.OnBikChanging(value);
                    this.SendPropertyChanging();
                    this._Bik = value;
                    this.SendPropertyChanged("Bik");
                    this.OnBikChanged();
                }
            }
        }

    
        /// <summary>
        /// КПП
        /// </summary>
        [Column(Name = @"KPP", Storage = "_Kpp", DbType = "NVARCHAR2(9) NULL")]
        public string Kpp
        {
            get
            {
                return this._Kpp;
            }
            set
            {
                if (this._Kpp != value)
                {
                    this.OnKppChanging(value);
                    this.SendPropertyChanging();
                    this._Kpp = value;
                    this.SendPropertyChanged("Kpp");
                    this.OnKppChanged();
                }
            }
        }

    
        /// <summary>
        /// Адрес контрагента
        /// </summary>
        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(1000) NULL")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// Корреспондентский счёт
        /// </summary>
        [Column(Name = @"CORRESPACCOUNT", Storage = "_Correspaccount", DbType = "NVARCHAR2(20) NULL")]
        public string Correspaccount
        {
            get
            {
                return this._Correspaccount;
            }
            set
            {
                if (this._Correspaccount != value)
                {
                    this.OnCorrespaccountChanging(value);
                    this.SendPropertyChanging();
                    this._Correspaccount = value;
                    this.SendPropertyChanged("Correspaccount");
                    this.OnCorrespaccountChanged();
                }
            }
        }

    
        /// <summary>
        /// ОКПО
        /// </summary>
        [Column(Name = @"OKPO", Storage = "_Okpo", DbType = "NVARCHAR2(8) NULL")]
        public string Okpo
        {
            get
            {
                return this._Okpo;
            }
            set
            {
                if (this._Okpo != value)
                {
                    this.OnOkpoChanging(value);
                    this.SendPropertyChanging();
                    this._Okpo = value;
                    this.SendPropertyChanged("Okpo");
                    this.OnOkpoChanged();
                }
            }
        }

    
        /// <summary>
        /// ОКОНХ
        /// </summary>
        [Column(Name = @"OKONH", Storage = "_Okonh", DbType = "NVARCHAR2(5) NULL")]
        public string Okonh
        {
            get
            {
                return this._Okonh;
            }
            set
            {
                if (this._Okonh != value)
                {
                    this.OnOkonhChanging(value);
                    this.SendPropertyChanging();
                    this._Okonh = value;
                    this.SendPropertyChanged("Okonh");
                    this.OnOkonhChanged();
                }
            }
        }

    
        /// <summary>
        /// ОГРН
        /// </summary>
        [Column(Name = @"OGRN", Storage = "_Ogrn", DbType = "NVARCHAR2(13) NULL")]
        public string Ogrn
        {
            get
            {
                return this._Ogrn;
            }
            set
            {
                if (this._Ogrn != value)
                {
                    this.OnOgrnChanging(value);
                    this.SendPropertyChanging();
                    this._Ogrn = value;
                    this.SendPropertyChanged("Ogrn");
                    this.OnOgrnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Okato in the schema.
        /// </summary>
        [Column(Name = @"OKATO", Storage = "_Okato", DbType = "NVARCHAR2(12) NULL")]
        public string Okato
        {
            get
            {
                return this._Okato;
            }
            set
            {
                if (this._Okato != value)
                {
                    this.OnOkatoChanging(value);
                    this.SendPropertyChanging();
                    this._Okato = value;
                    this.SendPropertyChanged("Okato");
                    this.OnOkatoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Okved in the schema.
        /// </summary>
        [Column(Name = @"OKVED", Storage = "_Okved", DbType = "NVARCHAR2(15) NULL")]
        public string Okved
        {
            get
            {
                return this._Okved;
            }
            set
            {
                if (this._Okved != value)
                {
                    this.OnOkvedChanging(value);
                    this.SendPropertyChanging();
                    this._Okved = value;
                    this.SendPropertyChanged("Okved");
                    this.OnOkvedChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер пенсионного удостоверения
        /// </summary>
        [Column(Name = @"INSURANCE", Storage = "_Insurance", DbType = "NVARCHAR2(100) NULL")]
        public string Insurance
        {
            get
            {
                return this._Insurance;
            }
            set
            {
                if (this._Insurance != value)
                {
                    this.OnInsuranceChanging(value);
                    this.SendPropertyChanging();
                    this._Insurance = value;
                    this.SendPropertyChanged("Insurance");
                    this.OnInsuranceChanged();
                }
            }
        }

    
        /// <summary>
        /// Место рождения
        /// </summary>
        [Column(Name = @"BIRTHPLACE", Storage = "_Birthplace", DbType = "NVARCHAR2(2000) NULL")]
        public string Birthplace
        {
            get
            {
                return this._Birthplace;
            }
            set
            {
                if (this._Birthplace != value)
                {
                    this.OnBirthplaceChanging(value);
                    this.SendPropertyChanging();
                    this._Birthplace = value;
                    this.SendPropertyChanged("Birthplace");
                    this.OnBirthplaceChanged();
                }
            }
        }

    
        /// <summary>
        /// Отчество
        /// </summary>
        [Column(Name = @"MIDDLENAME", Storage = "_Middlename", DbType = "NVARCHAR2(100) NULL")]
        public string Middlename
        {
            get
            {
                return this._Middlename;
            }
            set
            {
                if (this._Middlename != value)
                {
                    this.OnMiddlenameChanging(value);
                    this.SendPropertyChanging();
                    this._Middlename = value;
                    this.SendPropertyChanged("Middlename");
                    this.OnMiddlenameChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя
        /// </summary>
        [Column(Name = @"FIRSTNAME", Storage = "_Firstname", DbType = "NVARCHAR2(100) NULL")]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата рождения
        /// </summary>
        [Column(Name = @"BIRTHDATE", Storage = "_Birthdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Birthdate
        {
            get
            {
                return this._Birthdate;
            }
            set
            {
                if (this._Birthdate != value)
                {
                    this.OnBirthdateChanging(value);
                    this.SendPropertyChanging();
                    this._Birthdate = value;
                    this.SendPropertyChanged("Birthdate");
                    this.OnBirthdateChanged();
                }
            }
        }

    
        /// <summary>
        /// Номер паспорта
        /// </summary>
        [Column(Name = @"PASPORTNUMBER", Storage = "_Pasportnumber", DbType = "NVARCHAR2(20) NULL")]
        public string Pasportnumber
        {
            get
            {
                return this._Pasportnumber;
            }
            set
            {
                if (this._Pasportnumber != value)
                {
                    this.OnPasportnumberChanging(value);
                    this.SendPropertyChanging();
                    this._Pasportnumber = value;
                    this.SendPropertyChanged("Pasportnumber");
                    this.OnPasportnumberChanged();
                }
            }
        }

    
        /// <summary>
        /// Серия паспорта
        /// </summary>
        [Column(Name = @"PASPORTSERIES", Storage = "_Pasportseries", DbType = "NVARCHAR2(10) NULL")]
        public string Pasportseries
        {
            get
            {
                return this._Pasportseries;
            }
            set
            {
                if (this._Pasportseries != value)
                {
                    this.OnPasportseriesChanging(value);
                    this.SendPropertyChanging();
                    this._Pasportseries = value;
                    this.SendPropertyChanged("Pasportseries");
                    this.OnPasportseriesChanged();
                }
            }
        }

    
        /// <summary>
        /// Кем выдан паспорт
        /// </summary>
        [Column(Name = @"PASPORTAUTHORITY", Storage = "_Pasportauthority", DbType = "NVARCHAR2(2000) NULL")]
        public string Pasportauthority
        {
            get
            {
                return this._Pasportauthority;
            }
            set
            {
                if (this._Pasportauthority != value)
                {
                    this.OnPasportauthorityChanging(value);
                    this.SendPropertyChanging();
                    this._Pasportauthority = value;
                    this.SendPropertyChanged("Pasportauthority");
                    this.OnPasportauthorityChanged();
                }
            }
        }

    
        /// <summary>
        /// Фамилия
        /// </summary>
        [Column(Name = @"FAMILYNAME", Storage = "_Familyname", DbType = "NVARCHAR2(100) NULL")]
        public string Familyname
        {
            get
            {
                return this._Familyname;
            }
            set
            {
                if (this._Familyname != value)
                {
                    this.OnFamilynameChanging(value);
                    this.SendPropertyChanging();
                    this._Familyname = value;
                    this.SendPropertyChanged("Familyname");
                    this.OnFamilynameChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата выдачи паспорта
        /// </summary>
        [Column(Name = @"PASPORTDATE", Storage = "_Pasportdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Pasportdate
        {
            get
            {
                return this._Pasportdate;
            }
            set
            {
                if (this._Pasportdate != value)
                {
                    this.OnPasportdateChanging(value);
                    this.SendPropertyChanging();
                    this._Pasportdate = value;
                    this.SendPropertyChanged("Pasportdate");
                    this.OnPasportdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Educationid in the schema.
        /// </summary>
        [Column(Name = @"EDUCATIONID", Storage = "_Educationid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Educationid
        {
            get
            {
                return this._Educationid;
            }
            set
            {
                if (this._Educationid != value)
                {
                    if (this._Education.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEducationidChanging(value);
                    this.SendPropertyChanging();
                    this._Educationid = value;
                    this.SendPropertyChanged("Educationid");
                    this.OnEducationidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sex in the schema.
        /// </summary>
        [Column(Name = @"SEX", Storage = "_Sex", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging();
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorpositions in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorposition", Storage="_Contractorpositions", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Contractorposition> Contractorpositions
        {
            get
            {
                return this._Contractorpositions;
            }
            set
            {
                this._Contractorpositions.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorauthorities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorauthority", Storage="_Contractorauthorities", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Contractorauthority> Contractorauthorities
        {
            get
            {
                return this._Contractorauthorities;
            }
            set
            {
                this._Contractorauthorities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Education in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Education_Contractor", Storage="_Education", ThisKey="Educationid", IsForeignKey=true)]
        public Education Education
        {
            get
            {
                return this._Education.Entity;
            }
            set
            {
                Education previousValue = this._Education.Entity;
                if ((previousValue != value) || (this._Education.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Education.Entity = null;
                        previousValue.Contractors.Remove(this);
                    }
                    this._Education.Entity = value;
                    if (value != null)
                    {
                        this._Educationid = value.Id;
                        value.Contractors.Add(this);
                    }
                    else
                    {
                        this._Educationid = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Education");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reportgroupings in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Reportgrouping", Storage="_Reportgroupings", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Reportgrouping> Reportgroupings
        {
            get
            {
                return this._Reportgroupings;
            }
            set
            {
                this._Reportgroupings.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorpropertiys in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorpropertiy", Storage="_Contractorpropertiys", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Contractorpropertiy> Contractorpropertiys
        {
            get
            {
                return this._Contractorpropertiys;
            }
            set
            {
                this._Contractorpropertiys.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Functionalcustomers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Functionalcustomer", Storage="_Functionalcustomers", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Functionalcustomer> Functionalcustomers
        {
            get
            {
                return this._Functionalcustomers;
            }
            set
            {
                this._Functionalcustomers.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractortype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractortype_Contractor", Storage="_Contractortype", ThisKey="Contractortypeid", IsForeignKey=true)]
        public Contractortype Contractortype
        {
            get
            {
                return this._Contractortype.Entity;
            }
            set
            {
                Contractortype previousValue = this._Contractortype.Entity;
                if ((previousValue != value) || (this._Contractortype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractortype.Entity = null;
                        previousValue.Contractors.Remove(this);
                    }
                    this._Contractortype.Entity = value;
                    if (value != null)
                    {
                        this._Contractortypeid = value.Id;
                        value.Contractors.Add(this);
                    }
                    else
                    {
                        this._Contractortypeid = default(long);
                    }
                    this.SendPropertyChanged("Contractortype");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acttypes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Acttype", Storage="_Acttypes", OtherKey="Contractorid", DeleteRule="CASCADE")]
        public EntitySet<Acttype> Acttypes
        {
            get
            {
                return this._Acttypes;
            }
            set
            {
                this._Acttypes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorcontractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorcontractdoc", Storage="_Contractorcontractdocs", OtherKey="Contractorid")]
        public EntitySet<Contractorcontractdoc> Contractorcontractdocs
        {
            get
            {
                return this._Contractorcontractdocs;
            }
            set
            {
                this._Contractorcontractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractorpositions(Contractorposition entity)
        {
            this.SendPropertyChanging("Contractorpositions");
            entity.Contractor = this;
        }
    
        private void detach_Contractorpositions(Contractorposition entity)
        {
            this.SendPropertyChanging("Contractorpositions");
            entity.Contractor = null;
        }

        private void attach_Contractorauthorities(Contractorauthority entity)
        {
            this.SendPropertyChanging("Contractorauthorities");
            entity.Contractor = this;
        }
    
        private void detach_Contractorauthorities(Contractorauthority entity)
        {
            this.SendPropertyChanging("Contractorauthorities");
            entity.Contractor = null;
        }

        private void attach_Reportgroupings(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings");
            entity.Contractor = this;
        }
    
        private void detach_Reportgroupings(Reportgrouping entity)
        {
            this.SendPropertyChanging("Reportgroupings");
            entity.Contractor = null;
        }

        private void attach_Contractorpropertiys(Contractorpropertiy entity)
        {
            this.SendPropertyChanging("Contractorpropertiys");
            entity.Contractor = this;
        }
    
        private void detach_Contractorpropertiys(Contractorpropertiy entity)
        {
            this.SendPropertyChanging("Contractorpropertiys");
            entity.Contractor = null;
        }

        private void attach_Functionalcustomers(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers");
            entity.Contractor = this;
        }
    
        private void detach_Functionalcustomers(Functionalcustomer entity)
        {
            this.SendPropertyChanging("Functionalcustomers");
            entity.Contractor = null;
        }

        private void attach_Acttypes(Acttype entity)
        {
            this.SendPropertyChanging("Acttypes");
            entity.Contractor = this;
        }
    
        private void detach_Acttypes(Acttype entity)
        {
            this.SendPropertyChanging("Acttypes");
            entity.Contractor = null;
        }

        private void attach_Contractorcontractdocs(Contractorcontractdoc entity)
        {
            this.SendPropertyChanging("Contractorcontractdocs");
            entity.Contractor = this;
        }
    
        private void detach_Contractorcontractdocs(Contractorcontractdoc entity)
        {
            this.SendPropertyChanging("Contractorcontractdocs");
            entity.Contractor = null;
        }
    }

    /// <summary>
    /// Степень (сп)
    /// </summary>
    [Table(Name = @"UD.DEGREE")]
    public partial class Degree : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Person> _People;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Degree()
        {
            this._People = new EntitySet<Person>(new Action<Person>(this.attach_People), new Action<Person>(this.detach_People));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Degree")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. кондидат наук)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for People in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Degree_Person", Storage="_People", OtherKey="Degreeid", DeleteRule="CASCADE")]
        public EntitySet<Person> People
        {
            get
            {
                return this._People;
            }
            set
            {
                this._People.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_People(Person entity)
        {
            this.SendPropertyChanging("People");
            entity.Degree = this;
        }
    
        private void detach_People(Person entity)
        {
            this.SendPropertyChanging("People");
            entity.Degree = null;
        }
    }

    /// <summary>
    /// НДС (сп)
    /// </summary>
    [Table(Name = @"UD.NDS")]
    public partial class Nds : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private double _Percents;

        private int _Year;

        private EntitySet<Stage> _Stages;

        private EntitySet<Act> _Acts;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPercentsChanging(double value);
        partial void OnPercentsChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        #endregion

        public Nds()
        {
            this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификаьтор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Nds")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ставка НДС (0...100) (напр. 18)
        /// </summary>
        [Column(Name = @"PERCENTS", Storage = "_Percents", CanBeNull = false, DbType = "NUMBER(4,2) NOT NULL")]
        public double Percents
        {
            get
            {
                return this._Percents;
            }
            set
            {
                if (this._Percents != value)
                {
                    this.OnPercentsChanging(value);
                    this.SendPropertyChanging();
                    this._Percents = value;
                    this.SendPropertyChanged("Percents");
                    this.OnPercentsChanged();
                }
            }
        }

    
        /// <summary>
        /// Год начала дейтсвия
        /// </summary>
        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(4) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Stage", Storage="_Stages", OtherKey="Ndsid")]
        public EntitySet<Stage> Stages
        {
            get
            {
                return this._Stages;
            }
            set
            {
                this._Stages.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Act", Storage="_Acts", OtherKey="Ndsid", DeleteRule="CASCADE")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Nds_Contractdoc", Storage="_Contractdocs", OtherKey="Ndsid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Nds = this;
        }
    
        private void detach_Stages(Stage entity)
        {
            this.SendPropertyChanging("Stages");
            entity.Nds = null;
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Nds = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Nds = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Nds = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Nds = null;
        }
    }

    /// <summary>
    /// Состояние договора (сп)
    /// </summary>
    [Table(Name = @"UD.CONTRACTSTATE")]
    public partial class Contractstate : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Contractdoc> _Contractdocs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Contractstate()
        {
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractstate")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. подписан)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractstate_Contractdoc", Storage="_Contractdocs", OtherKey="Contractstateid", DeleteRule="CASCADE")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Contractstate = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Contractstate = null;
        }
    }

    /// <summary>
    /// Иерархия договоров (генеральный - субподрядные)
    /// </summary>
    [Table(Name = @"UD.CONTRACTHIERARCHY")]
    public partial class Contracthierarchy : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Generalcontractdocid;

        private long _Subcontractdocid;

        private EntityRef<Contractdoc> _Contractdoc_Generalcontractdocid;

        private EntityRef<Contractdoc> _Contractdoc_Subcontractdocid;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGeneralcontractdocidChanging(long value);
        partial void OnGeneralcontractdocidChanged();
        partial void OnSubcontractdocidChanging(long value);
        partial void OnSubcontractdocidChanged();
        #endregion

        public Contracthierarchy()
        {
            this._Contractdoc_Generalcontractdocid  = default(EntityRef<Contractdoc>);
            this._Contractdoc_Subcontractdocid  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contracthierarchy")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на генеральный договор
        /// </summary>
        [Column(Name = @"GENERALCONTRACTDOCID", Storage = "_Generalcontractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Generalcontractdocid
        {
            get
            {
                return this._Generalcontractdocid;
            }
            set
            {
                if (this._Generalcontractdocid != value)
                {
                    if (this._Contractdoc_Generalcontractdocid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGeneralcontractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Generalcontractdocid = value;
                    this.SendPropertyChanged("Generalcontractdocid");
                    this.OnGeneralcontractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// Ссылка на договор субподряда
        /// </summary>
        [Column(Name = @"SUBCONTRACTDOCID", Storage = "_Subcontractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Subcontractdocid
        {
            get
            {
                return this._Subcontractdocid;
            }
            set
            {
                if (this._Subcontractdocid != value)
                {
                    if (this._Contractdoc_Subcontractdocid.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSubcontractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Subcontractdocid = value;
                    this.SendPropertyChanged("Subcontractdocid");
                    this.OnSubcontractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc_Generalcontractdocid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Id_Contracthierarchy_Generalcontractdocid", Storage="_Contractdoc_Generalcontractdocid", ThisKey="Generalcontractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc_Generalcontractdocid
        {
            get
            {
                return this._Contractdoc_Generalcontractdocid.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc_Generalcontractdocid.Entity;
                if ((previousValue != value) || (this._Contractdoc_Generalcontractdocid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc_Generalcontractdocid.Entity = null;
                        previousValue.Contracthierarchies_Generalcontractdocid.Remove(this);
                    }
                    this._Contractdoc_Generalcontractdocid.Entity = value;
                    if (value != null)
                    {
                        this._Generalcontractdocid = value.Id;
                        value.Contracthierarchies_Generalcontractdocid.Add(this);
                    }
                    else
                    {
                        this._Generalcontractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc_Generalcontractdocid");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc_Subcontractdocid in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Id_Contracthierarchy_Subcontractdocid", Storage="_Contractdoc_Subcontractdocid", ThisKey="Subcontractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc_Subcontractdocid
        {
            get
            {
                return this._Contractdoc_Subcontractdocid.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc_Subcontractdocid.Entity;
                if ((previousValue != value) || (this._Contractdoc_Subcontractdocid.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc_Subcontractdocid.Entity = null;
                        previousValue.Contracthierarchies_Subcontractdocid.Remove(this);
                    }
                    this._Contractdoc_Subcontractdocid.Entity = value;
                    if (value != null)
                    {
                        this._Subcontractdocid = value.Id;
                        value.Contracthierarchies_Subcontractdocid.Add(this);
                    }
                    else
                    {
                        this._Subcontractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc_Subcontractdocid");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Единица измерения денег (сп)
    /// </summary>
    [Table(Name = @"UD.CURRENCYMEASURE")]
    public partial class Currencymeasure : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private System.Nullable<long> _Factor;

        private EntitySet<Schedule> _Schedules;

        private EntitySet<Act> _Acts;

        private EntitySet<Contractdoc> _Contractdocs;

        private EntitySet<Paymentdocument> _Paymentdocuments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnFactorChanging(System.Nullable<long> value);
        partial void OnFactorChanged();
        #endregion

        public Currencymeasure()
        {
            this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
            this._Acts = new EntitySet<Act>(new Action<Act>(this.attach_Acts), new Action<Act>(this.detach_Acts));
            this._Contractdocs = new EntitySet<Contractdoc>(new Action<Contractdoc>(this.attach_Contractdocs), new Action<Contractdoc>(this.detach_Contractdocs));
            this._Paymentdocuments = new EntitySet<Paymentdocument>(new Action<Paymentdocument>(this.attach_Paymentdocuments), new Action<Paymentdocument>(this.detach_Paymentdocuments));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Currencymeasure")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (например тыс.)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(20) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Кратность (напр. для тыс. - 1000)
        /// </summary>
        [Column(Name = @"FACTOR", Storage = "_Factor", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Factor
        {
            get
            {
                return this._Factor;
            }
            set
            {
                if (this._Factor != value)
                {
                    this.OnFactorChanging(value);
                    this.SendPropertyChanging();
                    this._Factor = value;
                    this.SendPropertyChanged("Factor");
                    this.OnFactorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedules in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Schedule", Storage="_Schedules", OtherKey="Currencymeasureid", DeleteRule="CASCADE")]
        public EntitySet<Schedule> Schedules
        {
            get
            {
                return this._Schedules;
            }
            set
            {
                this._Schedules.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Acts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Act", Storage="_Acts", OtherKey="Currencymeasureid")]
        public EntitySet<Act> Acts
        {
            get
            {
                return this._Acts;
            }
            set
            {
                this._Acts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Contractdoc", Storage="_Contractdocs", OtherKey="Currencymeasureid")]
        public EntitySet<Contractdoc> Contractdocs
        {
            get
            {
                return this._Contractdocs;
            }
            set
            {
                this._Contractdocs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Paymentdocument", Storage="_Paymentdocuments", OtherKey="Currencymeasureid")]
        public EntitySet<Paymentdocument> Paymentdocuments
        {
            get
            {
                return this._Paymentdocuments;
            }
            set
            {
                this._Paymentdocuments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Schedules(Schedule entity)
        {
            this.SendPropertyChanging("Schedules");
            entity.Currencymeasure = this;
        }
    
        private void detach_Schedules(Schedule entity)
        {
            this.SendPropertyChanging("Schedules");
            entity.Currencymeasure = null;
        }

        private void attach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Currencymeasure = this;
        }
    
        private void detach_Acts(Act entity)
        {
            this.SendPropertyChanging("Acts");
            entity.Currencymeasure = null;
        }

        private void attach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Currencymeasure = this;
        }
    
        private void detach_Contractdocs(Contractdoc entity)
        {
            this.SendPropertyChanging("Contractdocs");
            entity.Currencymeasure = null;
        }

        private void attach_Paymentdocuments(Paymentdocument entity)
        {
            this.SendPropertyChanging("Paymentdocuments");
            entity.Currencymeasure = this;
        }
    
        private void detach_Paymentdocuments(Paymentdocument entity)
        {
            this.SendPropertyChanging("Paymentdocuments");
            entity.Currencymeasure = null;
        }
    }

    /// <summary>
    /// There are no comments for Paymentdocument in the schema.
    /// </summary>
    [Table(Name = @"UD.PAYMENTDOCUMENT")]
    public partial class Paymentdocument : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Num;

        private System.Nullable<System.DateTime> _Paymentdate;

        private long _Currencymeasureid;

        private long _Prepaymentdocumenttypeid;

        private decimal _Paymentsum;

        private EntitySet<Contractpayment> _Contractpayments;

        private EntitySet<Actpaymentdocument> _Actpaymentdocuments;

        private EntityRef<Currencymeasure> _Currencymeasure;

        private EntityRef<Prepaymentdocumenttype> _Prepaymentdocumenttype;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnPaymentdateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentdateChanged();
        partial void OnCurrencymeasureidChanging(long value);
        partial void OnCurrencymeasureidChanged();
        partial void OnPrepaymentdocumenttypeidChanging(long value);
        partial void OnPrepaymentdocumenttypeidChanged();
        partial void OnPaymentsumChanging(decimal value);
        partial void OnPaymentsumChanged();
        #endregion

        public Paymentdocument()
        {
            this._Contractpayments = new EntitySet<Contractpayment>(new Action<Contractpayment>(this.attach_Contractpayments), new Action<Contractpayment>(this.detach_Contractpayments));
            this._Actpaymentdocuments = new EntitySet<Actpaymentdocument>(new Action<Actpaymentdocument>(this.attach_Actpaymentdocuments), new Action<Actpaymentdocument>(this.detach_Actpaymentdocuments));
            this._Currencymeasure  = default(EntityRef<Currencymeasure>);
            this._Prepaymentdocumenttype  = default(EntityRef<Prepaymentdocumenttype>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Paymentdocument")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Num in the schema.
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", CanBeNull = false, DbType = "NVARCHAR2(50) NOT NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdate in the schema.
        /// </summary>
        [Column(Name = @"PAYMENTDATE", Storage = "_Paymentdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Paymentdate
        {
            get
            {
                return this._Paymentdate;
            }
            set
            {
                if (this._Paymentdate != value)
                {
                    this.OnPaymentdateChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentdate = value;
                    this.SendPropertyChanged("Paymentdate");
                    this.OnPaymentdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasureid in the schema.
        /// </summary>
        [Column(Name = @"CURRENCYMEASUREID", Storage = "_Currencymeasureid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    if (this._Currencymeasure.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prepaymentdocumenttypeid in the schema.
        /// </summary>
        [Column(Name = @"PREPAYMENTDOCUMENTTYPEID", Storage = "_Prepaymentdocumenttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Prepaymentdocumenttypeid
        {
            get
            {
                return this._Prepaymentdocumenttypeid;
            }
            set
            {
                if (this._Prepaymentdocumenttypeid != value)
                {
                    if (this._Prepaymentdocumenttype.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrepaymentdocumenttypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Prepaymentdocumenttypeid = value;
                    this.SendPropertyChanged("Prepaymentdocumenttypeid");
                    this.OnPrepaymentdocumenttypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentsum in the schema.
        /// </summary>
        [Column(Name = @"PAYMENTSUM", Storage = "_Paymentsum", CanBeNull = false, DbType = "NUMBER(18,2) NOT NULL")]
        public decimal Paymentsum
        {
            get
            {
                return this._Paymentsum;
            }
            set
            {
                if (this._Paymentsum != value)
                {
                    this.OnPaymentsumChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentsum = value;
                    this.SendPropertyChanged("Paymentsum");
                    this.OnPaymentsumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractpayments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Paymentdocument_Contractpayment", Storage="_Contractpayments", OtherKey="Paymentdocumentid", DeleteRule="CASCADE")]
        public EntitySet<Contractpayment> Contractpayments
        {
            get
            {
                return this._Contractpayments;
            }
            set
            {
                this._Contractpayments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Actpaymentdocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Paymentdocument_Actpaymentdocument", Storage="_Actpaymentdocuments", OtherKey="Paymentdocumentid")]
        public EntitySet<Actpaymentdocument> Actpaymentdocuments
        {
            get
            {
                return this._Actpaymentdocuments;
            }
            set
            {
                this._Actpaymentdocuments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasure in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Currencymeasure_Paymentdocument", Storage="_Currencymeasure", ThisKey="Currencymeasureid", IsForeignKey=true)]
        public Currencymeasure Currencymeasure
        {
            get
            {
                return this._Currencymeasure.Entity;
            }
            set
            {
                Currencymeasure previousValue = this._Currencymeasure.Entity;
                if ((previousValue != value) || (this._Currencymeasure.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Currencymeasure.Entity = null;
                        previousValue.Paymentdocuments.Remove(this);
                    }
                    this._Currencymeasure.Entity = value;
                    if (value != null)
                    {
                        this._Currencymeasureid = value.Id;
                        value.Paymentdocuments.Add(this);
                    }
                    else
                    {
                        this._Currencymeasureid = default(long);
                    }
                    this.SendPropertyChanged("Currencymeasure");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prepaymentdocumenttype in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prepaymentdocumenttype_Paymentdocument", Storage="_Prepaymentdocumenttype", ThisKey="Prepaymentdocumenttypeid", IsForeignKey=true)]
        public Prepaymentdocumenttype Prepaymentdocumenttype
        {
            get
            {
                return this._Prepaymentdocumenttype.Entity;
            }
            set
            {
                Prepaymentdocumenttype previousValue = this._Prepaymentdocumenttype.Entity;
                if ((previousValue != value) || (this._Prepaymentdocumenttype.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Prepaymentdocumenttype.Entity = null;
                        previousValue.Paymentdocuments.Remove(this);
                    }
                    this._Prepaymentdocumenttype.Entity = value;
                    if (value != null)
                    {
                        this._Prepaymentdocumenttypeid = value.Id;
                        value.Paymentdocuments.Add(this);
                    }
                    else
                    {
                        this._Prepaymentdocumenttypeid = default(long);
                    }
                    this.SendPropertyChanged("Prepaymentdocumenttype");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractpayments(Contractpayment entity)
        {
            this.SendPropertyChanging("Contractpayments");
            entity.Paymentdocument = this;
        }
    
        private void detach_Contractpayments(Contractpayment entity)
        {
            this.SendPropertyChanging("Contractpayments");
            entity.Paymentdocument = null;
        }

        private void attach_Actpaymentdocuments(Actpaymentdocument entity)
        {
            this.SendPropertyChanging("Actpaymentdocuments");
            entity.Paymentdocument = this;
        }
    
        private void detach_Actpaymentdocuments(Actpaymentdocument entity)
        {
            this.SendPropertyChanging("Actpaymentdocuments");
            entity.Paymentdocument = null;
        }
    }

    /// <summary>
    /// Тип платежного документа (сп)
    /// </summary>
    [Table(Name = @"UD.PREPAYMENTDOCUMENTTYPE")]
    public partial class Prepaymentdocumenttype : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private string _Name;

        private EntitySet<Paymentdocument> _Paymentdocuments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Prepaymentdocumenttype()
        {
            this._Paymentdocuments = new EntitySet<Paymentdocument>(new Action<Paymentdocument>(this.attach_Paymentdocuments), new Action<Paymentdocument>(this.detach_Paymentdocuments));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Prepaymentdocumenttype")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Название (напр. Накладная)
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paymentdocuments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prepaymentdocumenttype_Paymentdocument", Storage="_Paymentdocuments", OtherKey="Prepaymentdocumenttypeid")]
        public EntitySet<Paymentdocument> Paymentdocuments
        {
            get
            {
                return this._Paymentdocuments;
            }
            set
            {
                this._Paymentdocuments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Paymentdocuments(Paymentdocument entity)
        {
            this.SendPropertyChanging("Paymentdocuments");
            entity.Prepaymentdocumenttype = this;
        }
    
        private void detach_Paymentdocuments(Paymentdocument entity)
        {
            this.SendPropertyChanging("Paymentdocuments");
            entity.Prepaymentdocumenttype = null;
        }
    }

    /// <summary>
    /// There are no comments for Contractrepositoryview in the schema.
    /// </summary>
    [Table(Name = @"UD.CONTRACTREPOSITORYVIEW")]
    public partial class Contractrepositoryview : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private System.Nullable<decimal> _Price;

        private System.Nullable<double> _Ndspercents;

        private string _Culture;

        private System.Nullable<long> _Factor;

        private System.Nullable<long> _Ndsalgorithmid;

        private string _Ndsalgname;

        private System.Nullable<long> _Ndsid;

        private System.Nullable<long> _Currencyid;

        private System.Nullable<long> _Currencymeasureid;

        private System.Nullable<decimal> _Currencyrate;

        private System.Nullable<System.DateTime> _Startat;

        private System.Nullable<System.DateTime> _Endsat;

        private System.Nullable<System.DateTime> _Appliedat;

        private System.Nullable<System.DateTime> _Approvedat;

        private string _Internalnum;

        private string _Subject;

        private System.Nullable<System.DateTime> _Brokeat;

        private System.Nullable<System.DateTime> _Outofcontrolat;

        private System.Nullable<System.DateTime> _Reallyfinishedat;

        private long _Contractstateid;

        private System.Nullable<decimal> _DisbursedCache;

        private System.Nullable<decimal> _LeftCache;

        private System.Nullable<decimal> _StagesTotalPriceCache;

        private System.Nullable<decimal> _DisbursedCoworkersCache;

        private System.Nullable<decimal> _LeftCoworkersCache;

        private string _Statename;

        private System.Nullable<bool> _Deleted;

        private System.Nullable<long> _Origincontractid;

        private string _Contracttypename;

        private string _Contractorshortname;

        private string _Contractortype;

        private string _Personfamilyname;

        private string _Personfirstname;

        private string _Personmiddlename;

        private System.Nullable<int> _Agreementnum;

        private string _Managernames;

        private System.Nullable<long> _Degreeid;

        private string _Persondegree;

        private System.Nullable<decimal> _Agreementreferencecount;

        private System.Nullable<decimal> _Generalreferencecount;

        private System.Nullable<decimal> _Schedulecount;

        private System.Nullable<decimal> _Contractorscount;

        private System.Nullable<decimal> _Orphandparentcount;

        private System.Nullable<decimal> _Closedparentcount;

        private System.Nullable<long> _Maincontractid;

        private string _Maincontractsubject;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnNdspercentsChanging(System.Nullable<double> value);
        partial void OnNdspercentsChanged();
        partial void OnCultureChanging(string value);
        partial void OnCultureChanged();
        partial void OnFactorChanging(System.Nullable<long> value);
        partial void OnFactorChanged();
        partial void OnNdsalgorithmidChanging(System.Nullable<long> value);
        partial void OnNdsalgorithmidChanged();
        partial void OnNdsalgnameChanging(string value);
        partial void OnNdsalgnameChanged();
        partial void OnNdsidChanging(System.Nullable<long> value);
        partial void OnNdsidChanged();
        partial void OnCurrencyidChanging(System.Nullable<long> value);
        partial void OnCurrencyidChanged();
        partial void OnCurrencymeasureidChanging(System.Nullable<long> value);
        partial void OnCurrencymeasureidChanged();
        partial void OnCurrencyrateChanging(System.Nullable<decimal> value);
        partial void OnCurrencyrateChanged();
        partial void OnStartatChanging(System.Nullable<System.DateTime> value);
        partial void OnStartatChanged();
        partial void OnEndsatChanging(System.Nullable<System.DateTime> value);
        partial void OnEndsatChanged();
        partial void OnAppliedatChanging(System.Nullable<System.DateTime> value);
        partial void OnAppliedatChanged();
        partial void OnApprovedatChanging(System.Nullable<System.DateTime> value);
        partial void OnApprovedatChanged();
        partial void OnInternalnumChanging(string value);
        partial void OnInternalnumChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnBrokeatChanging(System.Nullable<System.DateTime> value);
        partial void OnBrokeatChanged();
        partial void OnOutofcontrolatChanging(System.Nullable<System.DateTime> value);
        partial void OnOutofcontrolatChanged();
        partial void OnReallyfinishedatChanging(System.Nullable<System.DateTime> value);
        partial void OnReallyfinishedatChanged();
        partial void OnContractstateidChanging(long value);
        partial void OnContractstateidChanged();
        partial void OnDisbursedCacheChanging(System.Nullable<decimal> value);
        partial void OnDisbursedCacheChanged();
        partial void OnLeftCacheChanging(System.Nullable<decimal> value);
        partial void OnLeftCacheChanged();
        partial void OnStagesTotalPriceCacheChanging(System.Nullable<decimal> value);
        partial void OnStagesTotalPriceCacheChanged();
        partial void OnDisbursedCoworkersCacheChanging(System.Nullable<decimal> value);
        partial void OnDisbursedCoworkersCacheChanged();
        partial void OnLeftCoworkersCacheChanging(System.Nullable<decimal> value);
        partial void OnLeftCoworkersCacheChanged();
        partial void OnStatenameChanging(string value);
        partial void OnStatenameChanged();
        partial void OnDeletedChanging(System.Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnOrigincontractidChanging(System.Nullable<long> value);
        partial void OnOrigincontractidChanged();
        partial void OnContracttypenameChanging(string value);
        partial void OnContracttypenameChanged();
        partial void OnContractorshortnameChanging(string value);
        partial void OnContractorshortnameChanged();
        partial void OnContractortypeChanging(string value);
        partial void OnContractortypeChanged();
        partial void OnPersonfamilynameChanging(string value);
        partial void OnPersonfamilynameChanged();
        partial void OnPersonfirstnameChanging(string value);
        partial void OnPersonfirstnameChanged();
        partial void OnPersonmiddlenameChanging(string value);
        partial void OnPersonmiddlenameChanged();
        partial void OnAgreementnumChanging(System.Nullable<int> value);
        partial void OnAgreementnumChanged();
        partial void OnManagernamesChanging(string value);
        partial void OnManagernamesChanged();
        partial void OnDegreeidChanging(System.Nullable<long> value);
        partial void OnDegreeidChanged();
        partial void OnPersondegreeChanging(string value);
        partial void OnPersondegreeChanged();
        partial void OnAgreementreferencecountChanging(System.Nullable<decimal> value);
        partial void OnAgreementreferencecountChanged();
        partial void OnGeneralreferencecountChanging(System.Nullable<decimal> value);
        partial void OnGeneralreferencecountChanged();
        partial void OnSchedulecountChanging(System.Nullable<decimal> value);
        partial void OnSchedulecountChanged();
        partial void OnContractorscountChanging(System.Nullable<decimal> value);
        partial void OnContractorscountChanged();
        partial void OnOrphandparentcountChanging(System.Nullable<decimal> value);
        partial void OnOrphandparentcountChanged();
        partial void OnClosedparentcountChanging(System.Nullable<decimal> value);
        partial void OnClosedparentcountChanged();
        partial void OnMaincontractidChanging(System.Nullable<long> value);
        partial void OnMaincontractidChanged();
        partial void OnMaincontractsubjectChanging(string value);
        partial void OnMaincontractsubjectChanged();
        #endregion

        public Contractrepositoryview()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractrepositoryview")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndspercents in the schema.
        /// </summary>
        [Column(Name = @"""NdsPercents""", Storage = "_Ndspercents", DbType = "NUMBER(4,2) NULL")]
        public System.Nullable<double> Ndspercents
        {
            get
            {
                return this._Ndspercents;
            }
            set
            {
                if (this._Ndspercents != value)
                {
                    this.OnNdspercentsChanging(value);
                    this.SendPropertyChanging();
                    this._Ndspercents = value;
                    this.SendPropertyChanged("Ndspercents");
                    this.OnNdspercentsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Culture in the schema.
        /// </summary>
        [Column(Name = @"CULTURE", Storage = "_Culture", DbType = "NVARCHAR2(10) NULL")]
        public string Culture
        {
            get
            {
                return this._Culture;
            }
            set
            {
                if (this._Culture != value)
                {
                    this.OnCultureChanging(value);
                    this.SendPropertyChanging();
                    this._Culture = value;
                    this.SendPropertyChanged("Culture");
                    this.OnCultureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Factor in the schema.
        /// </summary>
        [Column(Name = @"FACTOR", Storage = "_Factor", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Factor
        {
            get
            {
                return this._Factor;
            }
            set
            {
                if (this._Factor != value)
                {
                    this.OnFactorChanging(value);
                    this.SendPropertyChanging();
                    this._Factor = value;
                    this.SendPropertyChanged("Factor");
                    this.OnFactorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithmid in the schema.
        /// </summary>
        [Column(Name = @"NDSALGORITHMID", Storage = "_Ndsalgorithmid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithmid;
            }
            set
            {
                if (this._Ndsalgorithmid != value)
                {
                    this.OnNdsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmid = value;
                    this.SendPropertyChanged("Ndsalgorithmid");
                    this.OnNdsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgname in the schema.
        /// </summary>
        [Column(Name = @"""NDSAlgName""", Storage = "_Ndsalgname", DbType = "NVARCHAR2(100) NULL")]
        public string Ndsalgname
        {
            get
            {
                return this._Ndsalgname;
            }
            set
            {
                if (this._Ndsalgname != value)
                {
                    this.OnNdsalgnameChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgname = value;
                    this.SendPropertyChanged("Ndsalgname");
                    this.OnNdsalgnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsid in the schema.
        /// </summary>
        [Column(Name = @"NDSID", Storage = "_Ndsid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Ndsid
        {
            get
            {
                return this._Ndsid;
            }
            set
            {
                if (this._Ndsid != value)
                {
                    this.OnNdsidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsid = value;
                    this.SendPropertyChanged("Ndsid");
                    this.OnNdsidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyid in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyID""", Storage = "_Currencyid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Currencyid
        {
            get
            {
                return this._Currencyid;
            }
            set
            {
                if (this._Currencyid != value)
                {
                    this.OnCurrencyidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyid = value;
                    this.SendPropertyChanged("Currencyid");
                    this.OnCurrencyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasureid in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyMeasureID""", Storage = "_Currencymeasureid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyrate in the schema.
        /// </summary>
        [Column(Name = @"CURRENCYRATE", Storage = "_Currencyrate", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Currencyrate
        {
            get
            {
                return this._Currencyrate;
            }
            set
            {
                if (this._Currencyrate != value)
                {
                    this.OnCurrencyrateChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyrate = value;
                    this.SendPropertyChanged("Currencyrate");
                    this.OnCurrencyrateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Startat in the schema.
        /// </summary>
        [Column(Name = @"STARTAT", Storage = "_Startat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Startat
        {
            get
            {
                return this._Startat;
            }
            set
            {
                if (this._Startat != value)
                {
                    this.OnStartatChanging(value);
                    this.SendPropertyChanging();
                    this._Startat = value;
                    this.SendPropertyChanged("Startat");
                    this.OnStartatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Endsat in the schema.
        /// </summary>
        [Column(Name = @"ENDSAT", Storage = "_Endsat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Endsat
        {
            get
            {
                return this._Endsat;
            }
            set
            {
                if (this._Endsat != value)
                {
                    this.OnEndsatChanging(value);
                    this.SendPropertyChanging();
                    this._Endsat = value;
                    this.SendPropertyChanged("Endsat");
                    this.OnEndsatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Appliedat in the schema.
        /// </summary>
        [Column(Name = @"APPLIEDAT", Storage = "_Appliedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Appliedat
        {
            get
            {
                return this._Appliedat;
            }
            set
            {
                if (this._Appliedat != value)
                {
                    this.OnAppliedatChanging(value);
                    this.SendPropertyChanging();
                    this._Appliedat = value;
                    this.SendPropertyChanged("Appliedat");
                    this.OnAppliedatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approvedat in the schema.
        /// </summary>
        [Column(Name = @"APPROVEDAT", Storage = "_Approvedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Approvedat
        {
            get
            {
                return this._Approvedat;
            }
            set
            {
                if (this._Approvedat != value)
                {
                    this.OnApprovedatChanging(value);
                    this.SendPropertyChanging();
                    this._Approvedat = value;
                    this.SendPropertyChanged("Approvedat");
                    this.OnApprovedatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Internalnum in the schema.
        /// </summary>
        [Column(Name = @"INTERNALNUM", Storage = "_Internalnum", DbType = "NVARCHAR2(100) NULL")]
        public string Internalnum
        {
            get
            {
                return this._Internalnum;
            }
            set
            {
                if (this._Internalnum != value)
                {
                    this.OnInternalnumChanging(value);
                    this.SendPropertyChanging();
                    this._Internalnum = value;
                    this.SendPropertyChanged("Internalnum");
                    this.OnInternalnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subject in the schema.
        /// </summary>
        [Column(Name = @"SUBJECT", Storage = "_Subject", DbType = "NVARCHAR2(2000) NULL")]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Brokeat in the schema.
        /// </summary>
        [Column(Name = @"BROKEAT", Storage = "_Brokeat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Brokeat
        {
            get
            {
                return this._Brokeat;
            }
            set
            {
                if (this._Brokeat != value)
                {
                    this.OnBrokeatChanging(value);
                    this.SendPropertyChanging();
                    this._Brokeat = value;
                    this.SendPropertyChanged("Brokeat");
                    this.OnBrokeatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Outofcontrolat in the schema.
        /// </summary>
        [Column(Name = @"OUTOFCONTROLAT", Storage = "_Outofcontrolat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Outofcontrolat
        {
            get
            {
                return this._Outofcontrolat;
            }
            set
            {
                if (this._Outofcontrolat != value)
                {
                    this.OnOutofcontrolatChanging(value);
                    this.SendPropertyChanging();
                    this._Outofcontrolat = value;
                    this.SendPropertyChanged("Outofcontrolat");
                    this.OnOutofcontrolatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reallyfinishedat in the schema.
        /// </summary>
        [Column(Name = @"REALLYFINISHEDAT", Storage = "_Reallyfinishedat", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Reallyfinishedat
        {
            get
            {
                return this._Reallyfinishedat;
            }
            set
            {
                if (this._Reallyfinishedat != value)
                {
                    this.OnReallyfinishedatChanging(value);
                    this.SendPropertyChanging();
                    this._Reallyfinishedat = value;
                    this.SendPropertyChanged("Reallyfinishedat");
                    this.OnReallyfinishedatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractstateid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTSTATEID", Storage = "_Contractstateid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractstateid
        {
            get
            {
                return this._Contractstateid;
            }
            set
            {
                if (this._Contractstateid != value)
                {
                    this.OnContractstateidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractstateid = value;
                    this.SendPropertyChanged("Contractstateid");
                    this.OnContractstateidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisbursedCache in the schema.
        /// </summary>
        [Column(Name = @"DISBURSED_CACHE", Storage = "_DisbursedCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> DisbursedCache
        {
            get
            {
                return this._DisbursedCache;
            }
            set
            {
                if (this._DisbursedCache != value)
                {
                    this.OnDisbursedCacheChanging(value);
                    this.SendPropertyChanging();
                    this._DisbursedCache = value;
                    this.SendPropertyChanged("DisbursedCache");
                    this.OnDisbursedCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LeftCache in the schema.
        /// </summary>
        [Column(Name = @"LEFT_CACHE", Storage = "_LeftCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> LeftCache
        {
            get
            {
                return this._LeftCache;
            }
            set
            {
                if (this._LeftCache != value)
                {
                    this.OnLeftCacheChanging(value);
                    this.SendPropertyChanging();
                    this._LeftCache = value;
                    this.SendPropertyChanged("LeftCache");
                    this.OnLeftCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StagesTotalPriceCache in the schema.
        /// </summary>
        [Column(Name = @"STAGES_TOTAL_PRICE_CACHE", Storage = "_StagesTotalPriceCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> StagesTotalPriceCache
        {
            get
            {
                return this._StagesTotalPriceCache;
            }
            set
            {
                if (this._StagesTotalPriceCache != value)
                {
                    this.OnStagesTotalPriceCacheChanging(value);
                    this.SendPropertyChanging();
                    this._StagesTotalPriceCache = value;
                    this.SendPropertyChanged("StagesTotalPriceCache");
                    this.OnStagesTotalPriceCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisbursedCoworkersCache in the schema.
        /// </summary>
        [Column(Name = @"DISBURSED_COWORKERS_CACHE", Storage = "_DisbursedCoworkersCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> DisbursedCoworkersCache
        {
            get
            {
                return this._DisbursedCoworkersCache;
            }
            set
            {
                if (this._DisbursedCoworkersCache != value)
                {
                    this.OnDisbursedCoworkersCacheChanging(value);
                    this.SendPropertyChanging();
                    this._DisbursedCoworkersCache = value;
                    this.SendPropertyChanged("DisbursedCoworkersCache");
                    this.OnDisbursedCoworkersCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LeftCoworkersCache in the schema.
        /// </summary>
        [Column(Name = @"LEFT_COWORKERS_CACHE", Storage = "_LeftCoworkersCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> LeftCoworkersCache
        {
            get
            {
                return this._LeftCoworkersCache;
            }
            set
            {
                if (this._LeftCoworkersCache != value)
                {
                    this.OnLeftCoworkersCacheChanging(value);
                    this.SendPropertyChanging();
                    this._LeftCoworkersCache = value;
                    this.SendPropertyChanged("LeftCoworkersCache");
                    this.OnLeftCoworkersCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Statename in the schema.
        /// </summary>
        [Column(Name = @"""StateName""", Storage = "_Statename", DbType = "NVARCHAR2(100) NULL")]
        public string Statename
        {
            get
            {
                return this._Statename;
            }
            set
            {
                if (this._Statename != value)
                {
                    this.OnStatenameChanging(value);
                    this.SendPropertyChanging();
                    this._Statename = value;
                    this.SendPropertyChanged("Statename");
                    this.OnStatenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"DELETED", Storage = "_Deleted", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Origincontractid in the schema.
        /// </summary>
        [Column(Name = @"ORIGINCONTRACTID", Storage = "_Origincontractid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Origincontractid
        {
            get
            {
                return this._Origincontractid;
            }
            set
            {
                if (this._Origincontractid != value)
                {
                    this.OnOrigincontractidChanging(value);
                    this.SendPropertyChanging();
                    this._Origincontractid = value;
                    this.SendPropertyChanged("Origincontractid");
                    this.OnOrigincontractidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contracttypename in the schema.
        /// </summary>
        [Column(Name = @"""ContractTypeName""", Storage = "_Contracttypename", DbType = "NVARCHAR2(200) NULL")]
        public string Contracttypename
        {
            get
            {
                return this._Contracttypename;
            }
            set
            {
                if (this._Contracttypename != value)
                {
                    this.OnContracttypenameChanging(value);
                    this.SendPropertyChanging();
                    this._Contracttypename = value;
                    this.SendPropertyChanged("Contracttypename");
                    this.OnContracttypenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorshortname in the schema.
        /// </summary>
        [Column(Name = @"""ContractorShortName""", Storage = "_Contractorshortname", DbType = "NVARCHAR2(255) NULL")]
        public string Contractorshortname
        {
            get
            {
                return this._Contractorshortname;
            }
            set
            {
                if (this._Contractorshortname != value)
                {
                    this.OnContractorshortnameChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorshortname = value;
                    this.SendPropertyChanged("Contractorshortname");
                    this.OnContractorshortnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractortype in the schema.
        /// </summary>
        [Column(Name = @"""ContractorType""", Storage = "_Contractortype", DbType = "NVARCHAR2(100) NULL")]
        public string Contractortype
        {
            get
            {
                return this._Contractortype;
            }
            set
            {
                if (this._Contractortype != value)
                {
                    this.OnContractortypeChanging(value);
                    this.SendPropertyChanging();
                    this._Contractortype = value;
                    this.SendPropertyChanged("Contractortype");
                    this.OnContractortypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personfamilyname in the schema.
        /// </summary>
        [Column(Name = @"""PersonFamilyName""", Storage = "_Personfamilyname", DbType = "NVARCHAR2(30) NULL")]
        public string Personfamilyname
        {
            get
            {
                return this._Personfamilyname;
            }
            set
            {
                if (this._Personfamilyname != value)
                {
                    this.OnPersonfamilynameChanging(value);
                    this.SendPropertyChanging();
                    this._Personfamilyname = value;
                    this.SendPropertyChanged("Personfamilyname");
                    this.OnPersonfamilynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personfirstname in the schema.
        /// </summary>
        [Column(Name = @"""PersonFirstName""", Storage = "_Personfirstname", DbType = "NVARCHAR2(30) NULL")]
        public string Personfirstname
        {
            get
            {
                return this._Personfirstname;
            }
            set
            {
                if (this._Personfirstname != value)
                {
                    this.OnPersonfirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Personfirstname = value;
                    this.SendPropertyChanged("Personfirstname");
                    this.OnPersonfirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Personmiddlename in the schema.
        /// </summary>
        [Column(Name = @"""PersonMiddleName""", Storage = "_Personmiddlename", DbType = "NVARCHAR2(30) NULL")]
        public string Personmiddlename
        {
            get
            {
                return this._Personmiddlename;
            }
            set
            {
                if (this._Personmiddlename != value)
                {
                    this.OnPersonmiddlenameChanging(value);
                    this.SendPropertyChanging();
                    this._Personmiddlename = value;
                    this.SendPropertyChanged("Personmiddlename");
                    this.OnPersonmiddlenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Agreementnum in the schema.
        /// </summary>
        [Column(Name = @"""Agreementnum""", Storage = "_Agreementnum", DbType = "NUMBER(4) NULL")]
        public System.Nullable<int> Agreementnum
        {
            get
            {
                return this._Agreementnum;
            }
            set
            {
                if (this._Agreementnum != value)
                {
                    this.OnAgreementnumChanging(value);
                    this.SendPropertyChanging();
                    this._Agreementnum = value;
                    this.SendPropertyChanged("Agreementnum");
                    this.OnAgreementnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Managernames in the schema.
        /// </summary>
        [Column(Name = @"""ManagerNames""", Storage = "_Managernames", DbType = "VARCHAR2(4000 CHAR) NULL")]
        public string Managernames
        {
            get
            {
                return this._Managernames;
            }
            set
            {
                if (this._Managernames != value)
                {
                    this.OnManagernamesChanging(value);
                    this.SendPropertyChanging();
                    this._Managernames = value;
                    this.SendPropertyChanged("Managernames");
                    this.OnManagernamesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Degreeid in the schema.
        /// </summary>
        [Column(Name = @"""DegreeId""", Storage = "_Degreeid", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Degreeid
        {
            get
            {
                return this._Degreeid;
            }
            set
            {
                if (this._Degreeid != value)
                {
                    this.OnDegreeidChanging(value);
                    this.SendPropertyChanging();
                    this._Degreeid = value;
                    this.SendPropertyChanged("Degreeid");
                    this.OnDegreeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Persondegree in the schema.
        /// </summary>
        [Column(Name = @"""PersonDegree""", Storage = "_Persondegree", DbType = "NVARCHAR2(50) NULL")]
        public string Persondegree
        {
            get
            {
                return this._Persondegree;
            }
            set
            {
                if (this._Persondegree != value)
                {
                    this.OnPersondegreeChanging(value);
                    this.SendPropertyChanging();
                    this._Persondegree = value;
                    this.SendPropertyChanged("Persondegree");
                    this.OnPersondegreeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Agreementreferencecount in the schema.
        /// </summary>
        [Column(Name = @"""AgreementReferenceCount""", Storage = "_Agreementreferencecount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Agreementreferencecount
        {
            get
            {
                return this._Agreementreferencecount;
            }
            set
            {
                if (this._Agreementreferencecount != value)
                {
                    this.OnAgreementreferencecountChanging(value);
                    this.SendPropertyChanging();
                    this._Agreementreferencecount = value;
                    this.SendPropertyChanged("Agreementreferencecount");
                    this.OnAgreementreferencecountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Generalreferencecount in the schema.
        /// </summary>
        [Column(Name = @"""GeneralReferenceCount""", Storage = "_Generalreferencecount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Generalreferencecount
        {
            get
            {
                return this._Generalreferencecount;
            }
            set
            {
                if (this._Generalreferencecount != value)
                {
                    this.OnGeneralreferencecountChanging(value);
                    this.SendPropertyChanging();
                    this._Generalreferencecount = value;
                    this.SendPropertyChanged("Generalreferencecount");
                    this.OnGeneralreferencecountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Schedulecount in the schema.
        /// </summary>
        [Column(Name = @"SCHEDULECOUNT", Storage = "_Schedulecount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Schedulecount
        {
            get
            {
                return this._Schedulecount;
            }
            set
            {
                if (this._Schedulecount != value)
                {
                    this.OnSchedulecountChanging(value);
                    this.SendPropertyChanging();
                    this._Schedulecount = value;
                    this.SendPropertyChanged("Schedulecount");
                    this.OnSchedulecountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorscount in the schema.
        /// </summary>
        [Column(Name = @"""ContractorsCount""", Storage = "_Contractorscount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Contractorscount
        {
            get
            {
                return this._Contractorscount;
            }
            set
            {
                if (this._Contractorscount != value)
                {
                    this.OnContractorscountChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorscount = value;
                    this.SendPropertyChanged("Contractorscount");
                    this.OnContractorscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orphandparentcount in the schema.
        /// </summary>
        [Column(Name = @"""OrphandParentCount""", Storage = "_Orphandparentcount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Orphandparentcount
        {
            get
            {
                return this._Orphandparentcount;
            }
            set
            {
                if (this._Orphandparentcount != value)
                {
                    this.OnOrphandparentcountChanging(value);
                    this.SendPropertyChanging();
                    this._Orphandparentcount = value;
                    this.SendPropertyChanged("Orphandparentcount");
                    this.OnOrphandparentcountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Closedparentcount in the schema.
        /// </summary>
        [Column(Name = @"""ClosedParentCount""", Storage = "_Closedparentcount", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Closedparentcount
        {
            get
            {
                return this._Closedparentcount;
            }
            set
            {
                if (this._Closedparentcount != value)
                {
                    this.OnClosedparentcountChanging(value);
                    this.SendPropertyChanging();
                    this._Closedparentcount = value;
                    this.SendPropertyChanged("Closedparentcount");
                    this.OnClosedparentcountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Maincontractid in the schema.
        /// </summary>
        [Column(Name = @"""MainContractID""", Storage = "_Maincontractid", DbType = "NUMBER(18) NULL")]
        public System.Nullable<long> Maincontractid
        {
            get
            {
                return this._Maincontractid;
            }
            set
            {
                if (this._Maincontractid != value)
                {
                    this.OnMaincontractidChanging(value);
                    this.SendPropertyChanging();
                    this._Maincontractid = value;
                    this.SendPropertyChanged("Maincontractid");
                    this.OnMaincontractidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Maincontractsubject in the schema.
        /// </summary>
        [Column(Name = @"""MainContractSubject""", Storage = "_Maincontractsubject", DbType = "NVARCHAR2(100) NULL")]
        public string Maincontractsubject
        {
            get
            {
                return this._Maincontractsubject;
            }
            set
            {
                if (this._Maincontractsubject != value)
                {
                    this.OnMaincontractsubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Maincontractsubject = value;
                    this.SendPropertyChanged("Maincontractsubject");
                    this.OnMaincontractsubjectChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Хранение файлов (сканированных копий) документов
    /// </summary>
    [Table(Name = @"UD.DOCUMENTIMAGE")]
    public partial class Documentimage : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private byte[] _Image;

        private long _Documentid;

        private string _Name;

        private string _Physicalname;

        private System.DateTime _Created;

        private System.DateTime _Modified;

        private string _Description;

        private EntityRef<Document> _Document;

        private EntitySet<Contractdocdocumentimage> _Contractdocdocumentimages;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnImageChanging(byte[] value);
        partial void OnImageChanged();
        partial void OnDocumentidChanging(long value);
        partial void OnDocumentidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhysicalnameChanging(string value);
        partial void OnPhysicalnameChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnModifiedChanging(System.DateTime value);
        partial void OnModifiedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Documentimage()
        {
            this._Document  = default(EntityRef<Document>);
            this._Contractdocdocumentimages = new EntitySet<Contractdocdocumentimage>(new Action<Contractdocdocumentimage>(this.attach_Contractdocdocumentimages), new Action<Contractdocdocumentimage>(this.detach_Contractdocdocumentimages));
            OnCreated();
        }

    
        /// <summary>
        /// Идентификатор файла документа
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Documentimage")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// Содержимое документа
        /// </summary>
        [Column(Name = @"IMAGE", Storage = "_Image", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// Тип документа
        /// </summary>
        [Column(Name = @"DOCUMENTID", Storage = "_Documentid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Documentid
        {
            get
            {
                return this._Documentid;
            }
            set
            {
                if (this._Documentid != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentidChanging(value);
                    this.SendPropertyChanging();
                    this._Documentid = value;
                    this.SendPropertyChanged("Documentid");
                    this.OnDocumentidChanged();
                }
            }
        }

    
        /// <summary>
        /// Название документа
        /// </summary>
        [Column(Name = @"NAME", Storage = "_Name", DbType = "NVARCHAR2(2000) NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// Имя файла документа
        /// </summary>
        [Column(Name = @"PHYSICALNAME", Storage = "_Physicalname", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
        public string Physicalname
        {
            get
            {
                return this._Physicalname;
            }
            set
            {
                if (this._Physicalname != value)
                {
                    this.OnPhysicalnameChanging(value);
                    this.SendPropertyChanging();
                    this._Physicalname = value;
                    this.SendPropertyChanged("Physicalname");
                    this.OnPhysicalnameChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата создания записи
        /// </summary>
        [Column(Name = @"CREATED", Storage = "_Created", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// Дата модификации записи
        /// </summary>
        [Column(Name = @"MODIFIED", Storage = "_Modified", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Modified
        {
            get
            {
                return this._Modified;
            }
            set
            {
                if (this._Modified != value)
                {
                    this.OnModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._Modified = value;
                    this.SendPropertyChanged("Modified");
                    this.OnModifiedChanged();
                }
            }
        }

    
        /// <summary>
        /// Описание документа
        /// </summary>
        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(2000) NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Documentimage", Storage="_Document", ThisKey="Documentid", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.Documentimages.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._Documentid = value.Id;
                        value.Documentimages.Add(this);
                    }
                    else
                    {
                        this._Documentid = default(long);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocdocumentimages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Documentimage_Contractdocdocumentimage", Storage="_Contractdocdocumentimages", OtherKey="Documentimageid")]
        public EntitySet<Contractdocdocumentimage> Contractdocdocumentimages
        {
            get
            {
                return this._Contractdocdocumentimages;
            }
            set
            {
                this._Contractdocdocumentimages.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Contractdocdocumentimages(Contractdocdocumentimage entity)
        {
            this.SendPropertyChanging("Contractdocdocumentimages");
            entity.Documentimage = this;
        }
    
        private void detach_Contractdocdocumentimages(Contractdocdocumentimage entity)
        {
            this.SendPropertyChanging("Contractdocdocumentimages");
            entity.Documentimage = null;
        }
    }

    /// <summary>
    /// There are no comments for Contractdocdocumentimage in the schema.
    /// </summary>
    [Table(Name = @"UD.CONTRACTDOCDOCUMENTIMAGE")]
    public partial class Contractdocdocumentimage : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractdocid;

        private long _Documentimageid;

        private EntityRef<Contractdoc> _Contractdoc;

        private EntityRef<Documentimage> _Documentimage;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        partial void OnDocumentimageidChanging(long value);
        partial void OnDocumentimageidChanged();
        #endregion

        public Contractdocdocumentimage()
        {
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            this._Documentimage  = default(EntityRef<Documentimage>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractdocdocumentimage")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Documentimageid in the schema.
        /// </summary>
        [Column(Name = @"DOCUMENTIMAGEID", Storage = "_Documentimageid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Documentimageid
        {
            get
            {
                return this._Documentimageid;
            }
            set
            {
                if (this._Documentimageid != value)
                {
                    if (this._Documentimage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentimageidChanging(value);
                    this.SendPropertyChanging();
                    this._Documentimageid = value;
                    this.SendPropertyChanged("Documentimageid");
                    this.OnDocumentimageidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractdocdocumentimage", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contractdocdocumentimages.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Contractdocdocumentimages.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Documentimage in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Documentimage_Contractdocdocumentimage", Storage="_Documentimage", ThisKey="Documentimageid", IsForeignKey=true, DeleteOnNull=true)]
        public Documentimage Documentimage
        {
            get
            {
                return this._Documentimage.Entity;
            }
            set
            {
                Documentimage previousValue = this._Documentimage.Entity;
                if ((previousValue != value) || (this._Documentimage.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Documentimage.Entity = null;
                        previousValue.Contractdocdocumentimages.Remove(this);
                    }
                    this._Documentimage.Entity = value;
                    if (value != null)
                    {
                        this._Documentimageid = value.Id;
                        value.Contractdocdocumentimages.Add(this);
                    }
                    else
                    {
                        this._Documentimageid = default(long);
                    }
                    this.SendPropertyChanged("Documentimage");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Contractorcontractdoc in the schema.
    /// </summary>
    [Table(Name = @"UD.CONTRACTORCONTRACTDOC")]
    public partial class Contractorcontractdoc : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Contractorid;

        private long _Contractdocid;

        private EntityRef<Contractdoc> _Contractdoc;

        private EntityRef<Contractor> _Contractor;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnContractoridChanging(long value);
        partial void OnContractoridChanged();
        partial void OnContractdocidChanging(long value);
        partial void OnContractdocidChanged();
        #endregion

        public Contractorcontractdoc()
        {
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            this._Contractor  = default(EntityRef<Contractor>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Contractorcontractdoc")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractorid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTORID", Storage = "_Contractorid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractorid
        {
            get
            {
                return this._Contractorid;
            }
            set
            {
                if (this._Contractorid != value)
                {
                    if (this._Contractor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractoridChanging(value);
                    this.SendPropertyChanging();
                    this._Contractorid = value;
                    this.SendPropertyChanged("Contractorid");
                    this.OnContractoridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"CONTRACTDOCID", Storage = "_Contractdocid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractorcontractdoc", Storage="_Contractdoc", ThisKey="Contractdocid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contractorcontractdocs.Remove(this);
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Contractdocid = value.Id;
                        value.Contractorcontractdocs.Add(this);
                    }
                    else
                    {
                        this._Contractdocid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractor_Contractorcontractdoc", Storage="_Contractor", ThisKey="Contractorid", IsForeignKey=true, DeleteOnNull=true)]
        public Contractor Contractor
        {
            get
            {
                return this._Contractor.Entity;
            }
            set
            {
                Contractor previousValue = this._Contractor.Entity;
                if ((previousValue != value) || (this._Contractor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractor.Entity = null;
                        previousValue.Contractorcontractdocs.Remove(this);
                    }
                    this._Contractor.Entity = value;
                    if (value != null)
                    {
                        this._Contractorid = value.Id;
                        value.Contractorcontractdocs.Add(this);
                    }
                    else
                    {
                        this._Contractorid = default(long);
                    }
                    this.SendPropertyChanged("Contractor");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Yearreportcolor in the schema.
    /// </summary>
    [Table(Name = @"UD.YEARREPORTCOLOR")]
    public partial class Yearreportcolor : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _Quarter;

        private int _Year;

        private System.Nullable<long> _Color;

        private System.Nullable<long> _Coworkerscolor;

        private long _Id;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnQuarterChanging(int value);
        partial void OnQuarterChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        partial void OnColorChanging(System.Nullable<long> value);
        partial void OnColorChanged();
        partial void OnCoworkerscolorChanging(System.Nullable<long> value);
        partial void OnCoworkerscolorChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        #endregion

        public Yearreportcolor()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Quarter in the schema.
        /// </summary>
        [Column(Name = @"QUARTER", Storage = "_Quarter", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Quarter
        {
            get
            {
                return this._Quarter;
            }
            set
            {
                if (this._Quarter != value)
                {
                    this.OnQuarterChanging(value);
                    this.SendPropertyChanging();
                    this._Quarter = value;
                    this.SendPropertyChanged("Quarter");
                    this.OnQuarterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Year in the schema.
        /// </summary>
        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Color in the schema.
        /// </summary>
        [Column(Name = @"COLOR", Storage = "_Color", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Coworkerscolor in the schema.
        /// </summary>
        [Column(Name = @"COWORKERSCOLOR", Storage = "_Coworkerscolor", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Coworkerscolor
        {
            get
            {
                return this._Coworkerscolor;
            }
            set
            {
                if (this._Coworkerscolor != value)
                {
                    this.OnCoworkerscolorChanging(value);
                    this.SendPropertyChanging();
                    this._Coworkerscolor = value;
                    this.SendPropertyChanged("Coworkerscolor");
                    this.OnCoworkerscolorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Yearreportcolor")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Actrepositoryview in the schema.
    /// </summary>
    [Table(Name = @"UD.ACTREPOSITORYVIEW")]
    public partial class Actrepositoryview : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Id;

        private long _Acttypeid;

        private string _Acttypename;

        private long _Enterpriceauthorityid;

        private long _Currencyid;

        private string _Currencyname;

        private string _Currencyculture;

        private long _Currencymeasureid;

        private string _Currencymeasurename1;

        private System.Nullable<long> _Currencymeasurefactor;

        private long _Ndsalgorithmid;

        private string _Ndsalgorithmname;

        private string _Num;

        private System.Nullable<System.DateTime> _Signdate;

        private long _Ndsid;

        private System.Nullable<double> _Ndspercents;

        private long _Regionid;

        private string _Regionname;

        private System.Nullable<decimal> _Totalsum;

        private System.Nullable<decimal> _Sumfortransfer;

        private System.Nullable<long> _Status;

        private System.Nullable<decimal> _Currencyrate;

        private System.Nullable<System.DateTime> _Ratedate;

        private System.Nullable<bool> _Issigned;

        private string _Actstagenumbers;

        private System.Nullable<decimal> _Contractdocid;

        private string _Contractsubject;

        private System.Nullable<decimal> _Maincontractid;

        private string _Maincontractsubject;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnActtypeidChanging(long value);
        partial void OnActtypeidChanged();
        partial void OnActtypenameChanging(string value);
        partial void OnActtypenameChanged();
        partial void OnEnterpriceauthorityidChanging(long value);
        partial void OnEnterpriceauthorityidChanged();
        partial void OnCurrencyidChanging(long value);
        partial void OnCurrencyidChanged();
        partial void OnCurrencynameChanging(string value);
        partial void OnCurrencynameChanged();
        partial void OnCurrencycultureChanging(string value);
        partial void OnCurrencycultureChanged();
        partial void OnCurrencymeasureidChanging(long value);
        partial void OnCurrencymeasureidChanged();
        partial void OnCurrencymeasurename1Changing(string value);
        partial void OnCurrencymeasurename1Changed();
        partial void OnCurrencymeasurefactorChanging(System.Nullable<long> value);
        partial void OnCurrencymeasurefactorChanged();
        partial void OnNdsalgorithmidChanging(long value);
        partial void OnNdsalgorithmidChanged();
        partial void OnNdsalgorithmnameChanging(string value);
        partial void OnNdsalgorithmnameChanged();
        partial void OnNumChanging(string value);
        partial void OnNumChanged();
        partial void OnSigndateChanging(System.Nullable<System.DateTime> value);
        partial void OnSigndateChanged();
        partial void OnNdsidChanging(long value);
        partial void OnNdsidChanged();
        partial void OnNdspercentsChanging(System.Nullable<double> value);
        partial void OnNdspercentsChanged();
        partial void OnRegionidChanging(long value);
        partial void OnRegionidChanged();
        partial void OnRegionnameChanging(string value);
        partial void OnRegionnameChanged();
        partial void OnTotalsumChanging(System.Nullable<decimal> value);
        partial void OnTotalsumChanged();
        partial void OnSumfortransferChanging(System.Nullable<decimal> value);
        partial void OnSumfortransferChanged();
        partial void OnStatusChanging(System.Nullable<long> value);
        partial void OnStatusChanged();
        partial void OnCurrencyrateChanging(System.Nullable<decimal> value);
        partial void OnCurrencyrateChanged();
        partial void OnRatedateChanging(System.Nullable<System.DateTime> value);
        partial void OnRatedateChanged();
        partial void OnIssignedChanging(System.Nullable<bool> value);
        partial void OnIssignedChanged();
        partial void OnActstagenumbersChanging(string value);
        partial void OnActstagenumbersChanged();
        partial void OnContractdocidChanging(System.Nullable<decimal> value);
        partial void OnContractdocidChanged();
        partial void OnContractsubjectChanging(string value);
        partial void OnContractsubjectChanged();
        partial void OnMaincontractidChanging(System.Nullable<decimal> value);
        partial void OnMaincontractidChanged();
        partial void OnMaincontractsubjectChanging(string value);
        partial void OnMaincontractsubjectChanged();
        #endregion

        public Actrepositoryview()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        [Devart.Data.Linq.Mapping.KeyGenerator.SequenceGenerator(Sequence = "seq_Actrepositoryview")]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acttypeid in the schema.
        /// </summary>
        [Column(Name = @"ACTTYPEID", Storage = "_Acttypeid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Acttypeid
        {
            get
            {
                return this._Acttypeid;
            }
            set
            {
                if (this._Acttypeid != value)
                {
                    this.OnActtypeidChanging(value);
                    this.SendPropertyChanging();
                    this._Acttypeid = value;
                    this.SendPropertyChanged("Acttypeid");
                    this.OnActtypeidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Acttypename in the schema.
        /// </summary>
        [Column(Name = @"""ActTypeName""", Storage = "_Acttypename", DbType = "NVARCHAR2(200) NULL")]
        public string Acttypename
        {
            get
            {
                return this._Acttypename;
            }
            set
            {
                if (this._Acttypename != value)
                {
                    this.OnActtypenameChanging(value);
                    this.SendPropertyChanging();
                    this._Acttypename = value;
                    this.SendPropertyChanged("Acttypename");
                    this.OnActtypenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Enterpriceauthorityid in the schema.
        /// </summary>
        [Column(Name = @"ENTERPRICEAUTHORITYID", Storage = "_Enterpriceauthorityid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Enterpriceauthorityid
        {
            get
            {
                return this._Enterpriceauthorityid;
            }
            set
            {
                if (this._Enterpriceauthorityid != value)
                {
                    this.OnEnterpriceauthorityidChanging(value);
                    this.SendPropertyChanging();
                    this._Enterpriceauthorityid = value;
                    this.SendPropertyChanged("Enterpriceauthorityid");
                    this.OnEnterpriceauthorityidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyid in the schema.
        /// </summary>
        [Column(Name = @"CURRENCYID", Storage = "_Currencyid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencyid
        {
            get
            {
                return this._Currencyid;
            }
            set
            {
                if (this._Currencyid != value)
                {
                    this.OnCurrencyidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyid = value;
                    this.SendPropertyChanged("Currencyid");
                    this.OnCurrencyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyname in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyName""", Storage = "_Currencyname", DbType = "NVARCHAR2(100) NULL")]
        public string Currencyname
        {
            get
            {
                return this._Currencyname;
            }
            set
            {
                if (this._Currencyname != value)
                {
                    this.OnCurrencynameChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyname = value;
                    this.SendPropertyChanged("Currencyname");
                    this.OnCurrencynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyculture in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyCulture""", Storage = "_Currencyculture", DbType = "NVARCHAR2(10) NULL")]
        public string Currencyculture
        {
            get
            {
                return this._Currencyculture;
            }
            set
            {
                if (this._Currencyculture != value)
                {
                    this.OnCurrencycultureChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyculture = value;
                    this.SendPropertyChanged("Currencyculture");
                    this.OnCurrencycultureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasureid in the schema.
        /// </summary>
        [Column(Name = @"CURRENCYMEASUREID", Storage = "_Currencymeasureid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Currencymeasureid
        {
            get
            {
                return this._Currencymeasureid;
            }
            set
            {
                if (this._Currencymeasureid != value)
                {
                    this.OnCurrencymeasureidChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasureid = value;
                    this.SendPropertyChanged("Currencymeasureid");
                    this.OnCurrencymeasureidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasurename1 in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyMeasureName""", Storage = "_Currencymeasurename1", DbType = "NVARCHAR2(20) NULL")]
        public string Currencymeasurename1
        {
            get
            {
                return this._Currencymeasurename1;
            }
            set
            {
                if (this._Currencymeasurename1 != value)
                {
                    this.OnCurrencymeasurename1Changing(value);
                    this.SendPropertyChanging();
                    this._Currencymeasurename1 = value;
                    this.SendPropertyChanged("Currencymeasurename1");
                    this.OnCurrencymeasurename1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencymeasurefactor in the schema.
        /// </summary>
        [Column(Name = @"""CurrencyMeasureFactor""", Storage = "_Currencymeasurefactor", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Currencymeasurefactor
        {
            get
            {
                return this._Currencymeasurefactor;
            }
            set
            {
                if (this._Currencymeasurefactor != value)
                {
                    this.OnCurrencymeasurefactorChanging(value);
                    this.SendPropertyChanging();
                    this._Currencymeasurefactor = value;
                    this.SendPropertyChanged("Currencymeasurefactor");
                    this.OnCurrencymeasurefactorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithmid in the schema.
        /// </summary>
        [Column(Name = @"NDSALGORITHMID", Storage = "_Ndsalgorithmid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsalgorithmid
        {
            get
            {
                return this._Ndsalgorithmid;
            }
            set
            {
                if (this._Ndsalgorithmid != value)
                {
                    this.OnNdsalgorithmidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmid = value;
                    this.SendPropertyChanged("Ndsalgorithmid");
                    this.OnNdsalgorithmidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsalgorithmname in the schema.
        /// </summary>
        [Column(Name = @"""NdsalgorithmName""", Storage = "_Ndsalgorithmname", DbType = "NVARCHAR2(100) NULL")]
        public string Ndsalgorithmname
        {
            get
            {
                return this._Ndsalgorithmname;
            }
            set
            {
                if (this._Ndsalgorithmname != value)
                {
                    this.OnNdsalgorithmnameChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsalgorithmname = value;
                    this.SendPropertyChanged("Ndsalgorithmname");
                    this.OnNdsalgorithmnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Num in the schema.
        /// </summary>
        [Column(Name = @"NUM", Storage = "_Num", DbType = "NVARCHAR2(255) NULL")]
        public string Num
        {
            get
            {
                return this._Num;
            }
            set
            {
                if (this._Num != value)
                {
                    this.OnNumChanging(value);
                    this.SendPropertyChanging();
                    this._Num = value;
                    this.SendPropertyChanged("Num");
                    this.OnNumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Signdate in the schema.
        /// </summary>
        [Column(Name = @"SIGNDATE", Storage = "_Signdate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Signdate
        {
            get
            {
                return this._Signdate;
            }
            set
            {
                if (this._Signdate != value)
                {
                    this.OnSigndateChanging(value);
                    this.SendPropertyChanging();
                    this._Signdate = value;
                    this.SendPropertyChanged("Signdate");
                    this.OnSigndateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndsid in the schema.
        /// </summary>
        [Column(Name = @"NDSID", Storage = "_Ndsid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Ndsid
        {
            get
            {
                return this._Ndsid;
            }
            set
            {
                if (this._Ndsid != value)
                {
                    this.OnNdsidChanging(value);
                    this.SendPropertyChanging();
                    this._Ndsid = value;
                    this.SendPropertyChanged("Ndsid");
                    this.OnNdsidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ndspercents in the schema.
        /// </summary>
        [Column(Name = @"""NdsPercents""", Storage = "_Ndspercents", DbType = "NUMBER(4,2) NULL")]
        public System.Nullable<double> Ndspercents
        {
            get
            {
                return this._Ndspercents;
            }
            set
            {
                if (this._Ndspercents != value)
                {
                    this.OnNdspercentsChanging(value);
                    this.SendPropertyChanging();
                    this._Ndspercents = value;
                    this.SendPropertyChanged("Ndspercents");
                    this.OnNdspercentsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Regionid in the schema.
        /// </summary>
        [Column(Name = @"REGIONID", Storage = "_Regionid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Regionid
        {
            get
            {
                return this._Regionid;
            }
            set
            {
                if (this._Regionid != value)
                {
                    this.OnRegionidChanging(value);
                    this.SendPropertyChanging();
                    this._Regionid = value;
                    this.SendPropertyChanged("Regionid");
                    this.OnRegionidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Regionname in the schema.
        /// </summary>
        [Column(Name = @"""RegionName""", Storage = "_Regionname", DbType = "NVARCHAR2(500) NULL")]
        public string Regionname
        {
            get
            {
                return this._Regionname;
            }
            set
            {
                if (this._Regionname != value)
                {
                    this.OnRegionnameChanging(value);
                    this.SendPropertyChanging();
                    this._Regionname = value;
                    this.SendPropertyChanged("Regionname");
                    this.OnRegionnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Totalsum in the schema.
        /// </summary>
        [Column(Name = @"TOTALSUM", Storage = "_Totalsum", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Totalsum
        {
            get
            {
                return this._Totalsum;
            }
            set
            {
                if (this._Totalsum != value)
                {
                    this.OnTotalsumChanging(value);
                    this.SendPropertyChanging();
                    this._Totalsum = value;
                    this.SendPropertyChanged("Totalsum");
                    this.OnTotalsumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sumfortransfer in the schema.
        /// </summary>
        [Column(Name = @"SUMFORTRANSFER", Storage = "_Sumfortransfer", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Sumfortransfer
        {
            get
            {
                return this._Sumfortransfer;
            }
            set
            {
                if (this._Sumfortransfer != value)
                {
                    this.OnSumfortransferChanging(value);
                    this.SendPropertyChanging();
                    this._Sumfortransfer = value;
                    this.SendPropertyChanged("Sumfortransfer");
                    this.OnSumfortransferChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"STATUS", Storage = "_Status", DbType = "NUMBER(10) NULL")]
        public System.Nullable<long> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currencyrate in the schema.
        /// </summary>
        [Column(Name = @"CURRENCYRATE", Storage = "_Currencyrate", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> Currencyrate
        {
            get
            {
                return this._Currencyrate;
            }
            set
            {
                if (this._Currencyrate != value)
                {
                    this.OnCurrencyrateChanging(value);
                    this.SendPropertyChanging();
                    this._Currencyrate = value;
                    this.SendPropertyChanged("Currencyrate");
                    this.OnCurrencyrateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ratedate in the schema.
        /// </summary>
        [Column(Name = @"RATEDATE", Storage = "_Ratedate", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> Ratedate
        {
            get
            {
                return this._Ratedate;
            }
            set
            {
                if (this._Ratedate != value)
                {
                    this.OnRatedateChanging(value);
                    this.SendPropertyChanging();
                    this._Ratedate = value;
                    this.SendPropertyChanged("Ratedate");
                    this.OnRatedateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issigned in the schema.
        /// </summary>
        [Column(Name = @"ISSIGNED", Storage = "_Issigned", DbType = "NUMBER(1) NULL")]
        public System.Nullable<bool> Issigned
        {
            get
            {
                return this._Issigned;
            }
            set
            {
                if (this._Issigned != value)
                {
                    this.OnIssignedChanging(value);
                    this.SendPropertyChanging();
                    this._Issigned = value;
                    this.SendPropertyChanged("Issigned");
                    this.OnIssignedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Actstagenumbers in the schema.
        /// </summary>
        [Column(Name = @"""ActStageNumbers""", Storage = "_Actstagenumbers", DbType = "NVARCHAR2(2000) NULL")]
        public string Actstagenumbers
        {
            get
            {
                return this._Actstagenumbers;
            }
            set
            {
                if (this._Actstagenumbers != value)
                {
                    this.OnActstagenumbersChanging(value);
                    this.SendPropertyChanging();
                    this._Actstagenumbers = value;
                    this.SendPropertyChanged("Actstagenumbers");
                    this.OnActstagenumbersChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdocid in the schema.
        /// </summary>
        [Column(Name = @"""Contractdocid""", Storage = "_Contractdocid", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Contractdocid
        {
            get
            {
                return this._Contractdocid;
            }
            set
            {
                if (this._Contractdocid != value)
                {
                    this.OnContractdocidChanging(value);
                    this.SendPropertyChanging();
                    this._Contractdocid = value;
                    this.SendPropertyChanged("Contractdocid");
                    this.OnContractdocidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractsubject in the schema.
        /// </summary>
        [Column(Name = @"""ContractSubject""", Storage = "_Contractsubject", DbType = "NVARCHAR2(2000) NULL")]
        public string Contractsubject
        {
            get
            {
                return this._Contractsubject;
            }
            set
            {
                if (this._Contractsubject != value)
                {
                    this.OnContractsubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Contractsubject = value;
                    this.SendPropertyChanged("Contractsubject");
                    this.OnContractsubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Maincontractid in the schema.
        /// </summary>
        [Column(Name = @"""MainContractID""", Storage = "_Maincontractid", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> Maincontractid
        {
            get
            {
                return this._Maincontractid;
            }
            set
            {
                if (this._Maincontractid != value)
                {
                    this.OnMaincontractidChanging(value);
                    this.SendPropertyChanging();
                    this._Maincontractid = value;
                    this.SendPropertyChanged("Maincontractid");
                    this.OnMaincontractidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Maincontractsubject in the schema.
        /// </summary>
        [Column(Name = @"""MainContractSubject""", Storage = "_Maincontractsubject", DbType = "NVARCHAR2(2000) NULL")]
        public string Maincontractsubject
        {
            get
            {
                return this._Maincontractsubject;
            }
            set
            {
                if (this._Maincontractsubject != value)
                {
                    this.OnMaincontractsubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Maincontractsubject = value;
                    this.SendPropertyChanged("Maincontractsubject");
                    this.OnMaincontractsubjectChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Хранение вычисленных сумм по договору
    /// </summary>
    [Table(Name = @"UD.CONTRACTPRICECACHE")]
    public partial class Contractpricecache : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Cacheid;

        private System.Nullable<decimal> _DisbursedCache;

        private System.Nullable<decimal> _LeftCache;

        private System.Nullable<decimal> _StagesTotalPriceCache;

        private System.Nullable<decimal> _DisbursedCoworkersCache;

        private System.Nullable<decimal> _LeftCoworkersCache;

        private EntityRef<Contractdoc> _Contractdoc;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCacheidChanging(long value);
        partial void OnCacheidChanged();
        partial void OnDisbursedCacheChanging(System.Nullable<decimal> value);
        partial void OnDisbursedCacheChanged();
        partial void OnLeftCacheChanging(System.Nullable<decimal> value);
        partial void OnLeftCacheChanged();
        partial void OnStagesTotalPriceCacheChanging(System.Nullable<decimal> value);
        partial void OnStagesTotalPriceCacheChanged();
        partial void OnDisbursedCoworkersCacheChanging(System.Nullable<decimal> value);
        partial void OnDisbursedCoworkersCacheChanged();
        partial void OnLeftCoworkersCacheChanging(System.Nullable<decimal> value);
        partial void OnLeftCoworkersCacheChanged();
        #endregion

        public Contractpricecache()
        {
            this._Contractdoc  = default(EntityRef<Contractdoc>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Cacheid in the schema.
        /// </summary>
        [Column(Name = @"CACHEID", Storage = "_Cacheid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long Cacheid
        {
            get
            {
                return this._Cacheid;
            }
            set
            {
                if (this._Cacheid != value)
                {
                    if (this._Contractdoc.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCacheidChanging(value);
                    this.SendPropertyChanging();
                    this._Cacheid = value;
                    this.SendPropertyChanged("Cacheid");
                    this.OnCacheidChanged();
                }
            }
        }

    
        /// <summary>
        /// Используется для хранения расчитанного значения суммы выполненных работ по договору для повышения производительности
        /// </summary>
        [Column(Name = @"DISBURSED_CACHE", Storage = "_DisbursedCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> DisbursedCache
        {
            get
            {
                return this._DisbursedCache;
            }
            set
            {
                if (this._DisbursedCache != value)
                {
                    this.OnDisbursedCacheChanging(value);
                    this.SendPropertyChanging();
                    this._DisbursedCache = value;
                    this.SendPropertyChanged("DisbursedCache");
                    this.OnDisbursedCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// Используется для хранения расчитанного значения суммы остатка по работам для повышения производительности
        /// </summary>
        [Column(Name = @"LEFT_CACHE", Storage = "_LeftCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> LeftCache
        {
            get
            {
                return this._LeftCache;
            }
            set
            {
                if (this._LeftCache != value)
                {
                    this.OnLeftCacheChanging(value);
                    this.SendPropertyChanging();
                    this._LeftCache = value;
                    this.SendPropertyChanged("LeftCache");
                    this.OnLeftCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// Используется для хранения расчитанного значения суммы по работам по календарному плану для повышения производительности
        /// </summary>
        [Column(Name = @"STAGES_TOTAL_PRICE_CACHE", Storage = "_StagesTotalPriceCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> StagesTotalPriceCache
        {
            get
            {
                return this._StagesTotalPriceCache;
            }
            set
            {
                if (this._StagesTotalPriceCache != value)
                {
                    this.OnStagesTotalPriceCacheChanging(value);
                    this.SendPropertyChanging();
                    this._StagesTotalPriceCache = value;
                    this.SendPropertyChanged("StagesTotalPriceCache");
                    this.OnStagesTotalPriceCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// Используется для хранения расчитанного значения суммы выполненных работ по работам соисполнителей для повышения производительности
        /// </summary>
        [Column(Name = @"DISBURSED_COWORKERS_CACHE", Storage = "_DisbursedCoworkersCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> DisbursedCoworkersCache
        {
            get
            {
                return this._DisbursedCoworkersCache;
            }
            set
            {
                if (this._DisbursedCoworkersCache != value)
                {
                    this.OnDisbursedCoworkersCacheChanging(value);
                    this.SendPropertyChanging();
                    this._DisbursedCoworkersCache = value;
                    this.SendPropertyChanged("DisbursedCoworkersCache");
                    this.OnDisbursedCoworkersCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// Используется для хранения расчитанного значения суммы выполненных остатка по работам соисполнителей для повышения производительности
        /// </summary>
        [Column(Name = @"LEFT_COWORKERS_CACHE", Storage = "_LeftCoworkersCache", DbType = "NUMBER(18,2) NULL")]
        public System.Nullable<decimal> LeftCoworkersCache
        {
            get
            {
                return this._LeftCoworkersCache;
            }
            set
            {
                if (this._LeftCoworkersCache != value)
                {
                    this.OnLeftCoworkersCacheChanging(value);
                    this.SendPropertyChanging();
                    this._LeftCoworkersCache = value;
                    this.SendPropertyChanged("LeftCoworkersCache");
                    this.OnLeftCoworkersCacheChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contractdoc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Contractdoc_Contractpricecache", Storage="_Contractdoc", ThisKey="Cacheid", IsForeignKey=true)]
        public Contractdoc Contractdoc
        {
            get
            {
                return this._Contractdoc.Entity;
            }
            set
            {
                Contractdoc previousValue = this._Contractdoc.Entity;
                if ((previousValue != value) || (this._Contractdoc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contractdoc.Entity = null;
                        previousValue.Contractpricecache = null;
                    }
                    this._Contractdoc.Entity = value;
                    if (value != null)
                    {
                        this._Cacheid = value.Id;
                        value.Contractpricecache = this;
                    }
                    else
                    {
                        this._Cacheid = default(long);
                    }
                    this.SendPropertyChanged("Contractdoc");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
